
9_SpinlockSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001798  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001938  08001938  00002938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019cc  080019cc  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080019cc  080019cc  000029cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019d4  080019d4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019d4  080019d4  000029d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080019d8  080019d8  000029d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080019dc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  2000005c  08001a38  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014bc  08001a38  000034bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bee  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007ad  00000000  00000000  00004c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00005428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017c  00000000  00000000  00005648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021b9  00000000  00000000  000057c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002299  00000000  00000000  0000797d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005626a  00000000  00000000  00009c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005fe80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e94  00000000  00000000  0005fec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00060d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001920 	.word	0x08001920

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001920 	.word	0x08001920

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <task0>:
void motor_stop(void);
void valve_open(void);
void valve_close(void);

void task0(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	while(1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <task0+0x4>

08000288 <task1>:

	}
}

void task1(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	while(1)
	{
		osSemaphoreWait(&semaphore1);
 800028c:	4804      	ldr	r0, [pc, #16]	@ (80002a0 <task1+0x18>)
 800028e:	f000 fa9a 	bl	80007c6 <osSemaphoreWait>
		motor_run();
 8000292:	f000 f863 	bl	800035c <motor_run>
		osSemaphoreSet(&semaphore2);
 8000296:	4803      	ldr	r0, [pc, #12]	@ (80002a4 <task1+0x1c>)
 8000298:	f000 fa82 	bl	80007a0 <osSemaphoreSet>
		osSemaphoreWait(&semaphore1);
 800029c:	bf00      	nop
 800029e:	e7f5      	b.n	800028c <task1+0x4>
 80002a0:	20000080 	.word	0x20000080
 80002a4:	20000084 	.word	0x20000084

080002a8 <task2>:

	}
}

void task2(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	while(1)
	{
		osSemaphoreWait(&semaphore2);
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <task2+0x18>)
 80002ae:	f000 fa8a 	bl	80007c6 <osSemaphoreWait>
		valve_open();
 80002b2:	f000 f85d 	bl	8000370 <valve_open>
		osSemaphoreSet(&semaphore1);
 80002b6:	4803      	ldr	r0, [pc, #12]	@ (80002c4 <task2+0x1c>)
 80002b8:	f000 fa72 	bl	80007a0 <osSemaphoreSet>
		osSemaphoreWait(&semaphore2);
 80002bc:	bf00      	nop
 80002be:	e7f5      	b.n	80002ac <task2+0x4>
 80002c0:	20000084 	.word	0x20000084
 80002c4:	20000080 	.word	0x20000080

080002c8 <task3>:

	}
}

void task3(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	pTask1_Profiler++;
 80002cc:	4b04      	ldr	r3, [pc, #16]	@ (80002e0 <task3+0x18>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	4a03      	ldr	r2, [pc, #12]	@ (80002e0 <task3+0x18>)
 80002d4:	6013      	str	r3, [r2, #0]
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	20000078 	.word	0x20000078

080002e4 <main>:

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	// Initialise uart
	uart_tx_init();
 80002e8:	f000 fb38 	bl	800095c <uart_tx_init>

	// Initialise hardware timer
	tim2_1hz_interrupt_init();
 80002ec:	f000 fa20 	bl	8000730 <tim2_1hz_interrupt_init>

	// Initialise Semaphores
	osSemaphoreInit(&semaphore1, 1);
 80002f0:	2101      	movs	r1, #1
 80002f2:	480a      	ldr	r0, [pc, #40]	@ (800031c <main+0x38>)
 80002f4:	f000 fa46 	bl	8000784 <osSemaphoreInit>
	osSemaphoreInit(&semaphore2, 0);
 80002f8:	2100      	movs	r1, #0
 80002fa:	4809      	ldr	r0, [pc, #36]	@ (8000320 <main+0x3c>)
 80002fc:	f000 fa42 	bl	8000784 <osSemaphoreInit>

	// Initialise Kernel
	osKernelInit();
 8000300:	f000 f994 	bl	800062c <osKernelInit>

	// Add Threads
	osKernelAddThreads(&task0, &task1, &task2);
 8000304:	4a07      	ldr	r2, [pc, #28]	@ (8000324 <main+0x40>)
 8000306:	4908      	ldr	r1, [pc, #32]	@ (8000328 <main+0x44>)
 8000308:	4808      	ldr	r0, [pc, #32]	@ (800032c <main+0x48>)
 800030a:	f000 f953 	bl	80005b4 <osKernelAddThreads>

	// Set RoundRobin time quanta
	osKernelLaunch(QUANTA);
 800030e:	200a      	movs	r0, #10
 8000310:	f000 f99a 	bl	8000648 <osKernelLaunch>
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000080 	.word	0x20000080
 8000320:	20000084 	.word	0x20000084
 8000324:	080002a9 	.word	0x080002a9
 8000328:	08000289 	.word	0x08000289
 800032c:	08000281 	.word	0x08000281

08000330 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	// Clear update interrupt flag
	TIM2->SR &=~SR_UIF;
 8000334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800033e:	f023 0301 	bic.w	r3, r3, #1
 8000342:	6113      	str	r3, [r2, #16]

	// Increment the profiler
	pTask2_Profiler++;
 8000344:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <TIM2_IRQHandler+0x28>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	4a03      	ldr	r2, [pc, #12]	@ (8000358 <TIM2_IRQHandler+0x28>)
 800034c:	6013      	str	r3, [r2, #0]
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	2000007c 	.word	0x2000007c

0800035c <motor_run>:

void motor_run(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	printf("Motor is starting...\n\r");
 8000360:	4802      	ldr	r0, [pc, #8]	@ (800036c <motor_run+0x10>)
 8000362:	f000 fc71 	bl	8000c48 <iprintf>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	08001938 	.word	0x08001938

08000370 <valve_open>:
	printf("Motor is stopping...\n\r");
}

void valve_open(void)

{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	printf("Valve is opening...\n\r");
 8000374:	4802      	ldr	r0, [pc, #8]	@ (8000380 <valve_open+0x10>)
 8000376:	f000 fc67 	bl	8000c48 <iprintf>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	08001968 	.word	0x08001968

08000384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800038e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000392:	2b00      	cmp	r3, #0
 8000394:	db0b      	blt.n	80003ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f003 021f 	and.w	r2, r3, #31
 800039c:	4907      	ldr	r1, [pc, #28]	@ (80003bc <__NVIC_EnableIRQ+0x38>)
 800039e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a2:	095b      	lsrs	r3, r3, #5
 80003a4:	2001      	movs	r0, #1
 80003a6:	fa00 f202 	lsl.w	r2, r0, r2
 80003aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	6039      	str	r1, [r7, #0]
 80003ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db0a      	blt.n	80003ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	490c      	ldr	r1, [pc, #48]	@ (800040c <__NVIC_SetPriority+0x4c>)
 80003da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003de:	0112      	lsls	r2, r2, #4
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	440b      	add	r3, r1
 80003e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003e8:	e00a      	b.n	8000400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4908      	ldr	r1, [pc, #32]	@ (8000410 <__NVIC_SetPriority+0x50>)
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	f003 030f 	and.w	r3, r3, #15
 80003f6:	3b04      	subs	r3, #4
 80003f8:	0112      	lsls	r2, r2, #4
 80003fa:	b2d2      	uxtb	r2, r2
 80003fc:	440b      	add	r3, r1
 80003fe:	761a      	strb	r2, [r3, #24]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	e000e100 	.word	0xe000e100
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <osKernelStackInit>:
/* Each thread will have stacksize of 100 i.e 400bytes. int32_t is 4 bytes * 100 = 400 bytes */
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];


void osKernelStackInit(int i)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]

	tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE - 16]; // Stack Pointer
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800042a:	4a60      	ldr	r2, [pc, #384]	@ (80005ac <osKernelStackInit+0x198>)
 800042c:	441a      	add	r2, r3
 800042e:	4960      	ldr	r1, [pc, #384]	@ (80005b0 <osKernelStackInit+0x19c>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	/* Set bit21 (T-bit in PSR to 1, to operate in  Thumb mode*/
	TCB_STACK[i][STACKSIZE - 1] = (1U<<24); //PSR
 8000436:	4a5d      	ldr	r2, [pc, #372]	@ (80005ac <osKernelStackInit+0x198>)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800043e:	fb01 f303 	mul.w	r3, r1, r3
 8000442:	4413      	add	r3, r2
 8000444:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 8000448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800044c:	601a      	str	r2, [r3, #0]

	// Dummy stack content @NOTE: Block below is optional, for debuggin puposes only
	/* In the generic use guide cortex m4 devices. if you search for core registers you will find more information on these */
	TCB_STACK[i][STACKSIZE - 3] = 0xAAAAAAAA; //R14 - LR
 800044e:	4a57      	ldr	r2, [pc, #348]	@ (80005ac <osKernelStackInit+0x198>)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000456:	fb01 f303 	mul.w	r3, r1, r3
 800045a:	4413      	add	r3, r2
 800045c:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8000460:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000464:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 4] = 0xAAAAAAAA; //R12
 8000466:	4a51      	ldr	r2, [pc, #324]	@ (80005ac <osKernelStackInit+0x198>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800046e:	fb01 f303 	mul.w	r3, r1, r3
 8000472:	4413      	add	r3, r2
 8000474:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 8000478:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800047c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 5] = 0xAAAAAAAA; //R3
 800047e:	4a4b      	ldr	r2, [pc, #300]	@ (80005ac <osKernelStackInit+0x198>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000486:	fb01 f303 	mul.w	r3, r1, r3
 800048a:	4413      	add	r3, r2
 800048c:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8000490:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000494:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 6] = 0xAAAAAAAA; //R2
 8000496:	4a45      	ldr	r2, [pc, #276]	@ (80005ac <osKernelStackInit+0x198>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800049e:	fb01 f303 	mul.w	r3, r1, r3
 80004a2:	4413      	add	r3, r2
 80004a4:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 80004a8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004ac:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 7] = 0xAAAAAAAA; //R1
 80004ae:	4a3f      	ldr	r2, [pc, #252]	@ (80005ac <osKernelStackInit+0x198>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004b6:	fb01 f303 	mul.w	r3, r1, r3
 80004ba:	4413      	add	r3, r2
 80004bc:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80004c0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004c4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 8] = 0xAAAAAAAA; //R0
 80004c6:	4a39      	ldr	r2, [pc, #228]	@ (80005ac <osKernelStackInit+0x198>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004ce:	fb01 f303 	mul.w	r3, r1, r3
 80004d2:	4413      	add	r3, r2
 80004d4:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80004d8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004dc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 9] = 0xAAAAAAAA; //R11
 80004de:	4a33      	ldr	r2, [pc, #204]	@ (80005ac <osKernelStackInit+0x198>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004e6:	fb01 f303 	mul.w	r3, r1, r3
 80004ea:	4413      	add	r3, r2
 80004ec:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 80004f0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004f4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 10] = 0xAAAAAAAA; //R10
 80004f6:	4a2d      	ldr	r2, [pc, #180]	@ (80005ac <osKernelStackInit+0x198>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004fe:	fb01 f303 	mul.w	r3, r1, r3
 8000502:	4413      	add	r3, r2
 8000504:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8000508:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800050c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 11] = 0xAAAAAAAA; //R9
 800050e:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <osKernelStackInit+0x198>)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000516:	fb01 f303 	mul.w	r3, r1, r3
 800051a:	4413      	add	r3, r2
 800051c:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8000520:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000524:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 12] = 0xAAAAAAAA; //R8
 8000526:	4a21      	ldr	r2, [pc, #132]	@ (80005ac <osKernelStackInit+0x198>)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800052e:	fb01 f303 	mul.w	r3, r1, r3
 8000532:	4413      	add	r3, r2
 8000534:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 8000538:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800053c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 13] = 0xAAAAAAAA; //R7
 800053e:	4a1b      	ldr	r2, [pc, #108]	@ (80005ac <osKernelStackInit+0x198>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000546:	fb01 f303 	mul.w	r3, r1, r3
 800054a:	4413      	add	r3, r2
 800054c:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8000550:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000554:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 14] = 0xAAAAAAAA; //R6
 8000556:	4a15      	ldr	r2, [pc, #84]	@ (80005ac <osKernelStackInit+0x198>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800055e:	fb01 f303 	mul.w	r3, r1, r3
 8000562:	4413      	add	r3, r2
 8000564:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 8000568:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800056c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 15] = 0xAAAAAAAA; //R5
 800056e:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <osKernelStackInit+0x198>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000576:	fb01 f303 	mul.w	r3, r1, r3
 800057a:	4413      	add	r3, r2
 800057c:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8000580:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000584:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 16] = 0xAAAAAAAA; //R4
 8000586:	4a09      	ldr	r2, [pc, #36]	@ (80005ac <osKernelStackInit+0x198>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800058e:	fb01 f303 	mul.w	r3, r1, r3
 8000592:	4413      	add	r3, r2
 8000594:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000598:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800059c:	601a      	str	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200000ac 	.word	0x200000ac
 80005b0:	20000090 	.word	0x20000090

080005b4 <osKernelAddThreads>:


uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
	// Disable global interrupts
	__disable_irq();
	tcbs[0].nextPt = &tcbs[1];
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <osKernelAddThreads+0x64>)
 80005c6:	4a15      	ldr	r2, [pc, #84]	@ (800061c <osKernelAddThreads+0x68>)
 80005c8:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <osKernelAddThreads+0x64>)
 80005cc:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <osKernelAddThreads+0x6c>)
 80005ce:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[0];
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <osKernelAddThreads+0x64>)
 80005d2:	4a11      	ldr	r2, [pc, #68]	@ (8000618 <osKernelAddThreads+0x64>)
 80005d4:	615a      	str	r2, [r3, #20]

	// initialise stack for thread0
	osKernelStackInit(0);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ff1c 	bl	8000414 <osKernelStackInit>
	// initialise PC
	TCB_STACK[0][STACKSIZE - 2] = (int32_t)(task0);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4a11      	ldr	r2, [pc, #68]	@ (8000624 <osKernelAddThreads+0x70>)
 80005e0:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

	// initialise stack for thread1
	osKernelStackInit(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f7ff ff15 	bl	8000414 <osKernelStackInit>
	// initialise PC
	TCB_STACK[1][STACKSIZE - 2] = (int32_t)(task1);
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000624 <osKernelAddThreads+0x70>)
 80005ee:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78

	// initialise stack for thread2
	osKernelStackInit(2);
 80005f2:	2002      	movs	r0, #2
 80005f4:	f7ff ff0e 	bl	8000414 <osKernelStackInit>
	// initialise PC
	TCB_STACK[2][STACKSIZE - 2] = (int32_t)(task2);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <osKernelAddThreads+0x70>)
 80005fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000600:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

	// start from thread0
	currentPt = &tcbs[0];
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <osKernelAddThreads+0x74>)
 8000606:	4a04      	ldr	r2, [pc, #16]	@ (8000618 <osKernelAddThreads+0x64>)
 8000608:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800060a:	b662      	cpsie	i
}
 800060c:	bf00      	nop

	// Enable gloabl interrupt
	__enable_irq();

	return 1;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000090 	.word	0x20000090
 800061c:	20000098 	.word	0x20000098
 8000620:	200000a0 	.word	0x200000a0
 8000624:	200000ac 	.word	0x200000ac
 8000628:	200000a8 	.word	0x200000a8

0800062c <osKernelInit>:

void osKernelInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQUENCY/1000);
 8000630:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <osKernelInit+0x18>)
 8000632:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000636:	601a      	str	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000008c 	.word	0x2000008c

08000648 <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	// Reset Systick
	SysTick->CTRL = SYSTICK_RST;
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <osKernelLaunch+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]

	// Clear systick current value register
	SysTick->VAL = 0;
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <osKernelLaunch+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]

	// Load quanta
	SysTick->LOAD = (quanta * MILLIS_PRESCALER) - 1;
 800065c:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <osKernelLaunch+0x50>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	4a0b      	ldr	r2, [pc, #44]	@ (8000694 <osKernelLaunch+0x4c>)
 8000668:	3b01      	subs	r3, #1
 800066a:	6053      	str	r3, [r2, #4]

	// Set systick to low priority
	NVIC_SetPriority(SysTick_IRQn, 15);
 800066c:	210f      	movs	r1, #15
 800066e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000672:	f7ff fea5 	bl	80003c0 <__NVIC_SetPriority>

	// Enable systick, select intenal clock
	SysTick->CTRL = CTRL_CLCKSRC | CTRL_ENABLE;
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <osKernelLaunch+0x4c>)
 8000678:	2205      	movs	r2, #5
 800067a:	601a      	str	r2, [r3, #0]

	// Enable systick interrupt
	SysTick->CTRL |= CTRL_TICKINT;
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <osKernelLaunch+0x4c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <osKernelLaunch+0x4c>)
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	6013      	str	r3, [r2, #0]

	// Launch Scheduler
	osSchedulerLaunch();
 8000688:	f000 f81e 	bl	80006c8 <osSchedulerLaunch>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000e010 	.word	0xe000e010
 8000698:	2000008c 	.word	0x2000008c

0800069c <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	// SUSPEND CURRENT THREAD
	// Disable global interrupt (to make this function atomic)
	__asm("CPSID    I");
 800069c:	b672      	cpsid	i

	// Save r4, r5, r6, r7, r8, r9, r10, r11
	__asm("PUSH {R4-R11}");
 800069e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Load address of currentPt into r0
	__asm("LDR R0, =currentPt");
 80006a2:	4808      	ldr	r0, [pc, #32]	@ (80006c4 <SysTick_Handler+0x28>)

	// Load r1 from address equals r0, i.e. r1 =currentPt
	__asm("LDR R1,[R0]");
 80006a4:	6801      	ldr	r1, [r0, #0]

	// Store Cortex-M SP at address equals r1, i.e. Save SP into tcb
	__asm("STR SP,[R1]");
 80006a6:	f8c1 d000 	str.w	sp, [r1]

	// CHOOSE THE NEXT THREAD

	__asm("PUSH		{R0,LR}");
 80006aa:	b501      	push	{r0, lr}
	__asm("BL		osSchedulerRoundRobin");
 80006ac:	f000 f824 	bl	80006f8 <osSchedulerRoundRobin>
	__asm("POP		{R0,LR}");
 80006b0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	// R1 = currentPt i.e New Thread
	__asm("LDR		R1,[R0]");
 80006b4:	6801      	ldr	r1, [r0, #0]

	// sp = currentPt->StackPt
	__asm("LDR		SP,[R1]");
 80006b6:	f8d1 d000 	ldr.w	sp, [r1]

	// Restore r4, r5, r6, r7, r8, r9, r10, r11
	__asm("POP {R4-R11}");
 80006ba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Enable global interrupts
	__asm("CPSIE    I");
 80006be:	b662      	cpsie	i

	// Return from exception and restore r0, r1, r2, r3, r12, lr, pc, psr
	__asm("BX     LR");
 80006c0:	4770      	bx	lr
}
 80006c2:	bf00      	nop
 80006c4:	200000a8 	.word	0x200000a8

080006c8 <osSchedulerLaunch>:

void osSchedulerLaunch(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	// Load address of currentPt in R0
	__asm("LDR R0,=currentPt");
 80006cc:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <osSchedulerLaunch+0x2c>)

	// Load r2 from address equals r0, i.e r2=currentPt
	__asm("LDR R2,[R0]");
 80006ce:	6802      	ldr	r2, [r0, #0]

	// Load Cortex-M SP from address equals R2, i.e. SP = currentPt->stackPt
	__asm("LDR SP,[R2]");
 80006d0:	f8d2 d000 	ldr.w	sp, [r2]

	// Restore r4,r5,r6,r7,r8,r9,10,r11
	__asm("POP {R4-R11}");
 80006d4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Restore r12
	__asm("POP {R12}");
 80006d8:	f85d cb04 	ldr.w	ip, [sp], #4

	// Restore r0,r1,r2,r3
	__asm("POP {R0-R3}");
 80006dc:	bc0f      	pop	{r0, r1, r2, r3}

	// Skip LR
	__asm("ADD  SP,SP,#4");
 80006de:	b001      	add	sp, #4

	// Create a new start location by popping LR
	__asm("POP {LR}");
 80006e0:	f85d eb04 	ldr.w	lr, [sp], #4

	// Skip PSR by adding 4 to SP
	__asm("ADD  SP,SP,#4");
 80006e4:	b001      	add	sp, #4

	// Enable global interrupts
	__asm("CPSIE    I");
 80006e6:	b662      	cpsie	i

	// Return from exception
	__asm("BX    LR");
 80006e8:	4770      	bx	lr
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	200000a8 	.word	0x200000a8

080006f8 <osSchedulerRoundRobin>:
	INTCTRL = PENDSTSET;

}

void osSchedulerRoundRobin(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	if((++period_tick) == PERIOD)
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <osSchedulerRoundRobin+0x30>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	4a09      	ldr	r2, [pc, #36]	@ (8000728 <osSchedulerRoundRobin+0x30>)
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <osSchedulerRoundRobin+0x30>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b64      	cmp	r3, #100	@ 0x64
 800070c:	d104      	bne.n	8000718 <osSchedulerRoundRobin+0x20>
	{
		(*task3)();
 800070e:	f7ff fddb 	bl	80002c8 <task3>

		period_tick = 0;
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <osSchedulerRoundRobin+0x30>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
	}

	currentPt = currentPt->nextPt;
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <osSchedulerRoundRobin+0x34>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	4a03      	ldr	r2, [pc, #12]	@ (800072c <osSchedulerRoundRobin+0x34>)
 8000720:	6013      	str	r3, [r2, #0]
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000088 	.word	0x20000088
 800072c:	200000a8 	.word	0x200000a8

08000730 <tim2_1hz_interrupt_init>:

void tim2_1hz_interrupt_init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	// Enable clock access to tim2
	RCC->APB1ENR  |= TIM2EN;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <tim2_1hz_interrupt_init+0x50>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	4a11      	ldr	r2, [pc, #68]	@ (8000780 <tim2_1hz_interrupt_init+0x50>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6413      	str	r3, [r2, #64]	@ 0x40

	// Set timer prescaler
	TIM2->PSC = 1600 -1; // 16 000 000 / 1600 = 10 000
 8000740:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000744:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

	// Set auto-reload value
	TIM2->ARR = 10000 - 1; // 10 000 / 10 000 = 1
 800074a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800074e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Clear counter
	TIM2->CNT = 0;
 8000754:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable timer
	TIM2->CR1 = CR1_CEN;
 800075c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000760:	2201      	movs	r2, #1
 8000762:	601a      	str	r2, [r3, #0]

	// Enable time interrupt
	TIM2->DIER |= DIER_UIE;
 8000764:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	60d3      	str	r3, [r2, #12]

	// Enable timer interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8000774:	201c      	movs	r0, #28
 8000776:	f7ff fe05 	bl	8000384 <__NVIC_EnableIRQ>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800

08000784 <osSemaphoreInit>:

void osSemaphoreInit(int32_t *semaphore, int32_t value)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	*semaphore = value;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <osSemaphoreSet>:

void osSemaphoreSet(int32_t *semaphore)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
	__disable_irq();
	*semaphore += 1;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007b6:	b662      	cpsie	i
}
 80007b8:	bf00      	nop
	__enable_irq();
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <osSemaphoreWait>:

void osSemaphoreWait(int32_t *semaphore)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80007ce:	b672      	cpsid	i
}
 80007d0:	bf00      	nop
	__disable_irq();
	while(*semaphore <= 0)
 80007d2:	e003      	b.n	80007dc <osSemaphoreWait+0x16>
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80007d8:	b662      	cpsie	i
}
 80007da:	bf00      	nop
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	ddf7      	ble.n	80007d4 <osSemaphoreWait+0xe>
	{
		__disable_irq();
		__enable_irq();
	}
	*semaphore -=1;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007ee:	b662      	cpsie	i
}
 80007f0:	bf00      	nop
	__enable_irq();
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e00a      	b.n	8000826 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000810:	f3af 8000 	nop.w
 8000814:	4601      	mov	r1, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	60ba      	str	r2, [r7, #8]
 800081c:	b2ca      	uxtb	r2, r1
 800081e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697a      	ldr	r2, [r7, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbf0      	blt.n	8000810 <_read+0x12>
  }

  return len;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	e009      	b.n	800085e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	60ba      	str	r2, [r7, #8]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f000 f876 	bl	8000944 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	429a      	cmp	r2, r3
 8000864:	dbf1      	blt.n	800084a <_write+0x12>
  }
  return len;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <_close>:

int _close(int file)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000898:	605a      	str	r2, [r3, #4]
  return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <_isatty>:

int _isatty(int file)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008b0:	2301      	movs	r3, #1
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008be:	b480      	push	{r7}
 80008c0:	b085      	sub	sp, #20
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	60f8      	str	r0, [r7, #12]
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e0:	4a14      	ldr	r2, [pc, #80]	@ (8000934 <_sbrk+0x5c>)
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <_sbrk+0x60>)
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ec:	4b13      	ldr	r3, [pc, #76]	@ (800093c <_sbrk+0x64>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d102      	bne.n	80008fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <_sbrk+0x64>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <_sbrk+0x68>)
 80008f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d207      	bcs.n	8000918 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000908:	f000 fa42 	bl	8000d90 <__errno>
 800090c:	4603      	mov	r3, r0
 800090e:	220c      	movs	r2, #12
 8000910:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000916:	e009      	b.n	800092c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <_sbrk+0x64>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091e:	4b07      	ldr	r3, [pc, #28]	@ (800093c <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	4a05      	ldr	r2, [pc, #20]	@ (800093c <_sbrk+0x64>)
 8000928:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20020000 	.word	0x20020000
 8000938:	00000400 	.word	0x00000400
 800093c:	2000136c 	.word	0x2000136c
 8000940:	200014c0 	.word	0x200014c0

08000944 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periphclock, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periphclock, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 f84f 	bl	80009f0 <uart_write>
	return ch;
 8000952:	687b      	ldr	r3, [r7, #4]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <uart_tx_init>:

void uart_tx_init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	/* Enable Clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 8000960:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <uart_tx_init+0x84>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000964:	4a1e      	ldr	r2, [pc, #120]	@ (80009e0 <uart_tx_init+0x84>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set PA2 mode to alternate function mode - reference manual, search 'moder' set pin to alternate function pin*/
	GPIOA->MODER &=~(1U<<4);
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <uart_tx_init+0x88>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a1c      	ldr	r2, [pc, #112]	@ (80009e4 <uart_tx_init+0x88>)
 8000972:	f023 0310 	bic.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000978:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <uart_tx_init+0x88>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a19      	ldr	r2, [pc, #100]	@ (80009e4 <uart_tx_init+0x88>)
 800097e:	f043 0320 	orr.w	r3, r3, #32
 8000982:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7 (UART2_TX) - reference manual pg161, Pin2 is AFRL2 bits 8,9,10,11, want to set it to AF7:0111*/
	GPIOA->AFR[0] |= (1U<<8); // there are no AFRL in .h files it is an array and accessing AFRL is done by AFR[0]
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <uart_tx_init+0x88>)
 8000986:	6a1b      	ldr	r3, [r3, #32]
 8000988:	4a16      	ldr	r2, [pc, #88]	@ (80009e4 <uart_tx_init+0x88>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800098e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <uart_tx_init+0x88>)
 8000992:	6a1b      	ldr	r3, [r3, #32]
 8000994:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <uart_tx_init+0x88>)
 8000996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800099a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <uart_tx_init+0x88>)
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	4a10      	ldr	r2, [pc, #64]	@ (80009e4 <uart_tx_init+0x88>)
 80009a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <uart_tx_init+0x88>)
 80009aa:	6a1b      	ldr	r3, [r3, #32]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <uart_tx_init+0x88>)
 80009ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80009b2:	6213      	str	r3, [r2, #32]

	/* Enable clock access to UART - Datasheet - pg15 shows USART2 is connect via APB1 bus.
	 * Go to RM, find apb1enr. on the page118 it shows that if we set bit17 to 1 we will enable USART2 clock access */
	RCC->APB1ENR |= UART2EN;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <uart_tx_init+0x84>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	4a09      	ldr	r2, [pc, #36]	@ (80009e0 <uart_tx_init+0x84>)
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009be:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Configure baudrate */
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 80009c0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80009c4:	4808      	ldr	r0, [pc, #32]	@ (80009e8 <uart_tx_init+0x8c>)
 80009c6:	f000 f82b 	bl	8000a20 <uart_set_baudrate>

	/* Configure transfer direction - RM - search USART_CR1 - bit 3 if set to 1 it will enable transfer */
	USART2->CR1 = CR1_TE; // no logical OR used here as we want to set every other bit to 0 besides bit 3
 80009ca:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <uart_tx_init+0x90>)
 80009cc:	2208      	movs	r2, #8
 80009ce:	60da      	str	r2, [r3, #12]

	/* Enable UART module same page as above search - bit 13 if set to 1 will enable to USART module*/
	USART2->CR1 |= CR1_UE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <uart_tx_init+0x90>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <uart_tx_init+0x90>)
 80009d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	00f42400 	.word	0x00f42400
 80009ec:	40004400 	.word	0x40004400

080009f0 <uart_write>:

static void uart_write(int ch)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	/* Make sure the transmit data register is empty - RM - USART_SR (status register) - Bit7 is what we are interested in for this one */
	while (!(USART2->SR & SR_TXE)){}
 80009f8:	bf00      	nop
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <uart_write+0x2c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <uart_write+0xa>

	/* Write to transmit data register */
	USART2->DR = (ch & 0XFF);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <uart_write+0x2c>)
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	6053      	str	r3, [r2, #4]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400

08000a20 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periphclock, uint32_t baudrate)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periphclock, baudrate);
 8000a2a:	6839      	ldr	r1, [r7, #0]
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f80b 	bl	8000a48 <compute_uart_bd>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <uart_set_baudrate+0x24>)
 8000a38:	609a      	str	r2, [r3, #8]

}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40004400 	.word	0x40004400

08000a48 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periphclock, uint32_t baudrate)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	return ((periphclock + (baudrate/2U))/baudrate);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	085a      	lsrs	r2, r3, #1
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	441a      	add	r2, r3
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a60:	b29b      	uxth	r3, r3
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	@ (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a9e:	f000 f97d 	bl	8000d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa2:	f7ff fc1f 	bl	80002e4 <main>

08000aa6 <LoopForever>:

LoopForever:
  b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ab4:	080019dc 	.word	0x080019dc
  ldr r2, =_sbss
 8000ab8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000abc:	200014bc 	.word	0x200014bc

08000ac0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <std>:
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	b510      	push	{r4, lr}
 8000ac8:	4604      	mov	r4, r0
 8000aca:	e9c0 3300 	strd	r3, r3, [r0]
 8000ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ad2:	6083      	str	r3, [r0, #8]
 8000ad4:	8181      	strh	r1, [r0, #12]
 8000ad6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ad8:	81c2      	strh	r2, [r0, #14]
 8000ada:	6183      	str	r3, [r0, #24]
 8000adc:	4619      	mov	r1, r3
 8000ade:	2208      	movs	r2, #8
 8000ae0:	305c      	adds	r0, #92	@ 0x5c
 8000ae2:	f000 f906 	bl	8000cf2 <memset>
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <std+0x58>)
 8000ae8:	6263      	str	r3, [r4, #36]	@ 0x24
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <std+0x5c>)
 8000aec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <std+0x60>)
 8000af0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <std+0x64>)
 8000af4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000af6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <std+0x68>)
 8000af8:	6224      	str	r4, [r4, #32]
 8000afa:	429c      	cmp	r4, r3
 8000afc:	d006      	beq.n	8000b0c <std+0x48>
 8000afe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000b02:	4294      	cmp	r4, r2
 8000b04:	d002      	beq.n	8000b0c <std+0x48>
 8000b06:	33d0      	adds	r3, #208	@ 0xd0
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	d105      	bne.n	8000b18 <std+0x54>
 8000b0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b14:	f000 b966 	b.w	8000de4 <__retarget_lock_init_recursive>
 8000b18:	bd10      	pop	{r4, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08000c6d 	.word	0x08000c6d
 8000b20:	08000c8f 	.word	0x08000c8f
 8000b24:	08000cc7 	.word	0x08000cc7
 8000b28:	08000ceb 	.word	0x08000ceb
 8000b2c:	20001370 	.word	0x20001370

08000b30 <stdio_exit_handler>:
 8000b30:	4a02      	ldr	r2, [pc, #8]	@ (8000b3c <stdio_exit_handler+0xc>)
 8000b32:	4903      	ldr	r1, [pc, #12]	@ (8000b40 <stdio_exit_handler+0x10>)
 8000b34:	4803      	ldr	r0, [pc, #12]	@ (8000b44 <stdio_exit_handler+0x14>)
 8000b36:	f000 b869 	b.w	8000c0c <_fwalk_sglue>
 8000b3a:	bf00      	nop
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	08001681 	.word	0x08001681
 8000b44:	20000010 	.word	0x20000010

08000b48 <cleanup_stdio>:
 8000b48:	6841      	ldr	r1, [r0, #4]
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <cleanup_stdio+0x34>)
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	b510      	push	{r4, lr}
 8000b50:	4604      	mov	r4, r0
 8000b52:	d001      	beq.n	8000b58 <cleanup_stdio+0x10>
 8000b54:	f000 fd94 	bl	8001680 <_fflush_r>
 8000b58:	68a1      	ldr	r1, [r4, #8]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <cleanup_stdio+0x38>)
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	d002      	beq.n	8000b66 <cleanup_stdio+0x1e>
 8000b60:	4620      	mov	r0, r4
 8000b62:	f000 fd8d 	bl	8001680 <_fflush_r>
 8000b66:	68e1      	ldr	r1, [r4, #12]
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <cleanup_stdio+0x3c>)
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d004      	beq.n	8000b78 <cleanup_stdio+0x30>
 8000b6e:	4620      	mov	r0, r4
 8000b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b74:	f000 bd84 	b.w	8001680 <_fflush_r>
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20001370 	.word	0x20001370
 8000b80:	200013d8 	.word	0x200013d8
 8000b84:	20001440 	.word	0x20001440

08000b88 <global_stdio_init.part.0>:
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <global_stdio_init.part.0+0x30>)
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	@ (8000bbc <global_stdio_init.part.0+0x34>)
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc0 <global_stdio_init.part.0+0x38>)
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	4620      	mov	r0, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	2104      	movs	r1, #4
 8000b98:	f7ff ff94 	bl	8000ac4 <std>
 8000b9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2109      	movs	r1, #9
 8000ba4:	f7ff ff8e 	bl	8000ac4 <std>
 8000ba8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000bac:	2202      	movs	r2, #2
 8000bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bb2:	2112      	movs	r1, #18
 8000bb4:	f7ff bf86 	b.w	8000ac4 <std>
 8000bb8:	200014a8 	.word	0x200014a8
 8000bbc:	20001370 	.word	0x20001370
 8000bc0:	08000b31 	.word	0x08000b31

08000bc4 <__sfp_lock_acquire>:
 8000bc4:	4801      	ldr	r0, [pc, #4]	@ (8000bcc <__sfp_lock_acquire+0x8>)
 8000bc6:	f000 b90e 	b.w	8000de6 <__retarget_lock_acquire_recursive>
 8000bca:	bf00      	nop
 8000bcc:	200014b1 	.word	0x200014b1

08000bd0 <__sfp_lock_release>:
 8000bd0:	4801      	ldr	r0, [pc, #4]	@ (8000bd8 <__sfp_lock_release+0x8>)
 8000bd2:	f000 b909 	b.w	8000de8 <__retarget_lock_release_recursive>
 8000bd6:	bf00      	nop
 8000bd8:	200014b1 	.word	0x200014b1

08000bdc <__sinit>:
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fff0 	bl	8000bc4 <__sfp_lock_acquire>
 8000be4:	6a23      	ldr	r3, [r4, #32]
 8000be6:	b11b      	cbz	r3, 8000bf0 <__sinit+0x14>
 8000be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bec:	f7ff bff0 	b.w	8000bd0 <__sfp_lock_release>
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <__sinit+0x28>)
 8000bf2:	6223      	str	r3, [r4, #32]
 8000bf4:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <__sinit+0x2c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f5      	bne.n	8000be8 <__sinit+0xc>
 8000bfc:	f7ff ffc4 	bl	8000b88 <global_stdio_init.part.0>
 8000c00:	e7f2      	b.n	8000be8 <__sinit+0xc>
 8000c02:	bf00      	nop
 8000c04:	08000b49 	.word	0x08000b49
 8000c08:	200014a8 	.word	0x200014a8

08000c0c <_fwalk_sglue>:
 8000c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c10:	4607      	mov	r7, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	4614      	mov	r4, r2
 8000c16:	2600      	movs	r6, #0
 8000c18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8000c20:	d505      	bpl.n	8000c2e <_fwalk_sglue+0x22>
 8000c22:	6824      	ldr	r4, [r4, #0]
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d1f7      	bne.n	8000c18 <_fwalk_sglue+0xc>
 8000c28:	4630      	mov	r0, r6
 8000c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c2e:	89ab      	ldrh	r3, [r5, #12]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d907      	bls.n	8000c44 <_fwalk_sglue+0x38>
 8000c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	d003      	beq.n	8000c44 <_fwalk_sglue+0x38>
 8000c3c:	4629      	mov	r1, r5
 8000c3e:	4638      	mov	r0, r7
 8000c40:	47c0      	blx	r8
 8000c42:	4306      	orrs	r6, r0
 8000c44:	3568      	adds	r5, #104	@ 0x68
 8000c46:	e7e9      	b.n	8000c1c <_fwalk_sglue+0x10>

08000c48 <iprintf>:
 8000c48:	b40f      	push	{r0, r1, r2, r3}
 8000c4a:	b507      	push	{r0, r1, r2, lr}
 8000c4c:	4906      	ldr	r1, [pc, #24]	@ (8000c68 <iprintf+0x20>)
 8000c4e:	ab04      	add	r3, sp, #16
 8000c50:	6808      	ldr	r0, [r1, #0]
 8000c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c56:	6881      	ldr	r1, [r0, #8]
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	f000 f9e9 	bl	8001030 <_vfiprintf_r>
 8000c5e:	b003      	add	sp, #12
 8000c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr
 8000c68:	2000000c 	.word	0x2000000c

08000c6c <__sread>:
 8000c6c:	b510      	push	{r4, lr}
 8000c6e:	460c      	mov	r4, r1
 8000c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c74:	f000 f868 	bl	8000d48 <_read_r>
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	bfab      	itete	ge
 8000c7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8000c80:	181b      	addge	r3, r3, r0
 8000c82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000c86:	bfac      	ite	ge
 8000c88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000c8a:	81a3      	strhlt	r3, [r4, #12]
 8000c8c:	bd10      	pop	{r4, pc}

08000c8e <__swrite>:
 8000c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c92:	461f      	mov	r7, r3
 8000c94:	898b      	ldrh	r3, [r1, #12]
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	4605      	mov	r5, r0
 8000c9a:	460c      	mov	r4, r1
 8000c9c:	4616      	mov	r6, r2
 8000c9e:	d505      	bpl.n	8000cac <__swrite+0x1e>
 8000ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f000 f83c 	bl	8000d24 <_lseek_r>
 8000cac:	89a3      	ldrh	r3, [r4, #12]
 8000cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cb6:	81a3      	strh	r3, [r4, #12]
 8000cb8:	4632      	mov	r2, r6
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000cc2:	f000 b853 	b.w	8000d6c <_write_r>

08000cc6 <__sseek>:
 8000cc6:	b510      	push	{r4, lr}
 8000cc8:	460c      	mov	r4, r1
 8000cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cce:	f000 f829 	bl	8000d24 <_lseek_r>
 8000cd2:	1c43      	adds	r3, r0, #1
 8000cd4:	89a3      	ldrh	r3, [r4, #12]
 8000cd6:	bf15      	itete	ne
 8000cd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000cda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000cde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000ce2:	81a3      	strheq	r3, [r4, #12]
 8000ce4:	bf18      	it	ne
 8000ce6:	81a3      	strhne	r3, [r4, #12]
 8000ce8:	bd10      	pop	{r4, pc}

08000cea <__sclose>:
 8000cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cee:	f000 b809 	b.w	8000d04 <_close_r>

08000cf2 <memset>:
 8000cf2:	4402      	add	r2, r0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d100      	bne.n	8000cfc <memset+0xa>
 8000cfa:	4770      	bx	lr
 8000cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8000d00:	e7f9      	b.n	8000cf6 <memset+0x4>
	...

08000d04 <_close_r>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4d06      	ldr	r5, [pc, #24]	@ (8000d20 <_close_r+0x1c>)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	602b      	str	r3, [r5, #0]
 8000d10:	f7ff fdae 	bl	8000870 <_close>
 8000d14:	1c43      	adds	r3, r0, #1
 8000d16:	d102      	bne.n	8000d1e <_close_r+0x1a>
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	b103      	cbz	r3, 8000d1e <_close_r+0x1a>
 8000d1c:	6023      	str	r3, [r4, #0]
 8000d1e:	bd38      	pop	{r3, r4, r5, pc}
 8000d20:	200014ac 	.word	0x200014ac

08000d24 <_lseek_r>:
 8000d24:	b538      	push	{r3, r4, r5, lr}
 8000d26:	4d07      	ldr	r5, [pc, #28]	@ (8000d44 <_lseek_r+0x20>)
 8000d28:	4604      	mov	r4, r0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	2200      	movs	r2, #0
 8000d30:	602a      	str	r2, [r5, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	f7ff fdc3 	bl	80008be <_lseek>
 8000d38:	1c43      	adds	r3, r0, #1
 8000d3a:	d102      	bne.n	8000d42 <_lseek_r+0x1e>
 8000d3c:	682b      	ldr	r3, [r5, #0]
 8000d3e:	b103      	cbz	r3, 8000d42 <_lseek_r+0x1e>
 8000d40:	6023      	str	r3, [r4, #0]
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
 8000d44:	200014ac 	.word	0x200014ac

08000d48 <_read_r>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	4d07      	ldr	r5, [pc, #28]	@ (8000d68 <_read_r+0x20>)
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	4611      	mov	r1, r2
 8000d52:	2200      	movs	r2, #0
 8000d54:	602a      	str	r2, [r5, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	f7ff fd51 	bl	80007fe <_read>
 8000d5c:	1c43      	adds	r3, r0, #1
 8000d5e:	d102      	bne.n	8000d66 <_read_r+0x1e>
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	b103      	cbz	r3, 8000d66 <_read_r+0x1e>
 8000d64:	6023      	str	r3, [r4, #0]
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
 8000d68:	200014ac 	.word	0x200014ac

08000d6c <_write_r>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	4d07      	ldr	r5, [pc, #28]	@ (8000d8c <_write_r+0x20>)
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	602a      	str	r2, [r5, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f7ff fd5c 	bl	8000838 <_write>
 8000d80:	1c43      	adds	r3, r0, #1
 8000d82:	d102      	bne.n	8000d8a <_write_r+0x1e>
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	b103      	cbz	r3, 8000d8a <_write_r+0x1e>
 8000d88:	6023      	str	r3, [r4, #0]
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	200014ac 	.word	0x200014ac

08000d90 <__errno>:
 8000d90:	4b01      	ldr	r3, [pc, #4]	@ (8000d98 <__errno+0x8>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000000c 	.word	0x2000000c

08000d9c <__libc_init_array>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000dd4 <__libc_init_array+0x38>)
 8000da0:	4c0d      	ldr	r4, [pc, #52]	@ (8000dd8 <__libc_init_array+0x3c>)
 8000da2:	1b64      	subs	r4, r4, r5
 8000da4:	10a4      	asrs	r4, r4, #2
 8000da6:	2600      	movs	r6, #0
 8000da8:	42a6      	cmp	r6, r4
 8000daa:	d109      	bne.n	8000dc0 <__libc_init_array+0x24>
 8000dac:	4d0b      	ldr	r5, [pc, #44]	@ (8000ddc <__libc_init_array+0x40>)
 8000dae:	4c0c      	ldr	r4, [pc, #48]	@ (8000de0 <__libc_init_array+0x44>)
 8000db0:	f000 fdb6 	bl	8001920 <_init>
 8000db4:	1b64      	subs	r4, r4, r5
 8000db6:	10a4      	asrs	r4, r4, #2
 8000db8:	2600      	movs	r6, #0
 8000dba:	42a6      	cmp	r6, r4
 8000dbc:	d105      	bne.n	8000dca <__libc_init_array+0x2e>
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc4:	4798      	blx	r3
 8000dc6:	3601      	adds	r6, #1
 8000dc8:	e7ee      	b.n	8000da8 <__libc_init_array+0xc>
 8000dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dce:	4798      	blx	r3
 8000dd0:	3601      	adds	r6, #1
 8000dd2:	e7f2      	b.n	8000dba <__libc_init_array+0x1e>
 8000dd4:	080019d4 	.word	0x080019d4
 8000dd8:	080019d4 	.word	0x080019d4
 8000ddc:	080019d4 	.word	0x080019d4
 8000de0:	080019d8 	.word	0x080019d8

08000de4 <__retarget_lock_init_recursive>:
 8000de4:	4770      	bx	lr

08000de6 <__retarget_lock_acquire_recursive>:
 8000de6:	4770      	bx	lr

08000de8 <__retarget_lock_release_recursive>:
 8000de8:	4770      	bx	lr
	...

08000dec <_free_r>:
 8000dec:	b538      	push	{r3, r4, r5, lr}
 8000dee:	4605      	mov	r5, r0
 8000df0:	2900      	cmp	r1, #0
 8000df2:	d041      	beq.n	8000e78 <_free_r+0x8c>
 8000df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000df8:	1f0c      	subs	r4, r1, #4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	bfb8      	it	lt
 8000dfe:	18e4      	addlt	r4, r4, r3
 8000e00:	f000 f8e0 	bl	8000fc4 <__malloc_lock>
 8000e04:	4a1d      	ldr	r2, [pc, #116]	@ (8000e7c <_free_r+0x90>)
 8000e06:	6813      	ldr	r3, [r2, #0]
 8000e08:	b933      	cbnz	r3, 8000e18 <_free_r+0x2c>
 8000e0a:	6063      	str	r3, [r4, #4]
 8000e0c:	6014      	str	r4, [r2, #0]
 8000e0e:	4628      	mov	r0, r5
 8000e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e14:	f000 b8dc 	b.w	8000fd0 <__malloc_unlock>
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	d908      	bls.n	8000e2e <_free_r+0x42>
 8000e1c:	6820      	ldr	r0, [r4, #0]
 8000e1e:	1821      	adds	r1, r4, r0
 8000e20:	428b      	cmp	r3, r1
 8000e22:	bf01      	itttt	eq
 8000e24:	6819      	ldreq	r1, [r3, #0]
 8000e26:	685b      	ldreq	r3, [r3, #4]
 8000e28:	1809      	addeq	r1, r1, r0
 8000e2a:	6021      	streq	r1, [r4, #0]
 8000e2c:	e7ed      	b.n	8000e0a <_free_r+0x1e>
 8000e2e:	461a      	mov	r2, r3
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	b10b      	cbz	r3, 8000e38 <_free_r+0x4c>
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d9fa      	bls.n	8000e2e <_free_r+0x42>
 8000e38:	6811      	ldr	r1, [r2, #0]
 8000e3a:	1850      	adds	r0, r2, r1
 8000e3c:	42a0      	cmp	r0, r4
 8000e3e:	d10b      	bne.n	8000e58 <_free_r+0x6c>
 8000e40:	6820      	ldr	r0, [r4, #0]
 8000e42:	4401      	add	r1, r0
 8000e44:	1850      	adds	r0, r2, r1
 8000e46:	4283      	cmp	r3, r0
 8000e48:	6011      	str	r1, [r2, #0]
 8000e4a:	d1e0      	bne.n	8000e0e <_free_r+0x22>
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	6053      	str	r3, [r2, #4]
 8000e52:	4408      	add	r0, r1
 8000e54:	6010      	str	r0, [r2, #0]
 8000e56:	e7da      	b.n	8000e0e <_free_r+0x22>
 8000e58:	d902      	bls.n	8000e60 <_free_r+0x74>
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	602b      	str	r3, [r5, #0]
 8000e5e:	e7d6      	b.n	8000e0e <_free_r+0x22>
 8000e60:	6820      	ldr	r0, [r4, #0]
 8000e62:	1821      	adds	r1, r4, r0
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf04      	itt	eq
 8000e68:	6819      	ldreq	r1, [r3, #0]
 8000e6a:	685b      	ldreq	r3, [r3, #4]
 8000e6c:	6063      	str	r3, [r4, #4]
 8000e6e:	bf04      	itt	eq
 8000e70:	1809      	addeq	r1, r1, r0
 8000e72:	6021      	streq	r1, [r4, #0]
 8000e74:	6054      	str	r4, [r2, #4]
 8000e76:	e7ca      	b.n	8000e0e <_free_r+0x22>
 8000e78:	bd38      	pop	{r3, r4, r5, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200014b8 	.word	0x200014b8

08000e80 <sbrk_aligned>:
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	4e0f      	ldr	r6, [pc, #60]	@ (8000ec0 <sbrk_aligned+0x40>)
 8000e84:	460c      	mov	r4, r1
 8000e86:	6831      	ldr	r1, [r6, #0]
 8000e88:	4605      	mov	r5, r0
 8000e8a:	b911      	cbnz	r1, 8000e92 <sbrk_aligned+0x12>
 8000e8c:	f000 fcb4 	bl	80017f8 <_sbrk_r>
 8000e90:	6030      	str	r0, [r6, #0]
 8000e92:	4621      	mov	r1, r4
 8000e94:	4628      	mov	r0, r5
 8000e96:	f000 fcaf 	bl	80017f8 <_sbrk_r>
 8000e9a:	1c43      	adds	r3, r0, #1
 8000e9c:	d103      	bne.n	8000ea6 <sbrk_aligned+0x26>
 8000e9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
 8000ea6:	1cc4      	adds	r4, r0, #3
 8000ea8:	f024 0403 	bic.w	r4, r4, #3
 8000eac:	42a0      	cmp	r0, r4
 8000eae:	d0f8      	beq.n	8000ea2 <sbrk_aligned+0x22>
 8000eb0:	1a21      	subs	r1, r4, r0
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	f000 fca0 	bl	80017f8 <_sbrk_r>
 8000eb8:	3001      	adds	r0, #1
 8000eba:	d1f2      	bne.n	8000ea2 <sbrk_aligned+0x22>
 8000ebc:	e7ef      	b.n	8000e9e <sbrk_aligned+0x1e>
 8000ebe:	bf00      	nop
 8000ec0:	200014b4 	.word	0x200014b4

08000ec4 <_malloc_r>:
 8000ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ec8:	1ccd      	adds	r5, r1, #3
 8000eca:	f025 0503 	bic.w	r5, r5, #3
 8000ece:	3508      	adds	r5, #8
 8000ed0:	2d0c      	cmp	r5, #12
 8000ed2:	bf38      	it	cc
 8000ed4:	250c      	movcc	r5, #12
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	4606      	mov	r6, r0
 8000eda:	db01      	blt.n	8000ee0 <_malloc_r+0x1c>
 8000edc:	42a9      	cmp	r1, r5
 8000ede:	d904      	bls.n	8000eea <_malloc_r+0x26>
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	6033      	str	r3, [r6, #0]
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000eea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000fc0 <_malloc_r+0xfc>
 8000eee:	f000 f869 	bl	8000fc4 <__malloc_lock>
 8000ef2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ef6:	461c      	mov	r4, r3
 8000ef8:	bb44      	cbnz	r4, 8000f4c <_malloc_r+0x88>
 8000efa:	4629      	mov	r1, r5
 8000efc:	4630      	mov	r0, r6
 8000efe:	f7ff ffbf 	bl	8000e80 <sbrk_aligned>
 8000f02:	1c43      	adds	r3, r0, #1
 8000f04:	4604      	mov	r4, r0
 8000f06:	d158      	bne.n	8000fba <_malloc_r+0xf6>
 8000f08:	f8d8 4000 	ldr.w	r4, [r8]
 8000f0c:	4627      	mov	r7, r4
 8000f0e:	2f00      	cmp	r7, #0
 8000f10:	d143      	bne.n	8000f9a <_malloc_r+0xd6>
 8000f12:	2c00      	cmp	r4, #0
 8000f14:	d04b      	beq.n	8000fae <_malloc_r+0xea>
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	4639      	mov	r1, r7
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	eb04 0903 	add.w	r9, r4, r3
 8000f20:	f000 fc6a 	bl	80017f8 <_sbrk_r>
 8000f24:	4581      	cmp	r9, r0
 8000f26:	d142      	bne.n	8000fae <_malloc_r+0xea>
 8000f28:	6821      	ldr	r1, [r4, #0]
 8000f2a:	1a6d      	subs	r5, r5, r1
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	4630      	mov	r0, r6
 8000f30:	f7ff ffa6 	bl	8000e80 <sbrk_aligned>
 8000f34:	3001      	adds	r0, #1
 8000f36:	d03a      	beq.n	8000fae <_malloc_r+0xea>
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	442b      	add	r3, r5
 8000f3c:	6023      	str	r3, [r4, #0]
 8000f3e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	bb62      	cbnz	r2, 8000fa0 <_malloc_r+0xdc>
 8000f46:	f8c8 7000 	str.w	r7, [r8]
 8000f4a:	e00f      	b.n	8000f6c <_malloc_r+0xa8>
 8000f4c:	6822      	ldr	r2, [r4, #0]
 8000f4e:	1b52      	subs	r2, r2, r5
 8000f50:	d420      	bmi.n	8000f94 <_malloc_r+0xd0>
 8000f52:	2a0b      	cmp	r2, #11
 8000f54:	d917      	bls.n	8000f86 <_malloc_r+0xc2>
 8000f56:	1961      	adds	r1, r4, r5
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	6025      	str	r5, [r4, #0]
 8000f5c:	bf18      	it	ne
 8000f5e:	6059      	strne	r1, [r3, #4]
 8000f60:	6863      	ldr	r3, [r4, #4]
 8000f62:	bf08      	it	eq
 8000f64:	f8c8 1000 	streq.w	r1, [r8]
 8000f68:	5162      	str	r2, [r4, r5]
 8000f6a:	604b      	str	r3, [r1, #4]
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	f000 f82f 	bl	8000fd0 <__malloc_unlock>
 8000f72:	f104 000b 	add.w	r0, r4, #11
 8000f76:	1d23      	adds	r3, r4, #4
 8000f78:	f020 0007 	bic.w	r0, r0, #7
 8000f7c:	1ac2      	subs	r2, r0, r3
 8000f7e:	bf1c      	itt	ne
 8000f80:	1a1b      	subne	r3, r3, r0
 8000f82:	50a3      	strne	r3, [r4, r2]
 8000f84:	e7af      	b.n	8000ee6 <_malloc_r+0x22>
 8000f86:	6862      	ldr	r2, [r4, #4]
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	bf0c      	ite	eq
 8000f8c:	f8c8 2000 	streq.w	r2, [r8]
 8000f90:	605a      	strne	r2, [r3, #4]
 8000f92:	e7eb      	b.n	8000f6c <_malloc_r+0xa8>
 8000f94:	4623      	mov	r3, r4
 8000f96:	6864      	ldr	r4, [r4, #4]
 8000f98:	e7ae      	b.n	8000ef8 <_malloc_r+0x34>
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	687f      	ldr	r7, [r7, #4]
 8000f9e:	e7b6      	b.n	8000f0e <_malloc_r+0x4a>
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d1fb      	bne.n	8000fa0 <_malloc_r+0xdc>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6053      	str	r3, [r2, #4]
 8000fac:	e7de      	b.n	8000f6c <_malloc_r+0xa8>
 8000fae:	230c      	movs	r3, #12
 8000fb0:	6033      	str	r3, [r6, #0]
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f000 f80c 	bl	8000fd0 <__malloc_unlock>
 8000fb8:	e794      	b.n	8000ee4 <_malloc_r+0x20>
 8000fba:	6005      	str	r5, [r0, #0]
 8000fbc:	e7d6      	b.n	8000f6c <_malloc_r+0xa8>
 8000fbe:	bf00      	nop
 8000fc0:	200014b8 	.word	0x200014b8

08000fc4 <__malloc_lock>:
 8000fc4:	4801      	ldr	r0, [pc, #4]	@ (8000fcc <__malloc_lock+0x8>)
 8000fc6:	f7ff bf0e 	b.w	8000de6 <__retarget_lock_acquire_recursive>
 8000fca:	bf00      	nop
 8000fcc:	200014b0 	.word	0x200014b0

08000fd0 <__malloc_unlock>:
 8000fd0:	4801      	ldr	r0, [pc, #4]	@ (8000fd8 <__malloc_unlock+0x8>)
 8000fd2:	f7ff bf09 	b.w	8000de8 <__retarget_lock_release_recursive>
 8000fd6:	bf00      	nop
 8000fd8:	200014b0 	.word	0x200014b0

08000fdc <__sfputc_r>:
 8000fdc:	6893      	ldr	r3, [r2, #8]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	b410      	push	{r4}
 8000fe4:	6093      	str	r3, [r2, #8]
 8000fe6:	da08      	bge.n	8000ffa <__sfputc_r+0x1e>
 8000fe8:	6994      	ldr	r4, [r2, #24]
 8000fea:	42a3      	cmp	r3, r4
 8000fec:	db01      	blt.n	8000ff2 <__sfputc_r+0x16>
 8000fee:	290a      	cmp	r1, #10
 8000ff0:	d103      	bne.n	8000ffa <__sfputc_r+0x1e>
 8000ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ff6:	f000 bb6b 	b.w	80016d0 <__swbuf_r>
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	1c58      	adds	r0, r3, #1
 8000ffe:	6010      	str	r0, [r2, #0]
 8001000:	7019      	strb	r1, [r3, #0]
 8001002:	4608      	mov	r0, r1
 8001004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001008:	4770      	bx	lr

0800100a <__sfputs_r>:
 800100a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100c:	4606      	mov	r6, r0
 800100e:	460f      	mov	r7, r1
 8001010:	4614      	mov	r4, r2
 8001012:	18d5      	adds	r5, r2, r3
 8001014:	42ac      	cmp	r4, r5
 8001016:	d101      	bne.n	800101c <__sfputs_r+0x12>
 8001018:	2000      	movs	r0, #0
 800101a:	e007      	b.n	800102c <__sfputs_r+0x22>
 800101c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001020:	463a      	mov	r2, r7
 8001022:	4630      	mov	r0, r6
 8001024:	f7ff ffda 	bl	8000fdc <__sfputc_r>
 8001028:	1c43      	adds	r3, r0, #1
 800102a:	d1f3      	bne.n	8001014 <__sfputs_r+0xa>
 800102c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001030 <_vfiprintf_r>:
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001034:	460d      	mov	r5, r1
 8001036:	b09d      	sub	sp, #116	@ 0x74
 8001038:	4614      	mov	r4, r2
 800103a:	4698      	mov	r8, r3
 800103c:	4606      	mov	r6, r0
 800103e:	b118      	cbz	r0, 8001048 <_vfiprintf_r+0x18>
 8001040:	6a03      	ldr	r3, [r0, #32]
 8001042:	b90b      	cbnz	r3, 8001048 <_vfiprintf_r+0x18>
 8001044:	f7ff fdca 	bl	8000bdc <__sinit>
 8001048:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800104a:	07d9      	lsls	r1, r3, #31
 800104c:	d405      	bmi.n	800105a <_vfiprintf_r+0x2a>
 800104e:	89ab      	ldrh	r3, [r5, #12]
 8001050:	059a      	lsls	r2, r3, #22
 8001052:	d402      	bmi.n	800105a <_vfiprintf_r+0x2a>
 8001054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001056:	f7ff fec6 	bl	8000de6 <__retarget_lock_acquire_recursive>
 800105a:	89ab      	ldrh	r3, [r5, #12]
 800105c:	071b      	lsls	r3, r3, #28
 800105e:	d501      	bpl.n	8001064 <_vfiprintf_r+0x34>
 8001060:	692b      	ldr	r3, [r5, #16]
 8001062:	b99b      	cbnz	r3, 800108c <_vfiprintf_r+0x5c>
 8001064:	4629      	mov	r1, r5
 8001066:	4630      	mov	r0, r6
 8001068:	f000 fb70 	bl	800174c <__swsetup_r>
 800106c:	b170      	cbz	r0, 800108c <_vfiprintf_r+0x5c>
 800106e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001070:	07dc      	lsls	r4, r3, #31
 8001072:	d504      	bpl.n	800107e <_vfiprintf_r+0x4e>
 8001074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001078:	b01d      	add	sp, #116	@ 0x74
 800107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800107e:	89ab      	ldrh	r3, [r5, #12]
 8001080:	0598      	lsls	r0, r3, #22
 8001082:	d4f7      	bmi.n	8001074 <_vfiprintf_r+0x44>
 8001084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001086:	f7ff feaf 	bl	8000de8 <__retarget_lock_release_recursive>
 800108a:	e7f3      	b.n	8001074 <_vfiprintf_r+0x44>
 800108c:	2300      	movs	r3, #0
 800108e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001090:	2320      	movs	r3, #32
 8001092:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001096:	f8cd 800c 	str.w	r8, [sp, #12]
 800109a:	2330      	movs	r3, #48	@ 0x30
 800109c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800124c <_vfiprintf_r+0x21c>
 80010a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80010a4:	f04f 0901 	mov.w	r9, #1
 80010a8:	4623      	mov	r3, r4
 80010aa:	469a      	mov	sl, r3
 80010ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010b0:	b10a      	cbz	r2, 80010b6 <_vfiprintf_r+0x86>
 80010b2:	2a25      	cmp	r2, #37	@ 0x25
 80010b4:	d1f9      	bne.n	80010aa <_vfiprintf_r+0x7a>
 80010b6:	ebba 0b04 	subs.w	fp, sl, r4
 80010ba:	d00b      	beq.n	80010d4 <_vfiprintf_r+0xa4>
 80010bc:	465b      	mov	r3, fp
 80010be:	4622      	mov	r2, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	4630      	mov	r0, r6
 80010c4:	f7ff ffa1 	bl	800100a <__sfputs_r>
 80010c8:	3001      	adds	r0, #1
 80010ca:	f000 80a7 	beq.w	800121c <_vfiprintf_r+0x1ec>
 80010ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80010d0:	445a      	add	r2, fp
 80010d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80010d4:	f89a 3000 	ldrb.w	r3, [sl]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 809f 	beq.w	800121c <_vfiprintf_r+0x1ec>
 80010de:	2300      	movs	r3, #0
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010e8:	f10a 0a01 	add.w	sl, sl, #1
 80010ec:	9304      	str	r3, [sp, #16]
 80010ee:	9307      	str	r3, [sp, #28]
 80010f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80010f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80010f6:	4654      	mov	r4, sl
 80010f8:	2205      	movs	r2, #5
 80010fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010fe:	4853      	ldr	r0, [pc, #332]	@ (800124c <_vfiprintf_r+0x21c>)
 8001100:	f7ff f86e 	bl	80001e0 <memchr>
 8001104:	9a04      	ldr	r2, [sp, #16]
 8001106:	b9d8      	cbnz	r0, 8001140 <_vfiprintf_r+0x110>
 8001108:	06d1      	lsls	r1, r2, #27
 800110a:	bf44      	itt	mi
 800110c:	2320      	movmi	r3, #32
 800110e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001112:	0713      	lsls	r3, r2, #28
 8001114:	bf44      	itt	mi
 8001116:	232b      	movmi	r3, #43	@ 0x2b
 8001118:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800111c:	f89a 3000 	ldrb.w	r3, [sl]
 8001120:	2b2a      	cmp	r3, #42	@ 0x2a
 8001122:	d015      	beq.n	8001150 <_vfiprintf_r+0x120>
 8001124:	9a07      	ldr	r2, [sp, #28]
 8001126:	4654      	mov	r4, sl
 8001128:	2000      	movs	r0, #0
 800112a:	f04f 0c0a 	mov.w	ip, #10
 800112e:	4621      	mov	r1, r4
 8001130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001134:	3b30      	subs	r3, #48	@ 0x30
 8001136:	2b09      	cmp	r3, #9
 8001138:	d94b      	bls.n	80011d2 <_vfiprintf_r+0x1a2>
 800113a:	b1b0      	cbz	r0, 800116a <_vfiprintf_r+0x13a>
 800113c:	9207      	str	r2, [sp, #28]
 800113e:	e014      	b.n	800116a <_vfiprintf_r+0x13a>
 8001140:	eba0 0308 	sub.w	r3, r0, r8
 8001144:	fa09 f303 	lsl.w	r3, r9, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	9304      	str	r3, [sp, #16]
 800114c:	46a2      	mov	sl, r4
 800114e:	e7d2      	b.n	80010f6 <_vfiprintf_r+0xc6>
 8001150:	9b03      	ldr	r3, [sp, #12]
 8001152:	1d19      	adds	r1, r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	9103      	str	r1, [sp, #12]
 8001158:	2b00      	cmp	r3, #0
 800115a:	bfbb      	ittet	lt
 800115c:	425b      	neglt	r3, r3
 800115e:	f042 0202 	orrlt.w	r2, r2, #2
 8001162:	9307      	strge	r3, [sp, #28]
 8001164:	9307      	strlt	r3, [sp, #28]
 8001166:	bfb8      	it	lt
 8001168:	9204      	strlt	r2, [sp, #16]
 800116a:	7823      	ldrb	r3, [r4, #0]
 800116c:	2b2e      	cmp	r3, #46	@ 0x2e
 800116e:	d10a      	bne.n	8001186 <_vfiprintf_r+0x156>
 8001170:	7863      	ldrb	r3, [r4, #1]
 8001172:	2b2a      	cmp	r3, #42	@ 0x2a
 8001174:	d132      	bne.n	80011dc <_vfiprintf_r+0x1ac>
 8001176:	9b03      	ldr	r3, [sp, #12]
 8001178:	1d1a      	adds	r2, r3, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	9203      	str	r2, [sp, #12]
 800117e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001182:	3402      	adds	r4, #2
 8001184:	9305      	str	r3, [sp, #20]
 8001186:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800125c <_vfiprintf_r+0x22c>
 800118a:	7821      	ldrb	r1, [r4, #0]
 800118c:	2203      	movs	r2, #3
 800118e:	4650      	mov	r0, sl
 8001190:	f7ff f826 	bl	80001e0 <memchr>
 8001194:	b138      	cbz	r0, 80011a6 <_vfiprintf_r+0x176>
 8001196:	9b04      	ldr	r3, [sp, #16]
 8001198:	eba0 000a 	sub.w	r0, r0, sl
 800119c:	2240      	movs	r2, #64	@ 0x40
 800119e:	4082      	lsls	r2, r0
 80011a0:	4313      	orrs	r3, r2
 80011a2:	3401      	adds	r4, #1
 80011a4:	9304      	str	r3, [sp, #16]
 80011a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011aa:	4829      	ldr	r0, [pc, #164]	@ (8001250 <_vfiprintf_r+0x220>)
 80011ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80011b0:	2206      	movs	r2, #6
 80011b2:	f7ff f815 	bl	80001e0 <memchr>
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d03f      	beq.n	800123a <_vfiprintf_r+0x20a>
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <_vfiprintf_r+0x224>)
 80011bc:	bb1b      	cbnz	r3, 8001206 <_vfiprintf_r+0x1d6>
 80011be:	9b03      	ldr	r3, [sp, #12]
 80011c0:	3307      	adds	r3, #7
 80011c2:	f023 0307 	bic.w	r3, r3, #7
 80011c6:	3308      	adds	r3, #8
 80011c8:	9303      	str	r3, [sp, #12]
 80011ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80011cc:	443b      	add	r3, r7
 80011ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80011d0:	e76a      	b.n	80010a8 <_vfiprintf_r+0x78>
 80011d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80011d6:	460c      	mov	r4, r1
 80011d8:	2001      	movs	r0, #1
 80011da:	e7a8      	b.n	800112e <_vfiprintf_r+0xfe>
 80011dc:	2300      	movs	r3, #0
 80011de:	3401      	adds	r4, #1
 80011e0:	9305      	str	r3, [sp, #20]
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 0c0a 	mov.w	ip, #10
 80011e8:	4620      	mov	r0, r4
 80011ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011ee:	3a30      	subs	r2, #48	@ 0x30
 80011f0:	2a09      	cmp	r2, #9
 80011f2:	d903      	bls.n	80011fc <_vfiprintf_r+0x1cc>
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0c6      	beq.n	8001186 <_vfiprintf_r+0x156>
 80011f8:	9105      	str	r1, [sp, #20]
 80011fa:	e7c4      	b.n	8001186 <_vfiprintf_r+0x156>
 80011fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001200:	4604      	mov	r4, r0
 8001202:	2301      	movs	r3, #1
 8001204:	e7f0      	b.n	80011e8 <_vfiprintf_r+0x1b8>
 8001206:	ab03      	add	r3, sp, #12
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	462a      	mov	r2, r5
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <_vfiprintf_r+0x228>)
 800120e:	a904      	add	r1, sp, #16
 8001210:	4630      	mov	r0, r6
 8001212:	f3af 8000 	nop.w
 8001216:	4607      	mov	r7, r0
 8001218:	1c78      	adds	r0, r7, #1
 800121a:	d1d6      	bne.n	80011ca <_vfiprintf_r+0x19a>
 800121c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800121e:	07d9      	lsls	r1, r3, #31
 8001220:	d405      	bmi.n	800122e <_vfiprintf_r+0x1fe>
 8001222:	89ab      	ldrh	r3, [r5, #12]
 8001224:	059a      	lsls	r2, r3, #22
 8001226:	d402      	bmi.n	800122e <_vfiprintf_r+0x1fe>
 8001228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800122a:	f7ff fddd 	bl	8000de8 <__retarget_lock_release_recursive>
 800122e:	89ab      	ldrh	r3, [r5, #12]
 8001230:	065b      	lsls	r3, r3, #25
 8001232:	f53f af1f 	bmi.w	8001074 <_vfiprintf_r+0x44>
 8001236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001238:	e71e      	b.n	8001078 <_vfiprintf_r+0x48>
 800123a:	ab03      	add	r3, sp, #12
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	462a      	mov	r2, r5
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <_vfiprintf_r+0x228>)
 8001242:	a904      	add	r1, sp, #16
 8001244:	4630      	mov	r0, r6
 8001246:	f000 f879 	bl	800133c <_printf_i>
 800124a:	e7e4      	b.n	8001216 <_vfiprintf_r+0x1e6>
 800124c:	08001996 	.word	0x08001996
 8001250:	080019a0 	.word	0x080019a0
 8001254:	00000000 	.word	0x00000000
 8001258:	0800100b 	.word	0x0800100b
 800125c:	0800199c 	.word	0x0800199c

08001260 <_printf_common>:
 8001260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001264:	4616      	mov	r6, r2
 8001266:	4698      	mov	r8, r3
 8001268:	688a      	ldr	r2, [r1, #8]
 800126a:	690b      	ldr	r3, [r1, #16]
 800126c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001270:	4293      	cmp	r3, r2
 8001272:	bfb8      	it	lt
 8001274:	4613      	movlt	r3, r2
 8001276:	6033      	str	r3, [r6, #0]
 8001278:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800127c:	4607      	mov	r7, r0
 800127e:	460c      	mov	r4, r1
 8001280:	b10a      	cbz	r2, 8001286 <_printf_common+0x26>
 8001282:	3301      	adds	r3, #1
 8001284:	6033      	str	r3, [r6, #0]
 8001286:	6823      	ldr	r3, [r4, #0]
 8001288:	0699      	lsls	r1, r3, #26
 800128a:	bf42      	ittt	mi
 800128c:	6833      	ldrmi	r3, [r6, #0]
 800128e:	3302      	addmi	r3, #2
 8001290:	6033      	strmi	r3, [r6, #0]
 8001292:	6825      	ldr	r5, [r4, #0]
 8001294:	f015 0506 	ands.w	r5, r5, #6
 8001298:	d106      	bne.n	80012a8 <_printf_common+0x48>
 800129a:	f104 0a19 	add.w	sl, r4, #25
 800129e:	68e3      	ldr	r3, [r4, #12]
 80012a0:	6832      	ldr	r2, [r6, #0]
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	42ab      	cmp	r3, r5
 80012a6:	dc26      	bgt.n	80012f6 <_printf_common+0x96>
 80012a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80012ac:	6822      	ldr	r2, [r4, #0]
 80012ae:	3b00      	subs	r3, #0
 80012b0:	bf18      	it	ne
 80012b2:	2301      	movne	r3, #1
 80012b4:	0692      	lsls	r2, r2, #26
 80012b6:	d42b      	bmi.n	8001310 <_printf_common+0xb0>
 80012b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80012bc:	4641      	mov	r1, r8
 80012be:	4638      	mov	r0, r7
 80012c0:	47c8      	blx	r9
 80012c2:	3001      	adds	r0, #1
 80012c4:	d01e      	beq.n	8001304 <_printf_common+0xa4>
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	6922      	ldr	r2, [r4, #16]
 80012ca:	f003 0306 	and.w	r3, r3, #6
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf02      	ittt	eq
 80012d2:	68e5      	ldreq	r5, [r4, #12]
 80012d4:	6833      	ldreq	r3, [r6, #0]
 80012d6:	1aed      	subeq	r5, r5, r3
 80012d8:	68a3      	ldr	r3, [r4, #8]
 80012da:	bf0c      	ite	eq
 80012dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012e0:	2500      	movne	r5, #0
 80012e2:	4293      	cmp	r3, r2
 80012e4:	bfc4      	itt	gt
 80012e6:	1a9b      	subgt	r3, r3, r2
 80012e8:	18ed      	addgt	r5, r5, r3
 80012ea:	2600      	movs	r6, #0
 80012ec:	341a      	adds	r4, #26
 80012ee:	42b5      	cmp	r5, r6
 80012f0:	d11a      	bne.n	8001328 <_printf_common+0xc8>
 80012f2:	2000      	movs	r0, #0
 80012f4:	e008      	b.n	8001308 <_printf_common+0xa8>
 80012f6:	2301      	movs	r3, #1
 80012f8:	4652      	mov	r2, sl
 80012fa:	4641      	mov	r1, r8
 80012fc:	4638      	mov	r0, r7
 80012fe:	47c8      	blx	r9
 8001300:	3001      	adds	r0, #1
 8001302:	d103      	bne.n	800130c <_printf_common+0xac>
 8001304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130c:	3501      	adds	r5, #1
 800130e:	e7c6      	b.n	800129e <_printf_common+0x3e>
 8001310:	18e1      	adds	r1, r4, r3
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	2030      	movs	r0, #48	@ 0x30
 8001316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800131a:	4422      	add	r2, r4
 800131c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001320:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001324:	3302      	adds	r3, #2
 8001326:	e7c7      	b.n	80012b8 <_printf_common+0x58>
 8001328:	2301      	movs	r3, #1
 800132a:	4622      	mov	r2, r4
 800132c:	4641      	mov	r1, r8
 800132e:	4638      	mov	r0, r7
 8001330:	47c8      	blx	r9
 8001332:	3001      	adds	r0, #1
 8001334:	d0e6      	beq.n	8001304 <_printf_common+0xa4>
 8001336:	3601      	adds	r6, #1
 8001338:	e7d9      	b.n	80012ee <_printf_common+0x8e>
	...

0800133c <_printf_i>:
 800133c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001340:	7e0f      	ldrb	r7, [r1, #24]
 8001342:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001344:	2f78      	cmp	r7, #120	@ 0x78
 8001346:	4691      	mov	r9, r2
 8001348:	4680      	mov	r8, r0
 800134a:	460c      	mov	r4, r1
 800134c:	469a      	mov	sl, r3
 800134e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001352:	d807      	bhi.n	8001364 <_printf_i+0x28>
 8001354:	2f62      	cmp	r7, #98	@ 0x62
 8001356:	d80a      	bhi.n	800136e <_printf_i+0x32>
 8001358:	2f00      	cmp	r7, #0
 800135a:	f000 80d1 	beq.w	8001500 <_printf_i+0x1c4>
 800135e:	2f58      	cmp	r7, #88	@ 0x58
 8001360:	f000 80b8 	beq.w	80014d4 <_printf_i+0x198>
 8001364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800136c:	e03a      	b.n	80013e4 <_printf_i+0xa8>
 800136e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001372:	2b15      	cmp	r3, #21
 8001374:	d8f6      	bhi.n	8001364 <_printf_i+0x28>
 8001376:	a101      	add	r1, pc, #4	@ (adr r1, 800137c <_printf_i+0x40>)
 8001378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800137c:	080013d5 	.word	0x080013d5
 8001380:	080013e9 	.word	0x080013e9
 8001384:	08001365 	.word	0x08001365
 8001388:	08001365 	.word	0x08001365
 800138c:	08001365 	.word	0x08001365
 8001390:	08001365 	.word	0x08001365
 8001394:	080013e9 	.word	0x080013e9
 8001398:	08001365 	.word	0x08001365
 800139c:	08001365 	.word	0x08001365
 80013a0:	08001365 	.word	0x08001365
 80013a4:	08001365 	.word	0x08001365
 80013a8:	080014e7 	.word	0x080014e7
 80013ac:	08001413 	.word	0x08001413
 80013b0:	080014a1 	.word	0x080014a1
 80013b4:	08001365 	.word	0x08001365
 80013b8:	08001365 	.word	0x08001365
 80013bc:	08001509 	.word	0x08001509
 80013c0:	08001365 	.word	0x08001365
 80013c4:	08001413 	.word	0x08001413
 80013c8:	08001365 	.word	0x08001365
 80013cc:	08001365 	.word	0x08001365
 80013d0:	080014a9 	.word	0x080014a9
 80013d4:	6833      	ldr	r3, [r6, #0]
 80013d6:	1d1a      	adds	r2, r3, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6032      	str	r2, [r6, #0]
 80013dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80013e4:	2301      	movs	r3, #1
 80013e6:	e09c      	b.n	8001522 <_printf_i+0x1e6>
 80013e8:	6833      	ldr	r3, [r6, #0]
 80013ea:	6820      	ldr	r0, [r4, #0]
 80013ec:	1d19      	adds	r1, r3, #4
 80013ee:	6031      	str	r1, [r6, #0]
 80013f0:	0606      	lsls	r6, r0, #24
 80013f2:	d501      	bpl.n	80013f8 <_printf_i+0xbc>
 80013f4:	681d      	ldr	r5, [r3, #0]
 80013f6:	e003      	b.n	8001400 <_printf_i+0xc4>
 80013f8:	0645      	lsls	r5, r0, #25
 80013fa:	d5fb      	bpl.n	80013f4 <_printf_i+0xb8>
 80013fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001400:	2d00      	cmp	r5, #0
 8001402:	da03      	bge.n	800140c <_printf_i+0xd0>
 8001404:	232d      	movs	r3, #45	@ 0x2d
 8001406:	426d      	negs	r5, r5
 8001408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800140c:	4858      	ldr	r0, [pc, #352]	@ (8001570 <_printf_i+0x234>)
 800140e:	230a      	movs	r3, #10
 8001410:	e011      	b.n	8001436 <_printf_i+0xfa>
 8001412:	6821      	ldr	r1, [r4, #0]
 8001414:	6833      	ldr	r3, [r6, #0]
 8001416:	0608      	lsls	r0, r1, #24
 8001418:	f853 5b04 	ldr.w	r5, [r3], #4
 800141c:	d402      	bmi.n	8001424 <_printf_i+0xe8>
 800141e:	0649      	lsls	r1, r1, #25
 8001420:	bf48      	it	mi
 8001422:	b2ad      	uxthmi	r5, r5
 8001424:	2f6f      	cmp	r7, #111	@ 0x6f
 8001426:	4852      	ldr	r0, [pc, #328]	@ (8001570 <_printf_i+0x234>)
 8001428:	6033      	str	r3, [r6, #0]
 800142a:	bf14      	ite	ne
 800142c:	230a      	movne	r3, #10
 800142e:	2308      	moveq	r3, #8
 8001430:	2100      	movs	r1, #0
 8001432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001436:	6866      	ldr	r6, [r4, #4]
 8001438:	60a6      	str	r6, [r4, #8]
 800143a:	2e00      	cmp	r6, #0
 800143c:	db05      	blt.n	800144a <_printf_i+0x10e>
 800143e:	6821      	ldr	r1, [r4, #0]
 8001440:	432e      	orrs	r6, r5
 8001442:	f021 0104 	bic.w	r1, r1, #4
 8001446:	6021      	str	r1, [r4, #0]
 8001448:	d04b      	beq.n	80014e2 <_printf_i+0x1a6>
 800144a:	4616      	mov	r6, r2
 800144c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001450:	fb03 5711 	mls	r7, r3, r1, r5
 8001454:	5dc7      	ldrb	r7, [r0, r7]
 8001456:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800145a:	462f      	mov	r7, r5
 800145c:	42bb      	cmp	r3, r7
 800145e:	460d      	mov	r5, r1
 8001460:	d9f4      	bls.n	800144c <_printf_i+0x110>
 8001462:	2b08      	cmp	r3, #8
 8001464:	d10b      	bne.n	800147e <_printf_i+0x142>
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	07df      	lsls	r7, r3, #31
 800146a:	d508      	bpl.n	800147e <_printf_i+0x142>
 800146c:	6923      	ldr	r3, [r4, #16]
 800146e:	6861      	ldr	r1, [r4, #4]
 8001470:	4299      	cmp	r1, r3
 8001472:	bfde      	ittt	le
 8001474:	2330      	movle	r3, #48	@ 0x30
 8001476:	f806 3c01 	strble.w	r3, [r6, #-1]
 800147a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800147e:	1b92      	subs	r2, r2, r6
 8001480:	6122      	str	r2, [r4, #16]
 8001482:	f8cd a000 	str.w	sl, [sp]
 8001486:	464b      	mov	r3, r9
 8001488:	aa03      	add	r2, sp, #12
 800148a:	4621      	mov	r1, r4
 800148c:	4640      	mov	r0, r8
 800148e:	f7ff fee7 	bl	8001260 <_printf_common>
 8001492:	3001      	adds	r0, #1
 8001494:	d14a      	bne.n	800152c <_printf_i+0x1f0>
 8001496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800149a:	b004      	add	sp, #16
 800149c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	6023      	str	r3, [r4, #0]
 80014a8:	4832      	ldr	r0, [pc, #200]	@ (8001574 <_printf_i+0x238>)
 80014aa:	2778      	movs	r7, #120	@ 0x78
 80014ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	6831      	ldr	r1, [r6, #0]
 80014b4:	061f      	lsls	r7, r3, #24
 80014b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80014ba:	d402      	bmi.n	80014c2 <_printf_i+0x186>
 80014bc:	065f      	lsls	r7, r3, #25
 80014be:	bf48      	it	mi
 80014c0:	b2ad      	uxthmi	r5, r5
 80014c2:	6031      	str	r1, [r6, #0]
 80014c4:	07d9      	lsls	r1, r3, #31
 80014c6:	bf44      	itt	mi
 80014c8:	f043 0320 	orrmi.w	r3, r3, #32
 80014cc:	6023      	strmi	r3, [r4, #0]
 80014ce:	b11d      	cbz	r5, 80014d8 <_printf_i+0x19c>
 80014d0:	2310      	movs	r3, #16
 80014d2:	e7ad      	b.n	8001430 <_printf_i+0xf4>
 80014d4:	4826      	ldr	r0, [pc, #152]	@ (8001570 <_printf_i+0x234>)
 80014d6:	e7e9      	b.n	80014ac <_printf_i+0x170>
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	f023 0320 	bic.w	r3, r3, #32
 80014de:	6023      	str	r3, [r4, #0]
 80014e0:	e7f6      	b.n	80014d0 <_printf_i+0x194>
 80014e2:	4616      	mov	r6, r2
 80014e4:	e7bd      	b.n	8001462 <_printf_i+0x126>
 80014e6:	6833      	ldr	r3, [r6, #0]
 80014e8:	6825      	ldr	r5, [r4, #0]
 80014ea:	6961      	ldr	r1, [r4, #20]
 80014ec:	1d18      	adds	r0, r3, #4
 80014ee:	6030      	str	r0, [r6, #0]
 80014f0:	062e      	lsls	r6, r5, #24
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	d501      	bpl.n	80014fa <_printf_i+0x1be>
 80014f6:	6019      	str	r1, [r3, #0]
 80014f8:	e002      	b.n	8001500 <_printf_i+0x1c4>
 80014fa:	0668      	lsls	r0, r5, #25
 80014fc:	d5fb      	bpl.n	80014f6 <_printf_i+0x1ba>
 80014fe:	8019      	strh	r1, [r3, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	6123      	str	r3, [r4, #16]
 8001504:	4616      	mov	r6, r2
 8001506:	e7bc      	b.n	8001482 <_printf_i+0x146>
 8001508:	6833      	ldr	r3, [r6, #0]
 800150a:	1d1a      	adds	r2, r3, #4
 800150c:	6032      	str	r2, [r6, #0]
 800150e:	681e      	ldr	r6, [r3, #0]
 8001510:	6862      	ldr	r2, [r4, #4]
 8001512:	2100      	movs	r1, #0
 8001514:	4630      	mov	r0, r6
 8001516:	f7fe fe63 	bl	80001e0 <memchr>
 800151a:	b108      	cbz	r0, 8001520 <_printf_i+0x1e4>
 800151c:	1b80      	subs	r0, r0, r6
 800151e:	6060      	str	r0, [r4, #4]
 8001520:	6863      	ldr	r3, [r4, #4]
 8001522:	6123      	str	r3, [r4, #16]
 8001524:	2300      	movs	r3, #0
 8001526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800152a:	e7aa      	b.n	8001482 <_printf_i+0x146>
 800152c:	6923      	ldr	r3, [r4, #16]
 800152e:	4632      	mov	r2, r6
 8001530:	4649      	mov	r1, r9
 8001532:	4640      	mov	r0, r8
 8001534:	47d0      	blx	sl
 8001536:	3001      	adds	r0, #1
 8001538:	d0ad      	beq.n	8001496 <_printf_i+0x15a>
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	079b      	lsls	r3, r3, #30
 800153e:	d413      	bmi.n	8001568 <_printf_i+0x22c>
 8001540:	68e0      	ldr	r0, [r4, #12]
 8001542:	9b03      	ldr	r3, [sp, #12]
 8001544:	4298      	cmp	r0, r3
 8001546:	bfb8      	it	lt
 8001548:	4618      	movlt	r0, r3
 800154a:	e7a6      	b.n	800149a <_printf_i+0x15e>
 800154c:	2301      	movs	r3, #1
 800154e:	4632      	mov	r2, r6
 8001550:	4649      	mov	r1, r9
 8001552:	4640      	mov	r0, r8
 8001554:	47d0      	blx	sl
 8001556:	3001      	adds	r0, #1
 8001558:	d09d      	beq.n	8001496 <_printf_i+0x15a>
 800155a:	3501      	adds	r5, #1
 800155c:	68e3      	ldr	r3, [r4, #12]
 800155e:	9903      	ldr	r1, [sp, #12]
 8001560:	1a5b      	subs	r3, r3, r1
 8001562:	42ab      	cmp	r3, r5
 8001564:	dcf2      	bgt.n	800154c <_printf_i+0x210>
 8001566:	e7eb      	b.n	8001540 <_printf_i+0x204>
 8001568:	2500      	movs	r5, #0
 800156a:	f104 0619 	add.w	r6, r4, #25
 800156e:	e7f5      	b.n	800155c <_printf_i+0x220>
 8001570:	080019a7 	.word	0x080019a7
 8001574:	080019b8 	.word	0x080019b8

08001578 <__sflush_r>:
 8001578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001580:	0716      	lsls	r6, r2, #28
 8001582:	4605      	mov	r5, r0
 8001584:	460c      	mov	r4, r1
 8001586:	d454      	bmi.n	8001632 <__sflush_r+0xba>
 8001588:	684b      	ldr	r3, [r1, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	dc02      	bgt.n	8001594 <__sflush_r+0x1c>
 800158e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	dd48      	ble.n	8001626 <__sflush_r+0xae>
 8001594:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001596:	2e00      	cmp	r6, #0
 8001598:	d045      	beq.n	8001626 <__sflush_r+0xae>
 800159a:	2300      	movs	r3, #0
 800159c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80015a0:	682f      	ldr	r7, [r5, #0]
 80015a2:	6a21      	ldr	r1, [r4, #32]
 80015a4:	602b      	str	r3, [r5, #0]
 80015a6:	d030      	beq.n	800160a <__sflush_r+0x92>
 80015a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80015aa:	89a3      	ldrh	r3, [r4, #12]
 80015ac:	0759      	lsls	r1, r3, #29
 80015ae:	d505      	bpl.n	80015bc <__sflush_r+0x44>
 80015b0:	6863      	ldr	r3, [r4, #4]
 80015b2:	1ad2      	subs	r2, r2, r3
 80015b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80015b6:	b10b      	cbz	r3, 80015bc <__sflush_r+0x44>
 80015b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015ba:	1ad2      	subs	r2, r2, r3
 80015bc:	2300      	movs	r3, #0
 80015be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80015c0:	6a21      	ldr	r1, [r4, #32]
 80015c2:	4628      	mov	r0, r5
 80015c4:	47b0      	blx	r6
 80015c6:	1c43      	adds	r3, r0, #1
 80015c8:	89a3      	ldrh	r3, [r4, #12]
 80015ca:	d106      	bne.n	80015da <__sflush_r+0x62>
 80015cc:	6829      	ldr	r1, [r5, #0]
 80015ce:	291d      	cmp	r1, #29
 80015d0:	d82b      	bhi.n	800162a <__sflush_r+0xb2>
 80015d2:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <__sflush_r+0x104>)
 80015d4:	40ca      	lsrs	r2, r1
 80015d6:	07d6      	lsls	r6, r2, #31
 80015d8:	d527      	bpl.n	800162a <__sflush_r+0xb2>
 80015da:	2200      	movs	r2, #0
 80015dc:	6062      	str	r2, [r4, #4]
 80015de:	04d9      	lsls	r1, r3, #19
 80015e0:	6922      	ldr	r2, [r4, #16]
 80015e2:	6022      	str	r2, [r4, #0]
 80015e4:	d504      	bpl.n	80015f0 <__sflush_r+0x78>
 80015e6:	1c42      	adds	r2, r0, #1
 80015e8:	d101      	bne.n	80015ee <__sflush_r+0x76>
 80015ea:	682b      	ldr	r3, [r5, #0]
 80015ec:	b903      	cbnz	r3, 80015f0 <__sflush_r+0x78>
 80015ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80015f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015f2:	602f      	str	r7, [r5, #0]
 80015f4:	b1b9      	cbz	r1, 8001626 <__sflush_r+0xae>
 80015f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015fa:	4299      	cmp	r1, r3
 80015fc:	d002      	beq.n	8001604 <__sflush_r+0x8c>
 80015fe:	4628      	mov	r0, r5
 8001600:	f7ff fbf4 	bl	8000dec <_free_r>
 8001604:	2300      	movs	r3, #0
 8001606:	6363      	str	r3, [r4, #52]	@ 0x34
 8001608:	e00d      	b.n	8001626 <__sflush_r+0xae>
 800160a:	2301      	movs	r3, #1
 800160c:	4628      	mov	r0, r5
 800160e:	47b0      	blx	r6
 8001610:	4602      	mov	r2, r0
 8001612:	1c50      	adds	r0, r2, #1
 8001614:	d1c9      	bne.n	80015aa <__sflush_r+0x32>
 8001616:	682b      	ldr	r3, [r5, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0c6      	beq.n	80015aa <__sflush_r+0x32>
 800161c:	2b1d      	cmp	r3, #29
 800161e:	d001      	beq.n	8001624 <__sflush_r+0xac>
 8001620:	2b16      	cmp	r3, #22
 8001622:	d11e      	bne.n	8001662 <__sflush_r+0xea>
 8001624:	602f      	str	r7, [r5, #0]
 8001626:	2000      	movs	r0, #0
 8001628:	e022      	b.n	8001670 <__sflush_r+0xf8>
 800162a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800162e:	b21b      	sxth	r3, r3
 8001630:	e01b      	b.n	800166a <__sflush_r+0xf2>
 8001632:	690f      	ldr	r7, [r1, #16]
 8001634:	2f00      	cmp	r7, #0
 8001636:	d0f6      	beq.n	8001626 <__sflush_r+0xae>
 8001638:	0793      	lsls	r3, r2, #30
 800163a:	680e      	ldr	r6, [r1, #0]
 800163c:	bf08      	it	eq
 800163e:	694b      	ldreq	r3, [r1, #20]
 8001640:	600f      	str	r7, [r1, #0]
 8001642:	bf18      	it	ne
 8001644:	2300      	movne	r3, #0
 8001646:	eba6 0807 	sub.w	r8, r6, r7
 800164a:	608b      	str	r3, [r1, #8]
 800164c:	f1b8 0f00 	cmp.w	r8, #0
 8001650:	dde9      	ble.n	8001626 <__sflush_r+0xae>
 8001652:	6a21      	ldr	r1, [r4, #32]
 8001654:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001656:	4643      	mov	r3, r8
 8001658:	463a      	mov	r2, r7
 800165a:	4628      	mov	r0, r5
 800165c:	47b0      	blx	r6
 800165e:	2800      	cmp	r0, #0
 8001660:	dc08      	bgt.n	8001674 <__sflush_r+0xfc>
 8001662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800166a:	81a3      	strh	r3, [r4, #12]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001674:	4407      	add	r7, r0
 8001676:	eba8 0800 	sub.w	r8, r8, r0
 800167a:	e7e7      	b.n	800164c <__sflush_r+0xd4>
 800167c:	20400001 	.word	0x20400001

08001680 <_fflush_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	690b      	ldr	r3, [r1, #16]
 8001684:	4605      	mov	r5, r0
 8001686:	460c      	mov	r4, r1
 8001688:	b913      	cbnz	r3, 8001690 <_fflush_r+0x10>
 800168a:	2500      	movs	r5, #0
 800168c:	4628      	mov	r0, r5
 800168e:	bd38      	pop	{r3, r4, r5, pc}
 8001690:	b118      	cbz	r0, 800169a <_fflush_r+0x1a>
 8001692:	6a03      	ldr	r3, [r0, #32]
 8001694:	b90b      	cbnz	r3, 800169a <_fflush_r+0x1a>
 8001696:	f7ff faa1 	bl	8000bdc <__sinit>
 800169a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f3      	beq.n	800168a <_fflush_r+0xa>
 80016a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80016a4:	07d0      	lsls	r0, r2, #31
 80016a6:	d404      	bmi.n	80016b2 <_fflush_r+0x32>
 80016a8:	0599      	lsls	r1, r3, #22
 80016aa:	d402      	bmi.n	80016b2 <_fflush_r+0x32>
 80016ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016ae:	f7ff fb9a 	bl	8000de6 <__retarget_lock_acquire_recursive>
 80016b2:	4628      	mov	r0, r5
 80016b4:	4621      	mov	r1, r4
 80016b6:	f7ff ff5f 	bl	8001578 <__sflush_r>
 80016ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016bc:	07da      	lsls	r2, r3, #31
 80016be:	4605      	mov	r5, r0
 80016c0:	d4e4      	bmi.n	800168c <_fflush_r+0xc>
 80016c2:	89a3      	ldrh	r3, [r4, #12]
 80016c4:	059b      	lsls	r3, r3, #22
 80016c6:	d4e1      	bmi.n	800168c <_fflush_r+0xc>
 80016c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016ca:	f7ff fb8d 	bl	8000de8 <__retarget_lock_release_recursive>
 80016ce:	e7dd      	b.n	800168c <_fflush_r+0xc>

080016d0 <__swbuf_r>:
 80016d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d2:	460e      	mov	r6, r1
 80016d4:	4614      	mov	r4, r2
 80016d6:	4605      	mov	r5, r0
 80016d8:	b118      	cbz	r0, 80016e2 <__swbuf_r+0x12>
 80016da:	6a03      	ldr	r3, [r0, #32]
 80016dc:	b90b      	cbnz	r3, 80016e2 <__swbuf_r+0x12>
 80016de:	f7ff fa7d 	bl	8000bdc <__sinit>
 80016e2:	69a3      	ldr	r3, [r4, #24]
 80016e4:	60a3      	str	r3, [r4, #8]
 80016e6:	89a3      	ldrh	r3, [r4, #12]
 80016e8:	071a      	lsls	r2, r3, #28
 80016ea:	d501      	bpl.n	80016f0 <__swbuf_r+0x20>
 80016ec:	6923      	ldr	r3, [r4, #16]
 80016ee:	b943      	cbnz	r3, 8001702 <__swbuf_r+0x32>
 80016f0:	4621      	mov	r1, r4
 80016f2:	4628      	mov	r0, r5
 80016f4:	f000 f82a 	bl	800174c <__swsetup_r>
 80016f8:	b118      	cbz	r0, 8001702 <__swbuf_r+0x32>
 80016fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80016fe:	4638      	mov	r0, r7
 8001700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	6922      	ldr	r2, [r4, #16]
 8001706:	1a98      	subs	r0, r3, r2
 8001708:	6963      	ldr	r3, [r4, #20]
 800170a:	b2f6      	uxtb	r6, r6
 800170c:	4283      	cmp	r3, r0
 800170e:	4637      	mov	r7, r6
 8001710:	dc05      	bgt.n	800171e <__swbuf_r+0x4e>
 8001712:	4621      	mov	r1, r4
 8001714:	4628      	mov	r0, r5
 8001716:	f7ff ffb3 	bl	8001680 <_fflush_r>
 800171a:	2800      	cmp	r0, #0
 800171c:	d1ed      	bne.n	80016fa <__swbuf_r+0x2a>
 800171e:	68a3      	ldr	r3, [r4, #8]
 8001720:	3b01      	subs	r3, #1
 8001722:	60a3      	str	r3, [r4, #8]
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	6022      	str	r2, [r4, #0]
 800172a:	701e      	strb	r6, [r3, #0]
 800172c:	6962      	ldr	r2, [r4, #20]
 800172e:	1c43      	adds	r3, r0, #1
 8001730:	429a      	cmp	r2, r3
 8001732:	d004      	beq.n	800173e <__swbuf_r+0x6e>
 8001734:	89a3      	ldrh	r3, [r4, #12]
 8001736:	07db      	lsls	r3, r3, #31
 8001738:	d5e1      	bpl.n	80016fe <__swbuf_r+0x2e>
 800173a:	2e0a      	cmp	r6, #10
 800173c:	d1df      	bne.n	80016fe <__swbuf_r+0x2e>
 800173e:	4621      	mov	r1, r4
 8001740:	4628      	mov	r0, r5
 8001742:	f7ff ff9d 	bl	8001680 <_fflush_r>
 8001746:	2800      	cmp	r0, #0
 8001748:	d0d9      	beq.n	80016fe <__swbuf_r+0x2e>
 800174a:	e7d6      	b.n	80016fa <__swbuf_r+0x2a>

0800174c <__swsetup_r>:
 800174c:	b538      	push	{r3, r4, r5, lr}
 800174e:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <__swsetup_r+0xa8>)
 8001750:	4605      	mov	r5, r0
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	460c      	mov	r4, r1
 8001756:	b118      	cbz	r0, 8001760 <__swsetup_r+0x14>
 8001758:	6a03      	ldr	r3, [r0, #32]
 800175a:	b90b      	cbnz	r3, 8001760 <__swsetup_r+0x14>
 800175c:	f7ff fa3e 	bl	8000bdc <__sinit>
 8001760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001764:	0719      	lsls	r1, r3, #28
 8001766:	d422      	bmi.n	80017ae <__swsetup_r+0x62>
 8001768:	06da      	lsls	r2, r3, #27
 800176a:	d407      	bmi.n	800177c <__swsetup_r+0x30>
 800176c:	2209      	movs	r2, #9
 800176e:	602a      	str	r2, [r5, #0]
 8001770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001774:	81a3      	strh	r3, [r4, #12]
 8001776:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800177a:	e033      	b.n	80017e4 <__swsetup_r+0x98>
 800177c:	0758      	lsls	r0, r3, #29
 800177e:	d512      	bpl.n	80017a6 <__swsetup_r+0x5a>
 8001780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001782:	b141      	cbz	r1, 8001796 <__swsetup_r+0x4a>
 8001784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001788:	4299      	cmp	r1, r3
 800178a:	d002      	beq.n	8001792 <__swsetup_r+0x46>
 800178c:	4628      	mov	r0, r5
 800178e:	f7ff fb2d 	bl	8000dec <_free_r>
 8001792:	2300      	movs	r3, #0
 8001794:	6363      	str	r3, [r4, #52]	@ 0x34
 8001796:	89a3      	ldrh	r3, [r4, #12]
 8001798:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800179c:	81a3      	strh	r3, [r4, #12]
 800179e:	2300      	movs	r3, #0
 80017a0:	6063      	str	r3, [r4, #4]
 80017a2:	6923      	ldr	r3, [r4, #16]
 80017a4:	6023      	str	r3, [r4, #0]
 80017a6:	89a3      	ldrh	r3, [r4, #12]
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	81a3      	strh	r3, [r4, #12]
 80017ae:	6923      	ldr	r3, [r4, #16]
 80017b0:	b94b      	cbnz	r3, 80017c6 <__swsetup_r+0x7a>
 80017b2:	89a3      	ldrh	r3, [r4, #12]
 80017b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80017b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017bc:	d003      	beq.n	80017c6 <__swsetup_r+0x7a>
 80017be:	4621      	mov	r1, r4
 80017c0:	4628      	mov	r0, r5
 80017c2:	f000 f84f 	bl	8001864 <__smakebuf_r>
 80017c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017ca:	f013 0201 	ands.w	r2, r3, #1
 80017ce:	d00a      	beq.n	80017e6 <__swsetup_r+0x9a>
 80017d0:	2200      	movs	r2, #0
 80017d2:	60a2      	str	r2, [r4, #8]
 80017d4:	6962      	ldr	r2, [r4, #20]
 80017d6:	4252      	negs	r2, r2
 80017d8:	61a2      	str	r2, [r4, #24]
 80017da:	6922      	ldr	r2, [r4, #16]
 80017dc:	b942      	cbnz	r2, 80017f0 <__swsetup_r+0xa4>
 80017de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80017e2:	d1c5      	bne.n	8001770 <__swsetup_r+0x24>
 80017e4:	bd38      	pop	{r3, r4, r5, pc}
 80017e6:	0799      	lsls	r1, r3, #30
 80017e8:	bf58      	it	pl
 80017ea:	6962      	ldrpl	r2, [r4, #20]
 80017ec:	60a2      	str	r2, [r4, #8]
 80017ee:	e7f4      	b.n	80017da <__swsetup_r+0x8e>
 80017f0:	2000      	movs	r0, #0
 80017f2:	e7f7      	b.n	80017e4 <__swsetup_r+0x98>
 80017f4:	2000000c 	.word	0x2000000c

080017f8 <_sbrk_r>:
 80017f8:	b538      	push	{r3, r4, r5, lr}
 80017fa:	4d06      	ldr	r5, [pc, #24]	@ (8001814 <_sbrk_r+0x1c>)
 80017fc:	2300      	movs	r3, #0
 80017fe:	4604      	mov	r4, r0
 8001800:	4608      	mov	r0, r1
 8001802:	602b      	str	r3, [r5, #0]
 8001804:	f7ff f868 	bl	80008d8 <_sbrk>
 8001808:	1c43      	adds	r3, r0, #1
 800180a:	d102      	bne.n	8001812 <_sbrk_r+0x1a>
 800180c:	682b      	ldr	r3, [r5, #0]
 800180e:	b103      	cbz	r3, 8001812 <_sbrk_r+0x1a>
 8001810:	6023      	str	r3, [r4, #0]
 8001812:	bd38      	pop	{r3, r4, r5, pc}
 8001814:	200014ac 	.word	0x200014ac

08001818 <__swhatbuf_r>:
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	460c      	mov	r4, r1
 800181c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001820:	2900      	cmp	r1, #0
 8001822:	b096      	sub	sp, #88	@ 0x58
 8001824:	4615      	mov	r5, r2
 8001826:	461e      	mov	r6, r3
 8001828:	da0d      	bge.n	8001846 <__swhatbuf_r+0x2e>
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	bf14      	ite	ne
 8001836:	2340      	movne	r3, #64	@ 0x40
 8001838:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800183c:	2000      	movs	r0, #0
 800183e:	6031      	str	r1, [r6, #0]
 8001840:	602b      	str	r3, [r5, #0]
 8001842:	b016      	add	sp, #88	@ 0x58
 8001844:	bd70      	pop	{r4, r5, r6, pc}
 8001846:	466a      	mov	r2, sp
 8001848:	f000 f848 	bl	80018dc <_fstat_r>
 800184c:	2800      	cmp	r0, #0
 800184e:	dbec      	blt.n	800182a <__swhatbuf_r+0x12>
 8001850:	9901      	ldr	r1, [sp, #4]
 8001852:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001856:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800185a:	4259      	negs	r1, r3
 800185c:	4159      	adcs	r1, r3
 800185e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001862:	e7eb      	b.n	800183c <__swhatbuf_r+0x24>

08001864 <__smakebuf_r>:
 8001864:	898b      	ldrh	r3, [r1, #12]
 8001866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001868:	079d      	lsls	r5, r3, #30
 800186a:	4606      	mov	r6, r0
 800186c:	460c      	mov	r4, r1
 800186e:	d507      	bpl.n	8001880 <__smakebuf_r+0x1c>
 8001870:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001874:	6023      	str	r3, [r4, #0]
 8001876:	6123      	str	r3, [r4, #16]
 8001878:	2301      	movs	r3, #1
 800187a:	6163      	str	r3, [r4, #20]
 800187c:	b003      	add	sp, #12
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	ab01      	add	r3, sp, #4
 8001882:	466a      	mov	r2, sp
 8001884:	f7ff ffc8 	bl	8001818 <__swhatbuf_r>
 8001888:	9f00      	ldr	r7, [sp, #0]
 800188a:	4605      	mov	r5, r0
 800188c:	4639      	mov	r1, r7
 800188e:	4630      	mov	r0, r6
 8001890:	f7ff fb18 	bl	8000ec4 <_malloc_r>
 8001894:	b948      	cbnz	r0, 80018aa <__smakebuf_r+0x46>
 8001896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800189a:	059a      	lsls	r2, r3, #22
 800189c:	d4ee      	bmi.n	800187c <__smakebuf_r+0x18>
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	81a3      	strh	r3, [r4, #12]
 80018a8:	e7e2      	b.n	8001870 <__smakebuf_r+0xc>
 80018aa:	89a3      	ldrh	r3, [r4, #12]
 80018ac:	6020      	str	r0, [r4, #0]
 80018ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b2:	81a3      	strh	r3, [r4, #12]
 80018b4:	9b01      	ldr	r3, [sp, #4]
 80018b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80018ba:	b15b      	cbz	r3, 80018d4 <__smakebuf_r+0x70>
 80018bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018c0:	4630      	mov	r0, r6
 80018c2:	f000 f81d 	bl	8001900 <_isatty_r>
 80018c6:	b128      	cbz	r0, 80018d4 <__smakebuf_r+0x70>
 80018c8:	89a3      	ldrh	r3, [r4, #12]
 80018ca:	f023 0303 	bic.w	r3, r3, #3
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	81a3      	strh	r3, [r4, #12]
 80018d4:	89a3      	ldrh	r3, [r4, #12]
 80018d6:	431d      	orrs	r5, r3
 80018d8:	81a5      	strh	r5, [r4, #12]
 80018da:	e7cf      	b.n	800187c <__smakebuf_r+0x18>

080018dc <_fstat_r>:
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	4d07      	ldr	r5, [pc, #28]	@ (80018fc <_fstat_r+0x20>)
 80018e0:	2300      	movs	r3, #0
 80018e2:	4604      	mov	r4, r0
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	602b      	str	r3, [r5, #0]
 80018ea:	f7fe ffcd 	bl	8000888 <_fstat>
 80018ee:	1c43      	adds	r3, r0, #1
 80018f0:	d102      	bne.n	80018f8 <_fstat_r+0x1c>
 80018f2:	682b      	ldr	r3, [r5, #0]
 80018f4:	b103      	cbz	r3, 80018f8 <_fstat_r+0x1c>
 80018f6:	6023      	str	r3, [r4, #0]
 80018f8:	bd38      	pop	{r3, r4, r5, pc}
 80018fa:	bf00      	nop
 80018fc:	200014ac 	.word	0x200014ac

08001900 <_isatty_r>:
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	4d06      	ldr	r5, [pc, #24]	@ (800191c <_isatty_r+0x1c>)
 8001904:	2300      	movs	r3, #0
 8001906:	4604      	mov	r4, r0
 8001908:	4608      	mov	r0, r1
 800190a:	602b      	str	r3, [r5, #0]
 800190c:	f7fe ffcc 	bl	80008a8 <_isatty>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d102      	bne.n	800191a <_isatty_r+0x1a>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	b103      	cbz	r3, 800191a <_isatty_r+0x1a>
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	200014ac 	.word	0x200014ac

08001920 <_init>:
 8001920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001922:	bf00      	nop
 8001924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001926:	bc08      	pop	{r3}
 8001928:	469e      	mov	lr, r3
 800192a:	4770      	bx	lr

0800192c <_fini>:
 800192c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192e:	bf00      	nop
 8001930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001932:	bc08      	pop	{r3}
 8001934:	469e      	mov	lr, r3
 8001936:	4770      	bx	lr
