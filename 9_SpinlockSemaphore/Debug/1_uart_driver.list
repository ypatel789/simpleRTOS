
1_uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001274  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001414  08001414  00002414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001468  08001468  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001468  08001468  00002468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001470  08001470  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001470  08001470  00002470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001474  08001474  00002474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001478  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080014d4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080014d4  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000102f  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000523  00000000  00000000  000040bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  000045e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000103  00000000  00000000  00004760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fb91  00000000  00000000  00004863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001dcd  00000000  00000000  000143f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055b1d  00000000  00000000  000161c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006bcde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c14  00000000  00000000  0006bd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0006c938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080013fc 	.word	0x080013fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080013fc 	.word	0x080013fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <led_init>:

#define GPIOAEN		(1U<<0) // 0b 0000 0000 0000 0000 0000 0000 0000 0001
#define LED_PIN     (1U<<5)

void led_init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	 *
	 * Example of friendly programming
	 *      Initial State = 0b 0000 0000 0000 0000 1100 0000 0000 0000
	 * Set bit0 = (1u<<0) = 0b 0000 0000 0000 0000 0000 0000 0000 0001
	 * Final State = Initial state OR Set bit9 = 0b 0000 0000 0000 0000 1100 0000 0000 0001 */
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <led_init+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <led_init+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set led pin as output pin */
	GPIOA->MODER |= (1U<<10);
 8000290:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <led_init+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <led_init+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 800029c:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <led_init+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <led_init+0x38>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <main>:
#include "led.h"
#include "uart.h"


int main (void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	led_init();
 80002c0:	f7ff ffde 	bl	8000280 <led_init>
	uart_tx_init();
 80002c4:	f000 f8b8 	bl	8000438 <uart_tx_init>

	while(1)
	{
		printf("Hello from STM32F4............\n\r");
 80002c8:	4802      	ldr	r0, [pc, #8]	@ (80002d4 <main+0x18>)
 80002ca:	f000 fa2b 	bl	8000724 <iprintf>
	{
 80002ce:	bf00      	nop
 80002d0:	e7fa      	b.n	80002c8 <main+0xc>
 80002d2:	bf00      	nop
 80002d4:	08001414 	.word	0x08001414

080002d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]
 80002e8:	e00a      	b.n	8000300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002ea:	f3af 8000 	nop.w
 80002ee:	4601      	mov	r1, r0
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	60ba      	str	r2, [r7, #8]
 80002f6:	b2ca      	uxtb	r2, r1
 80002f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	3301      	adds	r3, #1
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	697a      	ldr	r2, [r7, #20]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	429a      	cmp	r2, r3
 8000306:	dbf0      	blt.n	80002ea <_read+0x12>
  }

  return len;
 8000308:	687b      	ldr	r3, [r7, #4]
}
 800030a:	4618      	mov	r0, r3
 800030c:	3718      	adds	r7, #24
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}

08000312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000312:	b580      	push	{r7, lr}
 8000314:	b086      	sub	sp, #24
 8000316:	af00      	add	r7, sp, #0
 8000318:	60f8      	str	r0, [r7, #12]
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
 8000322:	e009      	b.n	8000338 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1c5a      	adds	r2, r3, #1
 8000328:	60ba      	str	r2, [r7, #8]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f877 	bl	8000420 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	3301      	adds	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	697a      	ldr	r2, [r7, #20]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	429a      	cmp	r2, r3
 800033e:	dbf1      	blt.n	8000324 <_write+0x12>
  }
  return len;
 8000340:	687b      	ldr	r3, [r7, #4]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}

0800034a <_close>:

int _close(int file)
{
 800034a:	b480      	push	{r7}
 800034c:	b083      	sub	sp, #12
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000352:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000356:	4618      	mov	r0, r3
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000372:	605a      	str	r2, [r3, #4]
  return 0;
 8000374:	2300      	movs	r3, #0
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <_isatty>:

int _isatty(int file)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003bc:	4a14      	ldr	r2, [pc, #80]	@ (8000410 <_sbrk+0x5c>)
 80003be:	4b15      	ldr	r3, [pc, #84]	@ (8000414 <_sbrk+0x60>)
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003c8:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <_sbrk+0x64>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <_sbrk+0x64>)
 80003d2:	4a12      	ldr	r2, [pc, #72]	@ (800041c <_sbrk+0x68>)
 80003d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <_sbrk+0x64>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	693a      	ldr	r2, [r7, #16]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d207      	bcs.n	80003f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003e4:	f000 fa42 	bl	800086c <__errno>
 80003e8:	4603      	mov	r3, r0
 80003ea:	220c      	movs	r2, #12
 80003ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003f2:	e009      	b.n	8000408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003f4:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <_sbrk+0x64>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <_sbrk+0x64>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	4a05      	ldr	r2, [pc, #20]	@ (8000418 <_sbrk+0x64>)
 8000404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000406:	68fb      	ldr	r3, [r7, #12]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20020000 	.word	0x20020000
 8000414:	00000400 	.word	0x00000400
 8000418:	20000078 	.word	0x20000078
 800041c:	200001c8 	.word	0x200001c8

08000420 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t periphclock, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periphclock, uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f000 f84f 	bl	80004cc <uart_write>
	return ch;
 800042e:	687b      	ldr	r3, [r7, #4]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <uart_tx_init>:

void uart_tx_init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	/* Enable Clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 800043c:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <uart_tx_init+0x84>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000440:	4a1e      	ldr	r2, [pc, #120]	@ (80004bc <uart_tx_init+0x84>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set PA2 mode to alternate function mode - reference manual, search 'moder' set pin to alternate function pin*/
	GPIOA->MODER &=~(1U<<4);
 8000448:	4b1d      	ldr	r3, [pc, #116]	@ (80004c0 <uart_tx_init+0x88>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a1c      	ldr	r2, [pc, #112]	@ (80004c0 <uart_tx_init+0x88>)
 800044e:	f023 0310 	bic.w	r3, r3, #16
 8000452:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <uart_tx_init+0x88>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a19      	ldr	r2, [pc, #100]	@ (80004c0 <uart_tx_init+0x88>)
 800045a:	f043 0320 	orr.w	r3, r3, #32
 800045e:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7 (UART2_TX) - reference manual pg161, Pin2 is AFRL2 bits 8,9,10,11, want to set it to AF7:0111*/
	GPIOA->AFR[0] |= (1U<<8); // there are no AFRL in .h files it is an array and accessing AFRL is done by AFR[0]
 8000460:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <uart_tx_init+0x88>)
 8000462:	6a1b      	ldr	r3, [r3, #32]
 8000464:	4a16      	ldr	r2, [pc, #88]	@ (80004c0 <uart_tx_init+0x88>)
 8000466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800046a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 800046c:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <uart_tx_init+0x88>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a13      	ldr	r2, [pc, #76]	@ (80004c0 <uart_tx_init+0x88>)
 8000472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000476:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000478:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <uart_tx_init+0x88>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a10      	ldr	r2, [pc, #64]	@ (80004c0 <uart_tx_init+0x88>)
 800047e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000482:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000484:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <uart_tx_init+0x88>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4a0d      	ldr	r2, [pc, #52]	@ (80004c0 <uart_tx_init+0x88>)
 800048a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800048e:	6213      	str	r3, [r2, #32]

	/* Enable clock access to UART - Datasheet - pg15 shows USART2 is connect via APB1 bus.
	 * Go to RM, find apb1enr. on the page118 it shows that if we set bit17 to 1 we will enable USART2 clock access */
	RCC->APB1ENR |= UART2EN;
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <uart_tx_init+0x84>)
 8000492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000494:	4a09      	ldr	r2, [pc, #36]	@ (80004bc <uart_tx_init+0x84>)
 8000496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800049a:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Configure baudrate */
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 800049c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80004a0:	4808      	ldr	r0, [pc, #32]	@ (80004c4 <uart_tx_init+0x8c>)
 80004a2:	f000 f82b 	bl	80004fc <uart_set_baudrate>

	/* Configure transfer direction - RM - search USART_CR1 - bit 3 if set to 1 it will enable transfer */
	USART2->CR1 = CR1_TE; // no logical OR used here as we want to set every other bit to 0 besides bit 3
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <uart_tx_init+0x90>)
 80004a8:	2208      	movs	r2, #8
 80004aa:	60da      	str	r2, [r3, #12]

	/* Enable UART module same page as above search - bit 13 if set to 1 will enable to USART module*/
	USART2->CR1 |= CR1_UE;
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <uart_tx_init+0x90>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a05      	ldr	r2, [pc, #20]	@ (80004c8 <uart_tx_init+0x90>)
 80004b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004b6:	60d3      	str	r3, [r2, #12]
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40023800 	.word	0x40023800
 80004c0:	40020000 	.word	0x40020000
 80004c4:	00f42400 	.word	0x00f42400
 80004c8:	40004400 	.word	0x40004400

080004cc <uart_write>:

static void uart_write(int ch)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	/* Make sure the transmit data register is empty - RM - USART_SR (status register) - Bit7 is what we are interested in for this one */
	while (!(USART2->SR & SR_TXE)){}
 80004d4:	bf00      	nop
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <uart_write+0x2c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f9      	beq.n	80004d6 <uart_write+0xa>

	/* Write to transmit data register */
	USART2->DR = (ch & 0XFF);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <uart_write+0x2c>)
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	6053      	str	r3, [r2, #4]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40004400 	.word	0x40004400

080004fc <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periphclock, uint32_t baudrate)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periphclock, baudrate);
 8000506:	6839      	ldr	r1, [r7, #0]
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f80b 	bl	8000524 <compute_uart_bd>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	4b03      	ldr	r3, [pc, #12]	@ (8000520 <uart_set_baudrate+0x24>)
 8000514:	609a      	str	r2, [r3, #8]

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40004400 	.word	0x40004400

08000524 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periphclock, uint32_t baudrate)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
	return ((periphclock + (baudrate/2U))/baudrate);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	085a      	lsrs	r2, r3, #1
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	441a      	add	r2, r3
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	fbb2 f3f3 	udiv	r3, r2, r3
 800053c:	b29b      	uxth	r3, r3
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800054c:	480d      	ldr	r0, [pc, #52]	@ (8000584 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000550:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <LoopForever+0x6>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	@ (800058c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <LoopForever+0xe>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	@ (8000594 <LoopForever+0x12>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	@ (8000598 <LoopForever+0x16>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057a:	f000 f97d 	bl	8000878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff fe9d 	bl	80002bc <main>

08000582 <LoopForever>:

LoopForever:
  b LoopForever
 8000582:	e7fe      	b.n	8000582 <LoopForever>
  ldr   r0, =_estack
 8000584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000590:	08001478 	.word	0x08001478
  ldr r2, =_sbss
 8000594:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000598:	200001c8 	.word	0x200001c8

0800059c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC_IRQHandler>
	...

080005a0 <std>:
 80005a0:	2300      	movs	r3, #0
 80005a2:	b510      	push	{r4, lr}
 80005a4:	4604      	mov	r4, r0
 80005a6:	e9c0 3300 	strd	r3, r3, [r0]
 80005aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ae:	6083      	str	r3, [r0, #8]
 80005b0:	8181      	strh	r1, [r0, #12]
 80005b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80005b4:	81c2      	strh	r2, [r0, #14]
 80005b6:	6183      	str	r3, [r0, #24]
 80005b8:	4619      	mov	r1, r3
 80005ba:	2208      	movs	r2, #8
 80005bc:	305c      	adds	r0, #92	@ 0x5c
 80005be:	f000 f906 	bl	80007ce <memset>
 80005c2:	4b0d      	ldr	r3, [pc, #52]	@ (80005f8 <std+0x58>)
 80005c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80005c6:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <std+0x5c>)
 80005c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <std+0x60>)
 80005cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <std+0x64>)
 80005d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80005d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <std+0x68>)
 80005d4:	6224      	str	r4, [r4, #32]
 80005d6:	429c      	cmp	r4, r3
 80005d8:	d006      	beq.n	80005e8 <std+0x48>
 80005da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80005de:	4294      	cmp	r4, r2
 80005e0:	d002      	beq.n	80005e8 <std+0x48>
 80005e2:	33d0      	adds	r3, #208	@ 0xd0
 80005e4:	429c      	cmp	r4, r3
 80005e6:	d105      	bne.n	80005f4 <std+0x54>
 80005e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80005ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f0:	f000 b966 	b.w	80008c0 <__retarget_lock_init_recursive>
 80005f4:	bd10      	pop	{r4, pc}
 80005f6:	bf00      	nop
 80005f8:	08000749 	.word	0x08000749
 80005fc:	0800076b 	.word	0x0800076b
 8000600:	080007a3 	.word	0x080007a3
 8000604:	080007c7 	.word	0x080007c7
 8000608:	2000007c 	.word	0x2000007c

0800060c <stdio_exit_handler>:
 800060c:	4a02      	ldr	r2, [pc, #8]	@ (8000618 <stdio_exit_handler+0xc>)
 800060e:	4903      	ldr	r1, [pc, #12]	@ (800061c <stdio_exit_handler+0x10>)
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <stdio_exit_handler+0x14>)
 8000612:	f000 b869 	b.w	80006e8 <_fwalk_sglue>
 8000616:	bf00      	nop
 8000618:	20000000 	.word	0x20000000
 800061c:	0800115d 	.word	0x0800115d
 8000620:	20000010 	.word	0x20000010

08000624 <cleanup_stdio>:
 8000624:	6841      	ldr	r1, [r0, #4]
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <cleanup_stdio+0x34>)
 8000628:	4299      	cmp	r1, r3
 800062a:	b510      	push	{r4, lr}
 800062c:	4604      	mov	r4, r0
 800062e:	d001      	beq.n	8000634 <cleanup_stdio+0x10>
 8000630:	f000 fd94 	bl	800115c <_fflush_r>
 8000634:	68a1      	ldr	r1, [r4, #8]
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <cleanup_stdio+0x38>)
 8000638:	4299      	cmp	r1, r3
 800063a:	d002      	beq.n	8000642 <cleanup_stdio+0x1e>
 800063c:	4620      	mov	r0, r4
 800063e:	f000 fd8d 	bl	800115c <_fflush_r>
 8000642:	68e1      	ldr	r1, [r4, #12]
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <cleanup_stdio+0x3c>)
 8000646:	4299      	cmp	r1, r3
 8000648:	d004      	beq.n	8000654 <cleanup_stdio+0x30>
 800064a:	4620      	mov	r0, r4
 800064c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000650:	f000 bd84 	b.w	800115c <_fflush_r>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	bf00      	nop
 8000658:	2000007c 	.word	0x2000007c
 800065c:	200000e4 	.word	0x200000e4
 8000660:	2000014c 	.word	0x2000014c

08000664 <global_stdio_init.part.0>:
 8000664:	b510      	push	{r4, lr}
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <global_stdio_init.part.0+0x30>)
 8000668:	4c0b      	ldr	r4, [pc, #44]	@ (8000698 <global_stdio_init.part.0+0x34>)
 800066a:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <global_stdio_init.part.0+0x38>)
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	4620      	mov	r0, r4
 8000670:	2200      	movs	r2, #0
 8000672:	2104      	movs	r1, #4
 8000674:	f7ff ff94 	bl	80005a0 <std>
 8000678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800067c:	2201      	movs	r2, #1
 800067e:	2109      	movs	r1, #9
 8000680:	f7ff ff8e 	bl	80005a0 <std>
 8000684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000688:	2202      	movs	r2, #2
 800068a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800068e:	2112      	movs	r1, #18
 8000690:	f7ff bf86 	b.w	80005a0 <std>
 8000694:	200001b4 	.word	0x200001b4
 8000698:	2000007c 	.word	0x2000007c
 800069c:	0800060d 	.word	0x0800060d

080006a0 <__sfp_lock_acquire>:
 80006a0:	4801      	ldr	r0, [pc, #4]	@ (80006a8 <__sfp_lock_acquire+0x8>)
 80006a2:	f000 b90e 	b.w	80008c2 <__retarget_lock_acquire_recursive>
 80006a6:	bf00      	nop
 80006a8:	200001bd 	.word	0x200001bd

080006ac <__sfp_lock_release>:
 80006ac:	4801      	ldr	r0, [pc, #4]	@ (80006b4 <__sfp_lock_release+0x8>)
 80006ae:	f000 b909 	b.w	80008c4 <__retarget_lock_release_recursive>
 80006b2:	bf00      	nop
 80006b4:	200001bd 	.word	0x200001bd

080006b8 <__sinit>:
 80006b8:	b510      	push	{r4, lr}
 80006ba:	4604      	mov	r4, r0
 80006bc:	f7ff fff0 	bl	80006a0 <__sfp_lock_acquire>
 80006c0:	6a23      	ldr	r3, [r4, #32]
 80006c2:	b11b      	cbz	r3, 80006cc <__sinit+0x14>
 80006c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c8:	f7ff bff0 	b.w	80006ac <__sfp_lock_release>
 80006cc:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <__sinit+0x28>)
 80006ce:	6223      	str	r3, [r4, #32]
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__sinit+0x2c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f5      	bne.n	80006c4 <__sinit+0xc>
 80006d8:	f7ff ffc4 	bl	8000664 <global_stdio_init.part.0>
 80006dc:	e7f2      	b.n	80006c4 <__sinit+0xc>
 80006de:	bf00      	nop
 80006e0:	08000625 	.word	0x08000625
 80006e4:	200001b4 	.word	0x200001b4

080006e8 <_fwalk_sglue>:
 80006e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006ec:	4607      	mov	r7, r0
 80006ee:	4688      	mov	r8, r1
 80006f0:	4614      	mov	r4, r2
 80006f2:	2600      	movs	r6, #0
 80006f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006f8:	f1b9 0901 	subs.w	r9, r9, #1
 80006fc:	d505      	bpl.n	800070a <_fwalk_sglue+0x22>
 80006fe:	6824      	ldr	r4, [r4, #0]
 8000700:	2c00      	cmp	r4, #0
 8000702:	d1f7      	bne.n	80006f4 <_fwalk_sglue+0xc>
 8000704:	4630      	mov	r0, r6
 8000706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800070a:	89ab      	ldrh	r3, [r5, #12]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d907      	bls.n	8000720 <_fwalk_sglue+0x38>
 8000710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000714:	3301      	adds	r3, #1
 8000716:	d003      	beq.n	8000720 <_fwalk_sglue+0x38>
 8000718:	4629      	mov	r1, r5
 800071a:	4638      	mov	r0, r7
 800071c:	47c0      	blx	r8
 800071e:	4306      	orrs	r6, r0
 8000720:	3568      	adds	r5, #104	@ 0x68
 8000722:	e7e9      	b.n	80006f8 <_fwalk_sglue+0x10>

08000724 <iprintf>:
 8000724:	b40f      	push	{r0, r1, r2, r3}
 8000726:	b507      	push	{r0, r1, r2, lr}
 8000728:	4906      	ldr	r1, [pc, #24]	@ (8000744 <iprintf+0x20>)
 800072a:	ab04      	add	r3, sp, #16
 800072c:	6808      	ldr	r0, [r1, #0]
 800072e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000732:	6881      	ldr	r1, [r0, #8]
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	f000 f9e9 	bl	8000b0c <_vfiprintf_r>
 800073a:	b003      	add	sp, #12
 800073c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000740:	b004      	add	sp, #16
 8000742:	4770      	bx	lr
 8000744:	2000000c 	.word	0x2000000c

08000748 <__sread>:
 8000748:	b510      	push	{r4, lr}
 800074a:	460c      	mov	r4, r1
 800074c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000750:	f000 f868 	bl	8000824 <_read_r>
 8000754:	2800      	cmp	r0, #0
 8000756:	bfab      	itete	ge
 8000758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800075a:	89a3      	ldrhlt	r3, [r4, #12]
 800075c:	181b      	addge	r3, r3, r0
 800075e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000762:	bfac      	ite	ge
 8000764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000766:	81a3      	strhlt	r3, [r4, #12]
 8000768:	bd10      	pop	{r4, pc}

0800076a <__swrite>:
 800076a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800076e:	461f      	mov	r7, r3
 8000770:	898b      	ldrh	r3, [r1, #12]
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	4605      	mov	r5, r0
 8000776:	460c      	mov	r4, r1
 8000778:	4616      	mov	r6, r2
 800077a:	d505      	bpl.n	8000788 <__swrite+0x1e>
 800077c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000780:	2302      	movs	r3, #2
 8000782:	2200      	movs	r2, #0
 8000784:	f000 f83c 	bl	8000800 <_lseek_r>
 8000788:	89a3      	ldrh	r3, [r4, #12]
 800078a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800078e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000792:	81a3      	strh	r3, [r4, #12]
 8000794:	4632      	mov	r2, r6
 8000796:	463b      	mov	r3, r7
 8000798:	4628      	mov	r0, r5
 800079a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800079e:	f000 b853 	b.w	8000848 <_write_r>

080007a2 <__sseek>:
 80007a2:	b510      	push	{r4, lr}
 80007a4:	460c      	mov	r4, r1
 80007a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007aa:	f000 f829 	bl	8000800 <_lseek_r>
 80007ae:	1c43      	adds	r3, r0, #1
 80007b0:	89a3      	ldrh	r3, [r4, #12]
 80007b2:	bf15      	itete	ne
 80007b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007be:	81a3      	strheq	r3, [r4, #12]
 80007c0:	bf18      	it	ne
 80007c2:	81a3      	strhne	r3, [r4, #12]
 80007c4:	bd10      	pop	{r4, pc}

080007c6 <__sclose>:
 80007c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007ca:	f000 b809 	b.w	80007e0 <_close_r>

080007ce <memset>:
 80007ce:	4402      	add	r2, r0
 80007d0:	4603      	mov	r3, r0
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d100      	bne.n	80007d8 <memset+0xa>
 80007d6:	4770      	bx	lr
 80007d8:	f803 1b01 	strb.w	r1, [r3], #1
 80007dc:	e7f9      	b.n	80007d2 <memset+0x4>
	...

080007e0 <_close_r>:
 80007e0:	b538      	push	{r3, r4, r5, lr}
 80007e2:	4d06      	ldr	r5, [pc, #24]	@ (80007fc <_close_r+0x1c>)
 80007e4:	2300      	movs	r3, #0
 80007e6:	4604      	mov	r4, r0
 80007e8:	4608      	mov	r0, r1
 80007ea:	602b      	str	r3, [r5, #0]
 80007ec:	f7ff fdad 	bl	800034a <_close>
 80007f0:	1c43      	adds	r3, r0, #1
 80007f2:	d102      	bne.n	80007fa <_close_r+0x1a>
 80007f4:	682b      	ldr	r3, [r5, #0]
 80007f6:	b103      	cbz	r3, 80007fa <_close_r+0x1a>
 80007f8:	6023      	str	r3, [r4, #0]
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
 80007fc:	200001b8 	.word	0x200001b8

08000800 <_lseek_r>:
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4d07      	ldr	r5, [pc, #28]	@ (8000820 <_lseek_r+0x20>)
 8000804:	4604      	mov	r4, r0
 8000806:	4608      	mov	r0, r1
 8000808:	4611      	mov	r1, r2
 800080a:	2200      	movs	r2, #0
 800080c:	602a      	str	r2, [r5, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	f7ff fdc2 	bl	8000398 <_lseek>
 8000814:	1c43      	adds	r3, r0, #1
 8000816:	d102      	bne.n	800081e <_lseek_r+0x1e>
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	b103      	cbz	r3, 800081e <_lseek_r+0x1e>
 800081c:	6023      	str	r3, [r4, #0]
 800081e:	bd38      	pop	{r3, r4, r5, pc}
 8000820:	200001b8 	.word	0x200001b8

08000824 <_read_r>:
 8000824:	b538      	push	{r3, r4, r5, lr}
 8000826:	4d07      	ldr	r5, [pc, #28]	@ (8000844 <_read_r+0x20>)
 8000828:	4604      	mov	r4, r0
 800082a:	4608      	mov	r0, r1
 800082c:	4611      	mov	r1, r2
 800082e:	2200      	movs	r2, #0
 8000830:	602a      	str	r2, [r5, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	f7ff fd50 	bl	80002d8 <_read>
 8000838:	1c43      	adds	r3, r0, #1
 800083a:	d102      	bne.n	8000842 <_read_r+0x1e>
 800083c:	682b      	ldr	r3, [r5, #0]
 800083e:	b103      	cbz	r3, 8000842 <_read_r+0x1e>
 8000840:	6023      	str	r3, [r4, #0]
 8000842:	bd38      	pop	{r3, r4, r5, pc}
 8000844:	200001b8 	.word	0x200001b8

08000848 <_write_r>:
 8000848:	b538      	push	{r3, r4, r5, lr}
 800084a:	4d07      	ldr	r5, [pc, #28]	@ (8000868 <_write_r+0x20>)
 800084c:	4604      	mov	r4, r0
 800084e:	4608      	mov	r0, r1
 8000850:	4611      	mov	r1, r2
 8000852:	2200      	movs	r2, #0
 8000854:	602a      	str	r2, [r5, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	f7ff fd5b 	bl	8000312 <_write>
 800085c:	1c43      	adds	r3, r0, #1
 800085e:	d102      	bne.n	8000866 <_write_r+0x1e>
 8000860:	682b      	ldr	r3, [r5, #0]
 8000862:	b103      	cbz	r3, 8000866 <_write_r+0x1e>
 8000864:	6023      	str	r3, [r4, #0]
 8000866:	bd38      	pop	{r3, r4, r5, pc}
 8000868:	200001b8 	.word	0x200001b8

0800086c <__errno>:
 800086c:	4b01      	ldr	r3, [pc, #4]	@ (8000874 <__errno+0x8>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	2000000c 	.word	0x2000000c

08000878 <__libc_init_array>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	4d0d      	ldr	r5, [pc, #52]	@ (80008b0 <__libc_init_array+0x38>)
 800087c:	4c0d      	ldr	r4, [pc, #52]	@ (80008b4 <__libc_init_array+0x3c>)
 800087e:	1b64      	subs	r4, r4, r5
 8000880:	10a4      	asrs	r4, r4, #2
 8000882:	2600      	movs	r6, #0
 8000884:	42a6      	cmp	r6, r4
 8000886:	d109      	bne.n	800089c <__libc_init_array+0x24>
 8000888:	4d0b      	ldr	r5, [pc, #44]	@ (80008b8 <__libc_init_array+0x40>)
 800088a:	4c0c      	ldr	r4, [pc, #48]	@ (80008bc <__libc_init_array+0x44>)
 800088c:	f000 fdb6 	bl	80013fc <_init>
 8000890:	1b64      	subs	r4, r4, r5
 8000892:	10a4      	asrs	r4, r4, #2
 8000894:	2600      	movs	r6, #0
 8000896:	42a6      	cmp	r6, r4
 8000898:	d105      	bne.n	80008a6 <__libc_init_array+0x2e>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a0:	4798      	blx	r3
 80008a2:	3601      	adds	r6, #1
 80008a4:	e7ee      	b.n	8000884 <__libc_init_array+0xc>
 80008a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008aa:	4798      	blx	r3
 80008ac:	3601      	adds	r6, #1
 80008ae:	e7f2      	b.n	8000896 <__libc_init_array+0x1e>
 80008b0:	08001470 	.word	0x08001470
 80008b4:	08001470 	.word	0x08001470
 80008b8:	08001470 	.word	0x08001470
 80008bc:	08001474 	.word	0x08001474

080008c0 <__retarget_lock_init_recursive>:
 80008c0:	4770      	bx	lr

080008c2 <__retarget_lock_acquire_recursive>:
 80008c2:	4770      	bx	lr

080008c4 <__retarget_lock_release_recursive>:
 80008c4:	4770      	bx	lr
	...

080008c8 <_free_r>:
 80008c8:	b538      	push	{r3, r4, r5, lr}
 80008ca:	4605      	mov	r5, r0
 80008cc:	2900      	cmp	r1, #0
 80008ce:	d041      	beq.n	8000954 <_free_r+0x8c>
 80008d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008d4:	1f0c      	subs	r4, r1, #4
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bfb8      	it	lt
 80008da:	18e4      	addlt	r4, r4, r3
 80008dc:	f000 f8e0 	bl	8000aa0 <__malloc_lock>
 80008e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000958 <_free_r+0x90>)
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	b933      	cbnz	r3, 80008f4 <_free_r+0x2c>
 80008e6:	6063      	str	r3, [r4, #4]
 80008e8:	6014      	str	r4, [r2, #0]
 80008ea:	4628      	mov	r0, r5
 80008ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008f0:	f000 b8dc 	b.w	8000aac <__malloc_unlock>
 80008f4:	42a3      	cmp	r3, r4
 80008f6:	d908      	bls.n	800090a <_free_r+0x42>
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	1821      	adds	r1, r4, r0
 80008fc:	428b      	cmp	r3, r1
 80008fe:	bf01      	itttt	eq
 8000900:	6819      	ldreq	r1, [r3, #0]
 8000902:	685b      	ldreq	r3, [r3, #4]
 8000904:	1809      	addeq	r1, r1, r0
 8000906:	6021      	streq	r1, [r4, #0]
 8000908:	e7ed      	b.n	80008e6 <_free_r+0x1e>
 800090a:	461a      	mov	r2, r3
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	b10b      	cbz	r3, 8000914 <_free_r+0x4c>
 8000910:	42a3      	cmp	r3, r4
 8000912:	d9fa      	bls.n	800090a <_free_r+0x42>
 8000914:	6811      	ldr	r1, [r2, #0]
 8000916:	1850      	adds	r0, r2, r1
 8000918:	42a0      	cmp	r0, r4
 800091a:	d10b      	bne.n	8000934 <_free_r+0x6c>
 800091c:	6820      	ldr	r0, [r4, #0]
 800091e:	4401      	add	r1, r0
 8000920:	1850      	adds	r0, r2, r1
 8000922:	4283      	cmp	r3, r0
 8000924:	6011      	str	r1, [r2, #0]
 8000926:	d1e0      	bne.n	80008ea <_free_r+0x22>
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	6053      	str	r3, [r2, #4]
 800092e:	4408      	add	r0, r1
 8000930:	6010      	str	r0, [r2, #0]
 8000932:	e7da      	b.n	80008ea <_free_r+0x22>
 8000934:	d902      	bls.n	800093c <_free_r+0x74>
 8000936:	230c      	movs	r3, #12
 8000938:	602b      	str	r3, [r5, #0]
 800093a:	e7d6      	b.n	80008ea <_free_r+0x22>
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	1821      	adds	r1, r4, r0
 8000940:	428b      	cmp	r3, r1
 8000942:	bf04      	itt	eq
 8000944:	6819      	ldreq	r1, [r3, #0]
 8000946:	685b      	ldreq	r3, [r3, #4]
 8000948:	6063      	str	r3, [r4, #4]
 800094a:	bf04      	itt	eq
 800094c:	1809      	addeq	r1, r1, r0
 800094e:	6021      	streq	r1, [r4, #0]
 8000950:	6054      	str	r4, [r2, #4]
 8000952:	e7ca      	b.n	80008ea <_free_r+0x22>
 8000954:	bd38      	pop	{r3, r4, r5, pc}
 8000956:	bf00      	nop
 8000958:	200001c4 	.word	0x200001c4

0800095c <sbrk_aligned>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4e0f      	ldr	r6, [pc, #60]	@ (800099c <sbrk_aligned+0x40>)
 8000960:	460c      	mov	r4, r1
 8000962:	6831      	ldr	r1, [r6, #0]
 8000964:	4605      	mov	r5, r0
 8000966:	b911      	cbnz	r1, 800096e <sbrk_aligned+0x12>
 8000968:	f000 fcb4 	bl	80012d4 <_sbrk_r>
 800096c:	6030      	str	r0, [r6, #0]
 800096e:	4621      	mov	r1, r4
 8000970:	4628      	mov	r0, r5
 8000972:	f000 fcaf 	bl	80012d4 <_sbrk_r>
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	d103      	bne.n	8000982 <sbrk_aligned+0x26>
 800097a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800097e:	4620      	mov	r0, r4
 8000980:	bd70      	pop	{r4, r5, r6, pc}
 8000982:	1cc4      	adds	r4, r0, #3
 8000984:	f024 0403 	bic.w	r4, r4, #3
 8000988:	42a0      	cmp	r0, r4
 800098a:	d0f8      	beq.n	800097e <sbrk_aligned+0x22>
 800098c:	1a21      	subs	r1, r4, r0
 800098e:	4628      	mov	r0, r5
 8000990:	f000 fca0 	bl	80012d4 <_sbrk_r>
 8000994:	3001      	adds	r0, #1
 8000996:	d1f2      	bne.n	800097e <sbrk_aligned+0x22>
 8000998:	e7ef      	b.n	800097a <sbrk_aligned+0x1e>
 800099a:	bf00      	nop
 800099c:	200001c0 	.word	0x200001c0

080009a0 <_malloc_r>:
 80009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a4:	1ccd      	adds	r5, r1, #3
 80009a6:	f025 0503 	bic.w	r5, r5, #3
 80009aa:	3508      	adds	r5, #8
 80009ac:	2d0c      	cmp	r5, #12
 80009ae:	bf38      	it	cc
 80009b0:	250c      	movcc	r5, #12
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	4606      	mov	r6, r0
 80009b6:	db01      	blt.n	80009bc <_malloc_r+0x1c>
 80009b8:	42a9      	cmp	r1, r5
 80009ba:	d904      	bls.n	80009c6 <_malloc_r+0x26>
 80009bc:	230c      	movs	r3, #12
 80009be:	6033      	str	r3, [r6, #0]
 80009c0:	2000      	movs	r0, #0
 80009c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a9c <_malloc_r+0xfc>
 80009ca:	f000 f869 	bl	8000aa0 <__malloc_lock>
 80009ce:	f8d8 3000 	ldr.w	r3, [r8]
 80009d2:	461c      	mov	r4, r3
 80009d4:	bb44      	cbnz	r4, 8000a28 <_malloc_r+0x88>
 80009d6:	4629      	mov	r1, r5
 80009d8:	4630      	mov	r0, r6
 80009da:	f7ff ffbf 	bl	800095c <sbrk_aligned>
 80009de:	1c43      	adds	r3, r0, #1
 80009e0:	4604      	mov	r4, r0
 80009e2:	d158      	bne.n	8000a96 <_malloc_r+0xf6>
 80009e4:	f8d8 4000 	ldr.w	r4, [r8]
 80009e8:	4627      	mov	r7, r4
 80009ea:	2f00      	cmp	r7, #0
 80009ec:	d143      	bne.n	8000a76 <_malloc_r+0xd6>
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d04b      	beq.n	8000a8a <_malloc_r+0xea>
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	4639      	mov	r1, r7
 80009f6:	4630      	mov	r0, r6
 80009f8:	eb04 0903 	add.w	r9, r4, r3
 80009fc:	f000 fc6a 	bl	80012d4 <_sbrk_r>
 8000a00:	4581      	cmp	r9, r0
 8000a02:	d142      	bne.n	8000a8a <_malloc_r+0xea>
 8000a04:	6821      	ldr	r1, [r4, #0]
 8000a06:	1a6d      	subs	r5, r5, r1
 8000a08:	4629      	mov	r1, r5
 8000a0a:	4630      	mov	r0, r6
 8000a0c:	f7ff ffa6 	bl	800095c <sbrk_aligned>
 8000a10:	3001      	adds	r0, #1
 8000a12:	d03a      	beq.n	8000a8a <_malloc_r+0xea>
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	442b      	add	r3, r5
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	bb62      	cbnz	r2, 8000a7c <_malloc_r+0xdc>
 8000a22:	f8c8 7000 	str.w	r7, [r8]
 8000a26:	e00f      	b.n	8000a48 <_malloc_r+0xa8>
 8000a28:	6822      	ldr	r2, [r4, #0]
 8000a2a:	1b52      	subs	r2, r2, r5
 8000a2c:	d420      	bmi.n	8000a70 <_malloc_r+0xd0>
 8000a2e:	2a0b      	cmp	r2, #11
 8000a30:	d917      	bls.n	8000a62 <_malloc_r+0xc2>
 8000a32:	1961      	adds	r1, r4, r5
 8000a34:	42a3      	cmp	r3, r4
 8000a36:	6025      	str	r5, [r4, #0]
 8000a38:	bf18      	it	ne
 8000a3a:	6059      	strne	r1, [r3, #4]
 8000a3c:	6863      	ldr	r3, [r4, #4]
 8000a3e:	bf08      	it	eq
 8000a40:	f8c8 1000 	streq.w	r1, [r8]
 8000a44:	5162      	str	r2, [r4, r5]
 8000a46:	604b      	str	r3, [r1, #4]
 8000a48:	4630      	mov	r0, r6
 8000a4a:	f000 f82f 	bl	8000aac <__malloc_unlock>
 8000a4e:	f104 000b 	add.w	r0, r4, #11
 8000a52:	1d23      	adds	r3, r4, #4
 8000a54:	f020 0007 	bic.w	r0, r0, #7
 8000a58:	1ac2      	subs	r2, r0, r3
 8000a5a:	bf1c      	itt	ne
 8000a5c:	1a1b      	subne	r3, r3, r0
 8000a5e:	50a3      	strne	r3, [r4, r2]
 8000a60:	e7af      	b.n	80009c2 <_malloc_r+0x22>
 8000a62:	6862      	ldr	r2, [r4, #4]
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	bf0c      	ite	eq
 8000a68:	f8c8 2000 	streq.w	r2, [r8]
 8000a6c:	605a      	strne	r2, [r3, #4]
 8000a6e:	e7eb      	b.n	8000a48 <_malloc_r+0xa8>
 8000a70:	4623      	mov	r3, r4
 8000a72:	6864      	ldr	r4, [r4, #4]
 8000a74:	e7ae      	b.n	80009d4 <_malloc_r+0x34>
 8000a76:	463c      	mov	r4, r7
 8000a78:	687f      	ldr	r7, [r7, #4]
 8000a7a:	e7b6      	b.n	80009ea <_malloc_r+0x4a>
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	42a3      	cmp	r3, r4
 8000a82:	d1fb      	bne.n	8000a7c <_malloc_r+0xdc>
 8000a84:	2300      	movs	r3, #0
 8000a86:	6053      	str	r3, [r2, #4]
 8000a88:	e7de      	b.n	8000a48 <_malloc_r+0xa8>
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	6033      	str	r3, [r6, #0]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	f000 f80c 	bl	8000aac <__malloc_unlock>
 8000a94:	e794      	b.n	80009c0 <_malloc_r+0x20>
 8000a96:	6005      	str	r5, [r0, #0]
 8000a98:	e7d6      	b.n	8000a48 <_malloc_r+0xa8>
 8000a9a:	bf00      	nop
 8000a9c:	200001c4 	.word	0x200001c4

08000aa0 <__malloc_lock>:
 8000aa0:	4801      	ldr	r0, [pc, #4]	@ (8000aa8 <__malloc_lock+0x8>)
 8000aa2:	f7ff bf0e 	b.w	80008c2 <__retarget_lock_acquire_recursive>
 8000aa6:	bf00      	nop
 8000aa8:	200001bc 	.word	0x200001bc

08000aac <__malloc_unlock>:
 8000aac:	4801      	ldr	r0, [pc, #4]	@ (8000ab4 <__malloc_unlock+0x8>)
 8000aae:	f7ff bf09 	b.w	80008c4 <__retarget_lock_release_recursive>
 8000ab2:	bf00      	nop
 8000ab4:	200001bc 	.word	0x200001bc

08000ab8 <__sfputc_r>:
 8000ab8:	6893      	ldr	r3, [r2, #8]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	b410      	push	{r4}
 8000ac0:	6093      	str	r3, [r2, #8]
 8000ac2:	da08      	bge.n	8000ad6 <__sfputc_r+0x1e>
 8000ac4:	6994      	ldr	r4, [r2, #24]
 8000ac6:	42a3      	cmp	r3, r4
 8000ac8:	db01      	blt.n	8000ace <__sfputc_r+0x16>
 8000aca:	290a      	cmp	r1, #10
 8000acc:	d103      	bne.n	8000ad6 <__sfputc_r+0x1e>
 8000ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ad2:	f000 bb6b 	b.w	80011ac <__swbuf_r>
 8000ad6:	6813      	ldr	r3, [r2, #0]
 8000ad8:	1c58      	adds	r0, r3, #1
 8000ada:	6010      	str	r0, [r2, #0]
 8000adc:	7019      	strb	r1, [r3, #0]
 8000ade:	4608      	mov	r0, r1
 8000ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <__sfputs_r>:
 8000ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae8:	4606      	mov	r6, r0
 8000aea:	460f      	mov	r7, r1
 8000aec:	4614      	mov	r4, r2
 8000aee:	18d5      	adds	r5, r2, r3
 8000af0:	42ac      	cmp	r4, r5
 8000af2:	d101      	bne.n	8000af8 <__sfputs_r+0x12>
 8000af4:	2000      	movs	r0, #0
 8000af6:	e007      	b.n	8000b08 <__sfputs_r+0x22>
 8000af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000afc:	463a      	mov	r2, r7
 8000afe:	4630      	mov	r0, r6
 8000b00:	f7ff ffda 	bl	8000ab8 <__sfputc_r>
 8000b04:	1c43      	adds	r3, r0, #1
 8000b06:	d1f3      	bne.n	8000af0 <__sfputs_r+0xa>
 8000b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b0c <_vfiprintf_r>:
 8000b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b10:	460d      	mov	r5, r1
 8000b12:	b09d      	sub	sp, #116	@ 0x74
 8000b14:	4614      	mov	r4, r2
 8000b16:	4698      	mov	r8, r3
 8000b18:	4606      	mov	r6, r0
 8000b1a:	b118      	cbz	r0, 8000b24 <_vfiprintf_r+0x18>
 8000b1c:	6a03      	ldr	r3, [r0, #32]
 8000b1e:	b90b      	cbnz	r3, 8000b24 <_vfiprintf_r+0x18>
 8000b20:	f7ff fdca 	bl	80006b8 <__sinit>
 8000b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b26:	07d9      	lsls	r1, r3, #31
 8000b28:	d405      	bmi.n	8000b36 <_vfiprintf_r+0x2a>
 8000b2a:	89ab      	ldrh	r3, [r5, #12]
 8000b2c:	059a      	lsls	r2, r3, #22
 8000b2e:	d402      	bmi.n	8000b36 <_vfiprintf_r+0x2a>
 8000b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b32:	f7ff fec6 	bl	80008c2 <__retarget_lock_acquire_recursive>
 8000b36:	89ab      	ldrh	r3, [r5, #12]
 8000b38:	071b      	lsls	r3, r3, #28
 8000b3a:	d501      	bpl.n	8000b40 <_vfiprintf_r+0x34>
 8000b3c:	692b      	ldr	r3, [r5, #16]
 8000b3e:	b99b      	cbnz	r3, 8000b68 <_vfiprintf_r+0x5c>
 8000b40:	4629      	mov	r1, r5
 8000b42:	4630      	mov	r0, r6
 8000b44:	f000 fb70 	bl	8001228 <__swsetup_r>
 8000b48:	b170      	cbz	r0, 8000b68 <_vfiprintf_r+0x5c>
 8000b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b4c:	07dc      	lsls	r4, r3, #31
 8000b4e:	d504      	bpl.n	8000b5a <_vfiprintf_r+0x4e>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b54:	b01d      	add	sp, #116	@ 0x74
 8000b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b5a:	89ab      	ldrh	r3, [r5, #12]
 8000b5c:	0598      	lsls	r0, r3, #22
 8000b5e:	d4f7      	bmi.n	8000b50 <_vfiprintf_r+0x44>
 8000b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b62:	f7ff feaf 	bl	80008c4 <__retarget_lock_release_recursive>
 8000b66:	e7f3      	b.n	8000b50 <_vfiprintf_r+0x44>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b6c:	2320      	movs	r3, #32
 8000b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b76:	2330      	movs	r3, #48	@ 0x30
 8000b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000d28 <_vfiprintf_r+0x21c>
 8000b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b80:	f04f 0901 	mov.w	r9, #1
 8000b84:	4623      	mov	r3, r4
 8000b86:	469a      	mov	sl, r3
 8000b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b8c:	b10a      	cbz	r2, 8000b92 <_vfiprintf_r+0x86>
 8000b8e:	2a25      	cmp	r2, #37	@ 0x25
 8000b90:	d1f9      	bne.n	8000b86 <_vfiprintf_r+0x7a>
 8000b92:	ebba 0b04 	subs.w	fp, sl, r4
 8000b96:	d00b      	beq.n	8000bb0 <_vfiprintf_r+0xa4>
 8000b98:	465b      	mov	r3, fp
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	4629      	mov	r1, r5
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	f7ff ffa1 	bl	8000ae6 <__sfputs_r>
 8000ba4:	3001      	adds	r0, #1
 8000ba6:	f000 80a7 	beq.w	8000cf8 <_vfiprintf_r+0x1ec>
 8000baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000bac:	445a      	add	r2, fp
 8000bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8000bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 809f 	beq.w	8000cf8 <_vfiprintf_r+0x1ec>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bc4:	f10a 0a01 	add.w	sl, sl, #1
 8000bc8:	9304      	str	r3, [sp, #16]
 8000bca:	9307      	str	r3, [sp, #28]
 8000bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8000bd2:	4654      	mov	r4, sl
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bda:	4853      	ldr	r0, [pc, #332]	@ (8000d28 <_vfiprintf_r+0x21c>)
 8000bdc:	f7ff fb00 	bl	80001e0 <memchr>
 8000be0:	9a04      	ldr	r2, [sp, #16]
 8000be2:	b9d8      	cbnz	r0, 8000c1c <_vfiprintf_r+0x110>
 8000be4:	06d1      	lsls	r1, r2, #27
 8000be6:	bf44      	itt	mi
 8000be8:	2320      	movmi	r3, #32
 8000bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bee:	0713      	lsls	r3, r2, #28
 8000bf0:	bf44      	itt	mi
 8000bf2:	232b      	movmi	r3, #43	@ 0x2b
 8000bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8000bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bfe:	d015      	beq.n	8000c2c <_vfiprintf_r+0x120>
 8000c00:	9a07      	ldr	r2, [sp, #28]
 8000c02:	4654      	mov	r4, sl
 8000c04:	2000      	movs	r0, #0
 8000c06:	f04f 0c0a 	mov.w	ip, #10
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c10:	3b30      	subs	r3, #48	@ 0x30
 8000c12:	2b09      	cmp	r3, #9
 8000c14:	d94b      	bls.n	8000cae <_vfiprintf_r+0x1a2>
 8000c16:	b1b0      	cbz	r0, 8000c46 <_vfiprintf_r+0x13a>
 8000c18:	9207      	str	r2, [sp, #28]
 8000c1a:	e014      	b.n	8000c46 <_vfiprintf_r+0x13a>
 8000c1c:	eba0 0308 	sub.w	r3, r0, r8
 8000c20:	fa09 f303 	lsl.w	r3, r9, r3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	9304      	str	r3, [sp, #16]
 8000c28:	46a2      	mov	sl, r4
 8000c2a:	e7d2      	b.n	8000bd2 <_vfiprintf_r+0xc6>
 8000c2c:	9b03      	ldr	r3, [sp, #12]
 8000c2e:	1d19      	adds	r1, r3, #4
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	9103      	str	r1, [sp, #12]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	bfbb      	ittet	lt
 8000c38:	425b      	neglt	r3, r3
 8000c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8000c3e:	9307      	strge	r3, [sp, #28]
 8000c40:	9307      	strlt	r3, [sp, #28]
 8000c42:	bfb8      	it	lt
 8000c44:	9204      	strlt	r2, [sp, #16]
 8000c46:	7823      	ldrb	r3, [r4, #0]
 8000c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c4a:	d10a      	bne.n	8000c62 <_vfiprintf_r+0x156>
 8000c4c:	7863      	ldrb	r3, [r4, #1]
 8000c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c50:	d132      	bne.n	8000cb8 <_vfiprintf_r+0x1ac>
 8000c52:	9b03      	ldr	r3, [sp, #12]
 8000c54:	1d1a      	adds	r2, r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	9203      	str	r2, [sp, #12]
 8000c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c5e:	3402      	adds	r4, #2
 8000c60:	9305      	str	r3, [sp, #20]
 8000c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000d38 <_vfiprintf_r+0x22c>
 8000c66:	7821      	ldrb	r1, [r4, #0]
 8000c68:	2203      	movs	r2, #3
 8000c6a:	4650      	mov	r0, sl
 8000c6c:	f7ff fab8 	bl	80001e0 <memchr>
 8000c70:	b138      	cbz	r0, 8000c82 <_vfiprintf_r+0x176>
 8000c72:	9b04      	ldr	r3, [sp, #16]
 8000c74:	eba0 000a 	sub.w	r0, r0, sl
 8000c78:	2240      	movs	r2, #64	@ 0x40
 8000c7a:	4082      	lsls	r2, r0
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	3401      	adds	r4, #1
 8000c80:	9304      	str	r3, [sp, #16]
 8000c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c86:	4829      	ldr	r0, [pc, #164]	@ (8000d2c <_vfiprintf_r+0x220>)
 8000c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c8c:	2206      	movs	r2, #6
 8000c8e:	f7ff faa7 	bl	80001e0 <memchr>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d03f      	beq.n	8000d16 <_vfiprintf_r+0x20a>
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <_vfiprintf_r+0x224>)
 8000c98:	bb1b      	cbnz	r3, 8000ce2 <_vfiprintf_r+0x1d6>
 8000c9a:	9b03      	ldr	r3, [sp, #12]
 8000c9c:	3307      	adds	r3, #7
 8000c9e:	f023 0307 	bic.w	r3, r3, #7
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	9303      	str	r3, [sp, #12]
 8000ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ca8:	443b      	add	r3, r7
 8000caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cac:	e76a      	b.n	8000b84 <_vfiprintf_r+0x78>
 8000cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	e7a8      	b.n	8000c0a <_vfiprintf_r+0xfe>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	3401      	adds	r4, #1
 8000cbc:	9305      	str	r3, [sp, #20]
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f04f 0c0a 	mov.w	ip, #10
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cca:	3a30      	subs	r2, #48	@ 0x30
 8000ccc:	2a09      	cmp	r2, #9
 8000cce:	d903      	bls.n	8000cd8 <_vfiprintf_r+0x1cc>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0c6      	beq.n	8000c62 <_vfiprintf_r+0x156>
 8000cd4:	9105      	str	r1, [sp, #20]
 8000cd6:	e7c4      	b.n	8000c62 <_vfiprintf_r+0x156>
 8000cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cdc:	4604      	mov	r4, r0
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e7f0      	b.n	8000cc4 <_vfiprintf_r+0x1b8>
 8000ce2:	ab03      	add	r3, sp, #12
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	462a      	mov	r2, r5
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <_vfiprintf_r+0x228>)
 8000cea:	a904      	add	r1, sp, #16
 8000cec:	4630      	mov	r0, r6
 8000cee:	f3af 8000 	nop.w
 8000cf2:	4607      	mov	r7, r0
 8000cf4:	1c78      	adds	r0, r7, #1
 8000cf6:	d1d6      	bne.n	8000ca6 <_vfiprintf_r+0x19a>
 8000cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cfa:	07d9      	lsls	r1, r3, #31
 8000cfc:	d405      	bmi.n	8000d0a <_vfiprintf_r+0x1fe>
 8000cfe:	89ab      	ldrh	r3, [r5, #12]
 8000d00:	059a      	lsls	r2, r3, #22
 8000d02:	d402      	bmi.n	8000d0a <_vfiprintf_r+0x1fe>
 8000d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d06:	f7ff fddd 	bl	80008c4 <__retarget_lock_release_recursive>
 8000d0a:	89ab      	ldrh	r3, [r5, #12]
 8000d0c:	065b      	lsls	r3, r3, #25
 8000d0e:	f53f af1f 	bmi.w	8000b50 <_vfiprintf_r+0x44>
 8000d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d14:	e71e      	b.n	8000b54 <_vfiprintf_r+0x48>
 8000d16:	ab03      	add	r3, sp, #12
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	462a      	mov	r2, r5
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <_vfiprintf_r+0x228>)
 8000d1e:	a904      	add	r1, sp, #16
 8000d20:	4630      	mov	r0, r6
 8000d22:	f000 f879 	bl	8000e18 <_printf_i>
 8000d26:	e7e4      	b.n	8000cf2 <_vfiprintf_r+0x1e6>
 8000d28:	08001435 	.word	0x08001435
 8000d2c:	0800143f 	.word	0x0800143f
 8000d30:	00000000 	.word	0x00000000
 8000d34:	08000ae7 	.word	0x08000ae7
 8000d38:	0800143b 	.word	0x0800143b

08000d3c <_printf_common>:
 8000d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d40:	4616      	mov	r6, r2
 8000d42:	4698      	mov	r8, r3
 8000d44:	688a      	ldr	r2, [r1, #8]
 8000d46:	690b      	ldr	r3, [r1, #16]
 8000d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	bfb8      	it	lt
 8000d50:	4613      	movlt	r3, r2
 8000d52:	6033      	str	r3, [r6, #0]
 8000d54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d58:	4607      	mov	r7, r0
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	b10a      	cbz	r2, 8000d62 <_printf_common+0x26>
 8000d5e:	3301      	adds	r3, #1
 8000d60:	6033      	str	r3, [r6, #0]
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	0699      	lsls	r1, r3, #26
 8000d66:	bf42      	ittt	mi
 8000d68:	6833      	ldrmi	r3, [r6, #0]
 8000d6a:	3302      	addmi	r3, #2
 8000d6c:	6033      	strmi	r3, [r6, #0]
 8000d6e:	6825      	ldr	r5, [r4, #0]
 8000d70:	f015 0506 	ands.w	r5, r5, #6
 8000d74:	d106      	bne.n	8000d84 <_printf_common+0x48>
 8000d76:	f104 0a19 	add.w	sl, r4, #25
 8000d7a:	68e3      	ldr	r3, [r4, #12]
 8000d7c:	6832      	ldr	r2, [r6, #0]
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	dc26      	bgt.n	8000dd2 <_printf_common+0x96>
 8000d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d88:	6822      	ldr	r2, [r4, #0]
 8000d8a:	3b00      	subs	r3, #0
 8000d8c:	bf18      	it	ne
 8000d8e:	2301      	movne	r3, #1
 8000d90:	0692      	lsls	r2, r2, #26
 8000d92:	d42b      	bmi.n	8000dec <_printf_common+0xb0>
 8000d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d98:	4641      	mov	r1, r8
 8000d9a:	4638      	mov	r0, r7
 8000d9c:	47c8      	blx	r9
 8000d9e:	3001      	adds	r0, #1
 8000da0:	d01e      	beq.n	8000de0 <_printf_common+0xa4>
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	6922      	ldr	r2, [r4, #16]
 8000da6:	f003 0306 	and.w	r3, r3, #6
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf02      	ittt	eq
 8000dae:	68e5      	ldreq	r5, [r4, #12]
 8000db0:	6833      	ldreq	r3, [r6, #0]
 8000db2:	1aed      	subeq	r5, r5, r3
 8000db4:	68a3      	ldr	r3, [r4, #8]
 8000db6:	bf0c      	ite	eq
 8000db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000dbc:	2500      	movne	r5, #0
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bfc4      	itt	gt
 8000dc2:	1a9b      	subgt	r3, r3, r2
 8000dc4:	18ed      	addgt	r5, r5, r3
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	341a      	adds	r4, #26
 8000dca:	42b5      	cmp	r5, r6
 8000dcc:	d11a      	bne.n	8000e04 <_printf_common+0xc8>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	e008      	b.n	8000de4 <_printf_common+0xa8>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	4638      	mov	r0, r7
 8000dda:	47c8      	blx	r9
 8000ddc:	3001      	adds	r0, #1
 8000dde:	d103      	bne.n	8000de8 <_printf_common+0xac>
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	3501      	adds	r5, #1
 8000dea:	e7c6      	b.n	8000d7a <_printf_common+0x3e>
 8000dec:	18e1      	adds	r1, r4, r3
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	2030      	movs	r0, #48	@ 0x30
 8000df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000df6:	4422      	add	r2, r4
 8000df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000dfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e00:	3302      	adds	r3, #2
 8000e02:	e7c7      	b.n	8000d94 <_printf_common+0x58>
 8000e04:	2301      	movs	r3, #1
 8000e06:	4622      	mov	r2, r4
 8000e08:	4641      	mov	r1, r8
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	47c8      	blx	r9
 8000e0e:	3001      	adds	r0, #1
 8000e10:	d0e6      	beq.n	8000de0 <_printf_common+0xa4>
 8000e12:	3601      	adds	r6, #1
 8000e14:	e7d9      	b.n	8000dca <_printf_common+0x8e>
	...

08000e18 <_printf_i>:
 8000e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	7e0f      	ldrb	r7, [r1, #24]
 8000e1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e20:	2f78      	cmp	r7, #120	@ 0x78
 8000e22:	4691      	mov	r9, r2
 8000e24:	4680      	mov	r8, r0
 8000e26:	460c      	mov	r4, r1
 8000e28:	469a      	mov	sl, r3
 8000e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e2e:	d807      	bhi.n	8000e40 <_printf_i+0x28>
 8000e30:	2f62      	cmp	r7, #98	@ 0x62
 8000e32:	d80a      	bhi.n	8000e4a <_printf_i+0x32>
 8000e34:	2f00      	cmp	r7, #0
 8000e36:	f000 80d1 	beq.w	8000fdc <_printf_i+0x1c4>
 8000e3a:	2f58      	cmp	r7, #88	@ 0x58
 8000e3c:	f000 80b8 	beq.w	8000fb0 <_printf_i+0x198>
 8000e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e48:	e03a      	b.n	8000ec0 <_printf_i+0xa8>
 8000e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e4e:	2b15      	cmp	r3, #21
 8000e50:	d8f6      	bhi.n	8000e40 <_printf_i+0x28>
 8000e52:	a101      	add	r1, pc, #4	@ (adr r1, 8000e58 <_printf_i+0x40>)
 8000e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e58:	08000eb1 	.word	0x08000eb1
 8000e5c:	08000ec5 	.word	0x08000ec5
 8000e60:	08000e41 	.word	0x08000e41
 8000e64:	08000e41 	.word	0x08000e41
 8000e68:	08000e41 	.word	0x08000e41
 8000e6c:	08000e41 	.word	0x08000e41
 8000e70:	08000ec5 	.word	0x08000ec5
 8000e74:	08000e41 	.word	0x08000e41
 8000e78:	08000e41 	.word	0x08000e41
 8000e7c:	08000e41 	.word	0x08000e41
 8000e80:	08000e41 	.word	0x08000e41
 8000e84:	08000fc3 	.word	0x08000fc3
 8000e88:	08000eef 	.word	0x08000eef
 8000e8c:	08000f7d 	.word	0x08000f7d
 8000e90:	08000e41 	.word	0x08000e41
 8000e94:	08000e41 	.word	0x08000e41
 8000e98:	08000fe5 	.word	0x08000fe5
 8000e9c:	08000e41 	.word	0x08000e41
 8000ea0:	08000eef 	.word	0x08000eef
 8000ea4:	08000e41 	.word	0x08000e41
 8000ea8:	08000e41 	.word	0x08000e41
 8000eac:	08000f85 	.word	0x08000f85
 8000eb0:	6833      	ldr	r3, [r6, #0]
 8000eb2:	1d1a      	adds	r2, r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6032      	str	r2, [r6, #0]
 8000eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e09c      	b.n	8000ffe <_printf_i+0x1e6>
 8000ec4:	6833      	ldr	r3, [r6, #0]
 8000ec6:	6820      	ldr	r0, [r4, #0]
 8000ec8:	1d19      	adds	r1, r3, #4
 8000eca:	6031      	str	r1, [r6, #0]
 8000ecc:	0606      	lsls	r6, r0, #24
 8000ece:	d501      	bpl.n	8000ed4 <_printf_i+0xbc>
 8000ed0:	681d      	ldr	r5, [r3, #0]
 8000ed2:	e003      	b.n	8000edc <_printf_i+0xc4>
 8000ed4:	0645      	lsls	r5, r0, #25
 8000ed6:	d5fb      	bpl.n	8000ed0 <_printf_i+0xb8>
 8000ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	da03      	bge.n	8000ee8 <_printf_i+0xd0>
 8000ee0:	232d      	movs	r3, #45	@ 0x2d
 8000ee2:	426d      	negs	r5, r5
 8000ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ee8:	4858      	ldr	r0, [pc, #352]	@ (800104c <_printf_i+0x234>)
 8000eea:	230a      	movs	r3, #10
 8000eec:	e011      	b.n	8000f12 <_printf_i+0xfa>
 8000eee:	6821      	ldr	r1, [r4, #0]
 8000ef0:	6833      	ldr	r3, [r6, #0]
 8000ef2:	0608      	lsls	r0, r1, #24
 8000ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ef8:	d402      	bmi.n	8000f00 <_printf_i+0xe8>
 8000efa:	0649      	lsls	r1, r1, #25
 8000efc:	bf48      	it	mi
 8000efe:	b2ad      	uxthmi	r5, r5
 8000f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f02:	4852      	ldr	r0, [pc, #328]	@ (800104c <_printf_i+0x234>)
 8000f04:	6033      	str	r3, [r6, #0]
 8000f06:	bf14      	ite	ne
 8000f08:	230a      	movne	r3, #10
 8000f0a:	2308      	moveq	r3, #8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f12:	6866      	ldr	r6, [r4, #4]
 8000f14:	60a6      	str	r6, [r4, #8]
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	db05      	blt.n	8000f26 <_printf_i+0x10e>
 8000f1a:	6821      	ldr	r1, [r4, #0]
 8000f1c:	432e      	orrs	r6, r5
 8000f1e:	f021 0104 	bic.w	r1, r1, #4
 8000f22:	6021      	str	r1, [r4, #0]
 8000f24:	d04b      	beq.n	8000fbe <_printf_i+0x1a6>
 8000f26:	4616      	mov	r6, r2
 8000f28:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f2c:	fb03 5711 	mls	r7, r3, r1, r5
 8000f30:	5dc7      	ldrb	r7, [r0, r7]
 8000f32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f36:	462f      	mov	r7, r5
 8000f38:	42bb      	cmp	r3, r7
 8000f3a:	460d      	mov	r5, r1
 8000f3c:	d9f4      	bls.n	8000f28 <_printf_i+0x110>
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d10b      	bne.n	8000f5a <_printf_i+0x142>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	07df      	lsls	r7, r3, #31
 8000f46:	d508      	bpl.n	8000f5a <_printf_i+0x142>
 8000f48:	6923      	ldr	r3, [r4, #16]
 8000f4a:	6861      	ldr	r1, [r4, #4]
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	bfde      	ittt	le
 8000f50:	2330      	movle	r3, #48	@ 0x30
 8000f52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f56:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f5a:	1b92      	subs	r2, r2, r6
 8000f5c:	6122      	str	r2, [r4, #16]
 8000f5e:	f8cd a000 	str.w	sl, [sp]
 8000f62:	464b      	mov	r3, r9
 8000f64:	aa03      	add	r2, sp, #12
 8000f66:	4621      	mov	r1, r4
 8000f68:	4640      	mov	r0, r8
 8000f6a:	f7ff fee7 	bl	8000d3c <_printf_common>
 8000f6e:	3001      	adds	r0, #1
 8000f70:	d14a      	bne.n	8001008 <_printf_i+0x1f0>
 8000f72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f76:	b004      	add	sp, #16
 8000f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	f043 0320 	orr.w	r3, r3, #32
 8000f82:	6023      	str	r3, [r4, #0]
 8000f84:	4832      	ldr	r0, [pc, #200]	@ (8001050 <_printf_i+0x238>)
 8000f86:	2778      	movs	r7, #120	@ 0x78
 8000f88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f8c:	6823      	ldr	r3, [r4, #0]
 8000f8e:	6831      	ldr	r1, [r6, #0]
 8000f90:	061f      	lsls	r7, r3, #24
 8000f92:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f96:	d402      	bmi.n	8000f9e <_printf_i+0x186>
 8000f98:	065f      	lsls	r7, r3, #25
 8000f9a:	bf48      	it	mi
 8000f9c:	b2ad      	uxthmi	r5, r5
 8000f9e:	6031      	str	r1, [r6, #0]
 8000fa0:	07d9      	lsls	r1, r3, #31
 8000fa2:	bf44      	itt	mi
 8000fa4:	f043 0320 	orrmi.w	r3, r3, #32
 8000fa8:	6023      	strmi	r3, [r4, #0]
 8000faa:	b11d      	cbz	r5, 8000fb4 <_printf_i+0x19c>
 8000fac:	2310      	movs	r3, #16
 8000fae:	e7ad      	b.n	8000f0c <_printf_i+0xf4>
 8000fb0:	4826      	ldr	r0, [pc, #152]	@ (800104c <_printf_i+0x234>)
 8000fb2:	e7e9      	b.n	8000f88 <_printf_i+0x170>
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	f023 0320 	bic.w	r3, r3, #32
 8000fba:	6023      	str	r3, [r4, #0]
 8000fbc:	e7f6      	b.n	8000fac <_printf_i+0x194>
 8000fbe:	4616      	mov	r6, r2
 8000fc0:	e7bd      	b.n	8000f3e <_printf_i+0x126>
 8000fc2:	6833      	ldr	r3, [r6, #0]
 8000fc4:	6825      	ldr	r5, [r4, #0]
 8000fc6:	6961      	ldr	r1, [r4, #20]
 8000fc8:	1d18      	adds	r0, r3, #4
 8000fca:	6030      	str	r0, [r6, #0]
 8000fcc:	062e      	lsls	r6, r5, #24
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	d501      	bpl.n	8000fd6 <_printf_i+0x1be>
 8000fd2:	6019      	str	r1, [r3, #0]
 8000fd4:	e002      	b.n	8000fdc <_printf_i+0x1c4>
 8000fd6:	0668      	lsls	r0, r5, #25
 8000fd8:	d5fb      	bpl.n	8000fd2 <_printf_i+0x1ba>
 8000fda:	8019      	strh	r1, [r3, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	6123      	str	r3, [r4, #16]
 8000fe0:	4616      	mov	r6, r2
 8000fe2:	e7bc      	b.n	8000f5e <_printf_i+0x146>
 8000fe4:	6833      	ldr	r3, [r6, #0]
 8000fe6:	1d1a      	adds	r2, r3, #4
 8000fe8:	6032      	str	r2, [r6, #0]
 8000fea:	681e      	ldr	r6, [r3, #0]
 8000fec:	6862      	ldr	r2, [r4, #4]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	f7ff f8f5 	bl	80001e0 <memchr>
 8000ff6:	b108      	cbz	r0, 8000ffc <_printf_i+0x1e4>
 8000ff8:	1b80      	subs	r0, r0, r6
 8000ffa:	6060      	str	r0, [r4, #4]
 8000ffc:	6863      	ldr	r3, [r4, #4]
 8000ffe:	6123      	str	r3, [r4, #16]
 8001000:	2300      	movs	r3, #0
 8001002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001006:	e7aa      	b.n	8000f5e <_printf_i+0x146>
 8001008:	6923      	ldr	r3, [r4, #16]
 800100a:	4632      	mov	r2, r6
 800100c:	4649      	mov	r1, r9
 800100e:	4640      	mov	r0, r8
 8001010:	47d0      	blx	sl
 8001012:	3001      	adds	r0, #1
 8001014:	d0ad      	beq.n	8000f72 <_printf_i+0x15a>
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	079b      	lsls	r3, r3, #30
 800101a:	d413      	bmi.n	8001044 <_printf_i+0x22c>
 800101c:	68e0      	ldr	r0, [r4, #12]
 800101e:	9b03      	ldr	r3, [sp, #12]
 8001020:	4298      	cmp	r0, r3
 8001022:	bfb8      	it	lt
 8001024:	4618      	movlt	r0, r3
 8001026:	e7a6      	b.n	8000f76 <_printf_i+0x15e>
 8001028:	2301      	movs	r3, #1
 800102a:	4632      	mov	r2, r6
 800102c:	4649      	mov	r1, r9
 800102e:	4640      	mov	r0, r8
 8001030:	47d0      	blx	sl
 8001032:	3001      	adds	r0, #1
 8001034:	d09d      	beq.n	8000f72 <_printf_i+0x15a>
 8001036:	3501      	adds	r5, #1
 8001038:	68e3      	ldr	r3, [r4, #12]
 800103a:	9903      	ldr	r1, [sp, #12]
 800103c:	1a5b      	subs	r3, r3, r1
 800103e:	42ab      	cmp	r3, r5
 8001040:	dcf2      	bgt.n	8001028 <_printf_i+0x210>
 8001042:	e7eb      	b.n	800101c <_printf_i+0x204>
 8001044:	2500      	movs	r5, #0
 8001046:	f104 0619 	add.w	r6, r4, #25
 800104a:	e7f5      	b.n	8001038 <_printf_i+0x220>
 800104c:	08001446 	.word	0x08001446
 8001050:	08001457 	.word	0x08001457

08001054 <__sflush_r>:
 8001054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105c:	0716      	lsls	r6, r2, #28
 800105e:	4605      	mov	r5, r0
 8001060:	460c      	mov	r4, r1
 8001062:	d454      	bmi.n	800110e <__sflush_r+0xba>
 8001064:	684b      	ldr	r3, [r1, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	dc02      	bgt.n	8001070 <__sflush_r+0x1c>
 800106a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	dd48      	ble.n	8001102 <__sflush_r+0xae>
 8001070:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001072:	2e00      	cmp	r6, #0
 8001074:	d045      	beq.n	8001102 <__sflush_r+0xae>
 8001076:	2300      	movs	r3, #0
 8001078:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800107c:	682f      	ldr	r7, [r5, #0]
 800107e:	6a21      	ldr	r1, [r4, #32]
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	d030      	beq.n	80010e6 <__sflush_r+0x92>
 8001084:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	0759      	lsls	r1, r3, #29
 800108a:	d505      	bpl.n	8001098 <__sflush_r+0x44>
 800108c:	6863      	ldr	r3, [r4, #4]
 800108e:	1ad2      	subs	r2, r2, r3
 8001090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001092:	b10b      	cbz	r3, 8001098 <__sflush_r+0x44>
 8001094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001096:	1ad2      	subs	r2, r2, r3
 8001098:	2300      	movs	r3, #0
 800109a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800109c:	6a21      	ldr	r1, [r4, #32]
 800109e:	4628      	mov	r0, r5
 80010a0:	47b0      	blx	r6
 80010a2:	1c43      	adds	r3, r0, #1
 80010a4:	89a3      	ldrh	r3, [r4, #12]
 80010a6:	d106      	bne.n	80010b6 <__sflush_r+0x62>
 80010a8:	6829      	ldr	r1, [r5, #0]
 80010aa:	291d      	cmp	r1, #29
 80010ac:	d82b      	bhi.n	8001106 <__sflush_r+0xb2>
 80010ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001158 <__sflush_r+0x104>)
 80010b0:	40ca      	lsrs	r2, r1
 80010b2:	07d6      	lsls	r6, r2, #31
 80010b4:	d527      	bpl.n	8001106 <__sflush_r+0xb2>
 80010b6:	2200      	movs	r2, #0
 80010b8:	6062      	str	r2, [r4, #4]
 80010ba:	04d9      	lsls	r1, r3, #19
 80010bc:	6922      	ldr	r2, [r4, #16]
 80010be:	6022      	str	r2, [r4, #0]
 80010c0:	d504      	bpl.n	80010cc <__sflush_r+0x78>
 80010c2:	1c42      	adds	r2, r0, #1
 80010c4:	d101      	bne.n	80010ca <__sflush_r+0x76>
 80010c6:	682b      	ldr	r3, [r5, #0]
 80010c8:	b903      	cbnz	r3, 80010cc <__sflush_r+0x78>
 80010ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80010cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80010ce:	602f      	str	r7, [r5, #0]
 80010d0:	b1b9      	cbz	r1, 8001102 <__sflush_r+0xae>
 80010d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80010d6:	4299      	cmp	r1, r3
 80010d8:	d002      	beq.n	80010e0 <__sflush_r+0x8c>
 80010da:	4628      	mov	r0, r5
 80010dc:	f7ff fbf4 	bl	80008c8 <_free_r>
 80010e0:	2300      	movs	r3, #0
 80010e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80010e4:	e00d      	b.n	8001102 <__sflush_r+0xae>
 80010e6:	2301      	movs	r3, #1
 80010e8:	4628      	mov	r0, r5
 80010ea:	47b0      	blx	r6
 80010ec:	4602      	mov	r2, r0
 80010ee:	1c50      	adds	r0, r2, #1
 80010f0:	d1c9      	bne.n	8001086 <__sflush_r+0x32>
 80010f2:	682b      	ldr	r3, [r5, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0c6      	beq.n	8001086 <__sflush_r+0x32>
 80010f8:	2b1d      	cmp	r3, #29
 80010fa:	d001      	beq.n	8001100 <__sflush_r+0xac>
 80010fc:	2b16      	cmp	r3, #22
 80010fe:	d11e      	bne.n	800113e <__sflush_r+0xea>
 8001100:	602f      	str	r7, [r5, #0]
 8001102:	2000      	movs	r0, #0
 8001104:	e022      	b.n	800114c <__sflush_r+0xf8>
 8001106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800110a:	b21b      	sxth	r3, r3
 800110c:	e01b      	b.n	8001146 <__sflush_r+0xf2>
 800110e:	690f      	ldr	r7, [r1, #16]
 8001110:	2f00      	cmp	r7, #0
 8001112:	d0f6      	beq.n	8001102 <__sflush_r+0xae>
 8001114:	0793      	lsls	r3, r2, #30
 8001116:	680e      	ldr	r6, [r1, #0]
 8001118:	bf08      	it	eq
 800111a:	694b      	ldreq	r3, [r1, #20]
 800111c:	600f      	str	r7, [r1, #0]
 800111e:	bf18      	it	ne
 8001120:	2300      	movne	r3, #0
 8001122:	eba6 0807 	sub.w	r8, r6, r7
 8001126:	608b      	str	r3, [r1, #8]
 8001128:	f1b8 0f00 	cmp.w	r8, #0
 800112c:	dde9      	ble.n	8001102 <__sflush_r+0xae>
 800112e:	6a21      	ldr	r1, [r4, #32]
 8001130:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001132:	4643      	mov	r3, r8
 8001134:	463a      	mov	r2, r7
 8001136:	4628      	mov	r0, r5
 8001138:	47b0      	blx	r6
 800113a:	2800      	cmp	r0, #0
 800113c:	dc08      	bgt.n	8001150 <__sflush_r+0xfc>
 800113e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001146:	81a3      	strh	r3, [r4, #12]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800114c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001150:	4407      	add	r7, r0
 8001152:	eba8 0800 	sub.w	r8, r8, r0
 8001156:	e7e7      	b.n	8001128 <__sflush_r+0xd4>
 8001158:	20400001 	.word	0x20400001

0800115c <_fflush_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	690b      	ldr	r3, [r1, #16]
 8001160:	4605      	mov	r5, r0
 8001162:	460c      	mov	r4, r1
 8001164:	b913      	cbnz	r3, 800116c <_fflush_r+0x10>
 8001166:	2500      	movs	r5, #0
 8001168:	4628      	mov	r0, r5
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	b118      	cbz	r0, 8001176 <_fflush_r+0x1a>
 800116e:	6a03      	ldr	r3, [r0, #32]
 8001170:	b90b      	cbnz	r3, 8001176 <_fflush_r+0x1a>
 8001172:	f7ff faa1 	bl	80006b8 <__sinit>
 8001176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f3      	beq.n	8001166 <_fflush_r+0xa>
 800117e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001180:	07d0      	lsls	r0, r2, #31
 8001182:	d404      	bmi.n	800118e <_fflush_r+0x32>
 8001184:	0599      	lsls	r1, r3, #22
 8001186:	d402      	bmi.n	800118e <_fflush_r+0x32>
 8001188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800118a:	f7ff fb9a 	bl	80008c2 <__retarget_lock_acquire_recursive>
 800118e:	4628      	mov	r0, r5
 8001190:	4621      	mov	r1, r4
 8001192:	f7ff ff5f 	bl	8001054 <__sflush_r>
 8001196:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001198:	07da      	lsls	r2, r3, #31
 800119a:	4605      	mov	r5, r0
 800119c:	d4e4      	bmi.n	8001168 <_fflush_r+0xc>
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	059b      	lsls	r3, r3, #22
 80011a2:	d4e1      	bmi.n	8001168 <_fflush_r+0xc>
 80011a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011a6:	f7ff fb8d 	bl	80008c4 <__retarget_lock_release_recursive>
 80011aa:	e7dd      	b.n	8001168 <_fflush_r+0xc>

080011ac <__swbuf_r>:
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	460e      	mov	r6, r1
 80011b0:	4614      	mov	r4, r2
 80011b2:	4605      	mov	r5, r0
 80011b4:	b118      	cbz	r0, 80011be <__swbuf_r+0x12>
 80011b6:	6a03      	ldr	r3, [r0, #32]
 80011b8:	b90b      	cbnz	r3, 80011be <__swbuf_r+0x12>
 80011ba:	f7ff fa7d 	bl	80006b8 <__sinit>
 80011be:	69a3      	ldr	r3, [r4, #24]
 80011c0:	60a3      	str	r3, [r4, #8]
 80011c2:	89a3      	ldrh	r3, [r4, #12]
 80011c4:	071a      	lsls	r2, r3, #28
 80011c6:	d501      	bpl.n	80011cc <__swbuf_r+0x20>
 80011c8:	6923      	ldr	r3, [r4, #16]
 80011ca:	b943      	cbnz	r3, 80011de <__swbuf_r+0x32>
 80011cc:	4621      	mov	r1, r4
 80011ce:	4628      	mov	r0, r5
 80011d0:	f000 f82a 	bl	8001228 <__swsetup_r>
 80011d4:	b118      	cbz	r0, 80011de <__swbuf_r+0x32>
 80011d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80011da:	4638      	mov	r0, r7
 80011dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	6922      	ldr	r2, [r4, #16]
 80011e2:	1a98      	subs	r0, r3, r2
 80011e4:	6963      	ldr	r3, [r4, #20]
 80011e6:	b2f6      	uxtb	r6, r6
 80011e8:	4283      	cmp	r3, r0
 80011ea:	4637      	mov	r7, r6
 80011ec:	dc05      	bgt.n	80011fa <__swbuf_r+0x4e>
 80011ee:	4621      	mov	r1, r4
 80011f0:	4628      	mov	r0, r5
 80011f2:	f7ff ffb3 	bl	800115c <_fflush_r>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d1ed      	bne.n	80011d6 <__swbuf_r+0x2a>
 80011fa:	68a3      	ldr	r3, [r4, #8]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60a3      	str	r3, [r4, #8]
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	6022      	str	r2, [r4, #0]
 8001206:	701e      	strb	r6, [r3, #0]
 8001208:	6962      	ldr	r2, [r4, #20]
 800120a:	1c43      	adds	r3, r0, #1
 800120c:	429a      	cmp	r2, r3
 800120e:	d004      	beq.n	800121a <__swbuf_r+0x6e>
 8001210:	89a3      	ldrh	r3, [r4, #12]
 8001212:	07db      	lsls	r3, r3, #31
 8001214:	d5e1      	bpl.n	80011da <__swbuf_r+0x2e>
 8001216:	2e0a      	cmp	r6, #10
 8001218:	d1df      	bne.n	80011da <__swbuf_r+0x2e>
 800121a:	4621      	mov	r1, r4
 800121c:	4628      	mov	r0, r5
 800121e:	f7ff ff9d 	bl	800115c <_fflush_r>
 8001222:	2800      	cmp	r0, #0
 8001224:	d0d9      	beq.n	80011da <__swbuf_r+0x2e>
 8001226:	e7d6      	b.n	80011d6 <__swbuf_r+0x2a>

08001228 <__swsetup_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <__swsetup_r+0xa8>)
 800122c:	4605      	mov	r5, r0
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	460c      	mov	r4, r1
 8001232:	b118      	cbz	r0, 800123c <__swsetup_r+0x14>
 8001234:	6a03      	ldr	r3, [r0, #32]
 8001236:	b90b      	cbnz	r3, 800123c <__swsetup_r+0x14>
 8001238:	f7ff fa3e 	bl	80006b8 <__sinit>
 800123c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001240:	0719      	lsls	r1, r3, #28
 8001242:	d422      	bmi.n	800128a <__swsetup_r+0x62>
 8001244:	06da      	lsls	r2, r3, #27
 8001246:	d407      	bmi.n	8001258 <__swsetup_r+0x30>
 8001248:	2209      	movs	r2, #9
 800124a:	602a      	str	r2, [r5, #0]
 800124c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001250:	81a3      	strh	r3, [r4, #12]
 8001252:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001256:	e033      	b.n	80012c0 <__swsetup_r+0x98>
 8001258:	0758      	lsls	r0, r3, #29
 800125a:	d512      	bpl.n	8001282 <__swsetup_r+0x5a>
 800125c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800125e:	b141      	cbz	r1, 8001272 <__swsetup_r+0x4a>
 8001260:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001264:	4299      	cmp	r1, r3
 8001266:	d002      	beq.n	800126e <__swsetup_r+0x46>
 8001268:	4628      	mov	r0, r5
 800126a:	f7ff fb2d 	bl	80008c8 <_free_r>
 800126e:	2300      	movs	r3, #0
 8001270:	6363      	str	r3, [r4, #52]	@ 0x34
 8001272:	89a3      	ldrh	r3, [r4, #12]
 8001274:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001278:	81a3      	strh	r3, [r4, #12]
 800127a:	2300      	movs	r3, #0
 800127c:	6063      	str	r3, [r4, #4]
 800127e:	6923      	ldr	r3, [r4, #16]
 8001280:	6023      	str	r3, [r4, #0]
 8001282:	89a3      	ldrh	r3, [r4, #12]
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	81a3      	strh	r3, [r4, #12]
 800128a:	6923      	ldr	r3, [r4, #16]
 800128c:	b94b      	cbnz	r3, 80012a2 <__swsetup_r+0x7a>
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001298:	d003      	beq.n	80012a2 <__swsetup_r+0x7a>
 800129a:	4621      	mov	r1, r4
 800129c:	4628      	mov	r0, r5
 800129e:	f000 f84f 	bl	8001340 <__smakebuf_r>
 80012a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012a6:	f013 0201 	ands.w	r2, r3, #1
 80012aa:	d00a      	beq.n	80012c2 <__swsetup_r+0x9a>
 80012ac:	2200      	movs	r2, #0
 80012ae:	60a2      	str	r2, [r4, #8]
 80012b0:	6962      	ldr	r2, [r4, #20]
 80012b2:	4252      	negs	r2, r2
 80012b4:	61a2      	str	r2, [r4, #24]
 80012b6:	6922      	ldr	r2, [r4, #16]
 80012b8:	b942      	cbnz	r2, 80012cc <__swsetup_r+0xa4>
 80012ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80012be:	d1c5      	bne.n	800124c <__swsetup_r+0x24>
 80012c0:	bd38      	pop	{r3, r4, r5, pc}
 80012c2:	0799      	lsls	r1, r3, #30
 80012c4:	bf58      	it	pl
 80012c6:	6962      	ldrpl	r2, [r4, #20]
 80012c8:	60a2      	str	r2, [r4, #8]
 80012ca:	e7f4      	b.n	80012b6 <__swsetup_r+0x8e>
 80012cc:	2000      	movs	r0, #0
 80012ce:	e7f7      	b.n	80012c0 <__swsetup_r+0x98>
 80012d0:	2000000c 	.word	0x2000000c

080012d4 <_sbrk_r>:
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4d06      	ldr	r5, [pc, #24]	@ (80012f0 <_sbrk_r+0x1c>)
 80012d8:	2300      	movs	r3, #0
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	602b      	str	r3, [r5, #0]
 80012e0:	f7ff f868 	bl	80003b4 <_sbrk>
 80012e4:	1c43      	adds	r3, r0, #1
 80012e6:	d102      	bne.n	80012ee <_sbrk_r+0x1a>
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	b103      	cbz	r3, 80012ee <_sbrk_r+0x1a>
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	bd38      	pop	{r3, r4, r5, pc}
 80012f0:	200001b8 	.word	0x200001b8

080012f4 <__swhatbuf_r>:
 80012f4:	b570      	push	{r4, r5, r6, lr}
 80012f6:	460c      	mov	r4, r1
 80012f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012fc:	2900      	cmp	r1, #0
 80012fe:	b096      	sub	sp, #88	@ 0x58
 8001300:	4615      	mov	r5, r2
 8001302:	461e      	mov	r6, r3
 8001304:	da0d      	bge.n	8001322 <__swhatbuf_r+0x2e>
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800130c:	f04f 0100 	mov.w	r1, #0
 8001310:	bf14      	ite	ne
 8001312:	2340      	movne	r3, #64	@ 0x40
 8001314:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001318:	2000      	movs	r0, #0
 800131a:	6031      	str	r1, [r6, #0]
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	b016      	add	sp, #88	@ 0x58
 8001320:	bd70      	pop	{r4, r5, r6, pc}
 8001322:	466a      	mov	r2, sp
 8001324:	f000 f848 	bl	80013b8 <_fstat_r>
 8001328:	2800      	cmp	r0, #0
 800132a:	dbec      	blt.n	8001306 <__swhatbuf_r+0x12>
 800132c:	9901      	ldr	r1, [sp, #4]
 800132e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001332:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001336:	4259      	negs	r1, r3
 8001338:	4159      	adcs	r1, r3
 800133a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133e:	e7eb      	b.n	8001318 <__swhatbuf_r+0x24>

08001340 <__smakebuf_r>:
 8001340:	898b      	ldrh	r3, [r1, #12]
 8001342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001344:	079d      	lsls	r5, r3, #30
 8001346:	4606      	mov	r6, r0
 8001348:	460c      	mov	r4, r1
 800134a:	d507      	bpl.n	800135c <__smakebuf_r+0x1c>
 800134c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001350:	6023      	str	r3, [r4, #0]
 8001352:	6123      	str	r3, [r4, #16]
 8001354:	2301      	movs	r3, #1
 8001356:	6163      	str	r3, [r4, #20]
 8001358:	b003      	add	sp, #12
 800135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135c:	ab01      	add	r3, sp, #4
 800135e:	466a      	mov	r2, sp
 8001360:	f7ff ffc8 	bl	80012f4 <__swhatbuf_r>
 8001364:	9f00      	ldr	r7, [sp, #0]
 8001366:	4605      	mov	r5, r0
 8001368:	4639      	mov	r1, r7
 800136a:	4630      	mov	r0, r6
 800136c:	f7ff fb18 	bl	80009a0 <_malloc_r>
 8001370:	b948      	cbnz	r0, 8001386 <__smakebuf_r+0x46>
 8001372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001376:	059a      	lsls	r2, r3, #22
 8001378:	d4ee      	bmi.n	8001358 <__smakebuf_r+0x18>
 800137a:	f023 0303 	bic.w	r3, r3, #3
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	81a3      	strh	r3, [r4, #12]
 8001384:	e7e2      	b.n	800134c <__smakebuf_r+0xc>
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	6020      	str	r0, [r4, #0]
 800138a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800138e:	81a3      	strh	r3, [r4, #12]
 8001390:	9b01      	ldr	r3, [sp, #4]
 8001392:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001396:	b15b      	cbz	r3, 80013b0 <__smakebuf_r+0x70>
 8001398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800139c:	4630      	mov	r0, r6
 800139e:	f000 f81d 	bl	80013dc <_isatty_r>
 80013a2:	b128      	cbz	r0, 80013b0 <__smakebuf_r+0x70>
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	81a3      	strh	r3, [r4, #12]
 80013b0:	89a3      	ldrh	r3, [r4, #12]
 80013b2:	431d      	orrs	r5, r3
 80013b4:	81a5      	strh	r5, [r4, #12]
 80013b6:	e7cf      	b.n	8001358 <__smakebuf_r+0x18>

080013b8 <_fstat_r>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	4d07      	ldr	r5, [pc, #28]	@ (80013d8 <_fstat_r+0x20>)
 80013bc:	2300      	movs	r3, #0
 80013be:	4604      	mov	r4, r0
 80013c0:	4608      	mov	r0, r1
 80013c2:	4611      	mov	r1, r2
 80013c4:	602b      	str	r3, [r5, #0]
 80013c6:	f7fe ffcc 	bl	8000362 <_fstat>
 80013ca:	1c43      	adds	r3, r0, #1
 80013cc:	d102      	bne.n	80013d4 <_fstat_r+0x1c>
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	b103      	cbz	r3, 80013d4 <_fstat_r+0x1c>
 80013d2:	6023      	str	r3, [r4, #0]
 80013d4:	bd38      	pop	{r3, r4, r5, pc}
 80013d6:	bf00      	nop
 80013d8:	200001b8 	.word	0x200001b8

080013dc <_isatty_r>:
 80013dc:	b538      	push	{r3, r4, r5, lr}
 80013de:	4d06      	ldr	r5, [pc, #24]	@ (80013f8 <_isatty_r+0x1c>)
 80013e0:	2300      	movs	r3, #0
 80013e2:	4604      	mov	r4, r0
 80013e4:	4608      	mov	r0, r1
 80013e6:	602b      	str	r3, [r5, #0]
 80013e8:	f7fe ffcb 	bl	8000382 <_isatty>
 80013ec:	1c43      	adds	r3, r0, #1
 80013ee:	d102      	bne.n	80013f6 <_isatty_r+0x1a>
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	b103      	cbz	r3, 80013f6 <_isatty_r+0x1a>
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	bd38      	pop	{r3, r4, r5, pc}
 80013f8:	200001b8 	.word	0x200001b8

080013fc <_init>:
 80013fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fe:	bf00      	nop
 8001400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001402:	bc08      	pop	{r3}
 8001404:	469e      	mov	lr, r3
 8001406:	4770      	bx	lr

08001408 <_fini>:
 8001408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140a:	bf00      	nop
 800140c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140e:	bc08      	pop	{r3}
 8001410:	469e      	mov	lr, r3
 8001412:	4770      	bx	lr
