
5_RoundRobinScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000048c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000624  0800062c  0000162c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000624  08000624  0000162c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000624  08000624  0000162c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000624  0800062c  0000162c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000624  08000624  00001624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000628  08000628  00001628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000162c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001308  20000000  0800062c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001308  0800062c  00002308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000091c  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000357  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  000022d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008e  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000dbc  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d69  00000000  00000000  000031ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053de3  00000000  00000000  00003f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00057d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000208  00000000  00000000  00057d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00057f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800060c 	.word	0x0800060c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800060c 	.word	0x0800060c

080001d8 <task0>:
void motor_stop(void);
void valve_open(void);
void valve_close(void);

void task0(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_Profiler++;
 80001dc:	4b02      	ldr	r3, [pc, #8]	@ (80001e8 <task0+0x10>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4a01      	ldr	r2, [pc, #4]	@ (80001e8 <task0+0x10>)
 80001e4:	6013      	str	r3, [r2, #0]
 80001e6:	e7f9      	b.n	80001dc <task0+0x4>
 80001e8:	2000001c 	.word	0x2000001c

080001ec <task1>:
	}
}

void task1(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Profiler++;
 80001f0:	4b02      	ldr	r3, [pc, #8]	@ (80001fc <task1+0x10>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	4a01      	ldr	r2, [pc, #4]	@ (80001fc <task1+0x10>)
 80001f8:	6013      	str	r3, [r2, #0]
 80001fa:	e7f9      	b.n	80001f0 <task1+0x4>
 80001fc:	20000020 	.word	0x20000020

08000200 <task2>:
	}
}

void task2(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 8000204:	4b02      	ldr	r3, [pc, #8]	@ (8000210 <task2+0x10>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	3301      	adds	r3, #1
 800020a:	4a01      	ldr	r2, [pc, #4]	@ (8000210 <task2+0x10>)
 800020c:	6013      	str	r3, [r2, #0]
 800020e:	e7f9      	b.n	8000204 <task2+0x4>
 8000210:	20000024 	.word	0x20000024

08000214 <main>:
	}
}

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	// Initialise Kernel
	osKernelInit();
 8000218:	f000 f948 	bl	80004ac <osKernelInit>

	// Add Threads
	osKernelAddThreads(&task0, &task1, &task2);
 800021c:	4a05      	ldr	r2, [pc, #20]	@ (8000234 <main+0x20>)
 800021e:	4906      	ldr	r1, [pc, #24]	@ (8000238 <main+0x24>)
 8000220:	4806      	ldr	r0, [pc, #24]	@ (800023c <main+0x28>)
 8000222:	f000 f907 	bl	8000434 <osKernelAddThreads>

	// Set RoundRobin time quanta
	osKernelLaunch(QUANTA);
 8000226:	200a      	movs	r0, #10
 8000228:	f000 f94e 	bl	80004c8 <osKernelLaunch>
 800022c:	2300      	movs	r3, #0
}
 800022e:	4618      	mov	r0, r3
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	08000201 	.word	0x08000201
 8000238:	080001ed 	.word	0x080001ed
 800023c:	080001d9 	.word	0x080001d9

08000240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	6039      	str	r1, [r7, #0]
 800024a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000250:	2b00      	cmp	r3, #0
 8000252:	db0a      	blt.n	800026a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	b2da      	uxtb	r2, r3
 8000258:	490c      	ldr	r1, [pc, #48]	@ (800028c <__NVIC_SetPriority+0x4c>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	0112      	lsls	r2, r2, #4
 8000260:	b2d2      	uxtb	r2, r2
 8000262:	440b      	add	r3, r1
 8000264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000268:	e00a      	b.n	8000280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	b2da      	uxtb	r2, r3
 800026e:	4908      	ldr	r1, [pc, #32]	@ (8000290 <__NVIC_SetPriority+0x50>)
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 030f 	and.w	r3, r3, #15
 8000276:	3b04      	subs	r3, #4
 8000278:	0112      	lsls	r2, r2, #4
 800027a:	b2d2      	uxtb	r2, r2
 800027c:	440b      	add	r3, r1
 800027e:	761a      	strb	r2, [r3, #24]
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <osKernelStackInit>:
/* Each thread will have stacksize of 100 i.e 400bytes. int32_t is 4 bytes * 100 = 400 bytes */
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];


void osKernelStackInit(int i)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]

	tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE - 16]; // Stack Pointer
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80002a2:	fb02 f303 	mul.w	r3, r2, r3
 80002a6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80002aa:	4a60      	ldr	r2, [pc, #384]	@ (800042c <osKernelStackInit+0x198>)
 80002ac:	441a      	add	r2, r3
 80002ae:	4960      	ldr	r1, [pc, #384]	@ (8000430 <osKernelStackInit+0x19c>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	/* Set bit21 (T-bit in PSR to 1, to operate in  Thumb mode*/
	TCB_STACK[i][STACKSIZE - 1] = (1U<<24); //PSR
 80002b6:	4a5d      	ldr	r2, [pc, #372]	@ (800042c <osKernelStackInit+0x198>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80002be:	fb01 f303 	mul.w	r3, r1, r3
 80002c2:	4413      	add	r3, r2
 80002c4:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 80002c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80002cc:	601a      	str	r2, [r3, #0]

	// Dummy stack content @NOTE: Block below is optional, for debuggin puposes only
	/* In the generic use guide cortex m4 devices. if you search for core registers you will find more information on these */
	TCB_STACK[i][STACKSIZE - 3] = 0xAAAAAAAA; //R14 - LR
 80002ce:	4a57      	ldr	r2, [pc, #348]	@ (800042c <osKernelStackInit+0x198>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80002d6:	fb01 f303 	mul.w	r3, r1, r3
 80002da:	4413      	add	r3, r2
 80002dc:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 80002e0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80002e4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 4] = 0xAAAAAAAA; //R12
 80002e6:	4a51      	ldr	r2, [pc, #324]	@ (800042c <osKernelStackInit+0x198>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80002ee:	fb01 f303 	mul.w	r3, r1, r3
 80002f2:	4413      	add	r3, r2
 80002f4:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 80002f8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80002fc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 5] = 0xAAAAAAAA; //R3
 80002fe:	4a4b      	ldr	r2, [pc, #300]	@ (800042c <osKernelStackInit+0x198>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000306:	fb01 f303 	mul.w	r3, r1, r3
 800030a:	4413      	add	r3, r2
 800030c:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8000310:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000314:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 6] = 0xAAAAAAAA; //R2
 8000316:	4a45      	ldr	r2, [pc, #276]	@ (800042c <osKernelStackInit+0x198>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800031e:	fb01 f303 	mul.w	r3, r1, r3
 8000322:	4413      	add	r3, r2
 8000324:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8000328:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800032c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 7] = 0xAAAAAAAA; //R1
 800032e:	4a3f      	ldr	r2, [pc, #252]	@ (800042c <osKernelStackInit+0x198>)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000336:	fb01 f303 	mul.w	r3, r1, r3
 800033a:	4413      	add	r3, r2
 800033c:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8000340:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000344:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 8] = 0xAAAAAAAA; //R0
 8000346:	4a39      	ldr	r2, [pc, #228]	@ (800042c <osKernelStackInit+0x198>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800034e:	fb01 f303 	mul.w	r3, r1, r3
 8000352:	4413      	add	r3, r2
 8000354:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8000358:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800035c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 9] = 0xAAAAAAAA; //R11
 800035e:	4a33      	ldr	r2, [pc, #204]	@ (800042c <osKernelStackInit+0x198>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000366:	fb01 f303 	mul.w	r3, r1, r3
 800036a:	4413      	add	r3, r2
 800036c:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8000370:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000374:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 10] = 0xAAAAAAAA; //R10
 8000376:	4a2d      	ldr	r2, [pc, #180]	@ (800042c <osKernelStackInit+0x198>)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800037e:	fb01 f303 	mul.w	r3, r1, r3
 8000382:	4413      	add	r3, r2
 8000384:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8000388:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800038c:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 11] = 0xAAAAAAAA; //R9
 800038e:	4a27      	ldr	r2, [pc, #156]	@ (800042c <osKernelStackInit+0x198>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000396:	fb01 f303 	mul.w	r3, r1, r3
 800039a:	4413      	add	r3, r2
 800039c:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 80003a0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003a4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 12] = 0xAAAAAAAA; //R8
 80003a6:	4a21      	ldr	r2, [pc, #132]	@ (800042c <osKernelStackInit+0x198>)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ae:	fb01 f303 	mul.w	r3, r1, r3
 80003b2:	4413      	add	r3, r2
 80003b4:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 80003b8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003bc:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 13] = 0xAAAAAAAA; //R7
 80003be:	4a1b      	ldr	r2, [pc, #108]	@ (800042c <osKernelStackInit+0x198>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003c6:	fb01 f303 	mul.w	r3, r1, r3
 80003ca:	4413      	add	r3, r2
 80003cc:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 80003d0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003d4:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 14] = 0xAAAAAAAA; //R6
 80003d6:	4a15      	ldr	r2, [pc, #84]	@ (800042c <osKernelStackInit+0x198>)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003de:	fb01 f303 	mul.w	r3, r1, r3
 80003e2:	4413      	add	r3, r2
 80003e4:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80003e8:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003ec:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 15] = 0xAAAAAAAA; //R5
 80003ee:	4a0f      	ldr	r2, [pc, #60]	@ (800042c <osKernelStackInit+0x198>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003f6:	fb01 f303 	mul.w	r3, r1, r3
 80003fa:	4413      	add	r3, r2
 80003fc:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8000400:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000404:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 16] = 0xAAAAAAAA; //R4
 8000406:	4a09      	ldr	r2, [pc, #36]	@ (800042c <osKernelStackInit+0x198>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800040e:	fb01 f303 	mul.w	r3, r1, r3
 8000412:	4413      	add	r3, r2
 8000414:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8000418:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800041c:	601a      	str	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000048 	.word	0x20000048
 8000430:	2000002c 	.word	0x2000002c

08000434 <osKernelAddThreads>:


uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
	// Disable global interrupts
	__disable_irq();
	tcbs[0].nextPt = &tcbs[1];
 8000444:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <osKernelAddThreads+0x64>)
 8000446:	4a15      	ldr	r2, [pc, #84]	@ (800049c <osKernelAddThreads+0x68>)
 8000448:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <osKernelAddThreads+0x64>)
 800044c:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <osKernelAddThreads+0x6c>)
 800044e:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[0];
 8000450:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <osKernelAddThreads+0x64>)
 8000452:	4a11      	ldr	r2, [pc, #68]	@ (8000498 <osKernelAddThreads+0x64>)
 8000454:	615a      	str	r2, [r3, #20]

	// initialise stack for thread0
	osKernelStackInit(0);
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ff1c 	bl	8000294 <osKernelStackInit>
	// initialise PC
	TCB_STACK[0][STACKSIZE - 2] = (int32_t)(task0);
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <osKernelAddThreads+0x70>)
 8000460:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

	// initialise stack for thread1
	osKernelStackInit(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f7ff ff15 	bl	8000294 <osKernelStackInit>
	// initialise PC
	TCB_STACK[1][STACKSIZE - 2] = (int32_t)(task1);
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	4a0d      	ldr	r2, [pc, #52]	@ (80004a4 <osKernelAddThreads+0x70>)
 800046e:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78

	// initialise stack for thread2
	osKernelStackInit(2);
 8000472:	2002      	movs	r0, #2
 8000474:	f7ff ff0e 	bl	8000294 <osKernelStackInit>
	// initialise PC
	TCB_STACK[2][STACKSIZE - 2] = (int32_t)(task2);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a0a      	ldr	r2, [pc, #40]	@ (80004a4 <osKernelAddThreads+0x70>)
 800047c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000480:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

	// start from thread0
	currentPt = &tcbs[0];
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <osKernelAddThreads+0x74>)
 8000486:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <osKernelAddThreads+0x64>)
 8000488:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800048a:	b662      	cpsie	i
}
 800048c:	bf00      	nop

	// Enable gloabl interrupt
	__enable_irq();

	return 1;
 800048e:	2301      	movs	r3, #1
}
 8000490:	4618      	mov	r0, r3
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000002c 	.word	0x2000002c
 800049c:	20000034 	.word	0x20000034
 80004a0:	2000003c 	.word	0x2000003c
 80004a4:	20000048 	.word	0x20000048
 80004a8:	20000044 	.word	0x20000044

080004ac <osKernelInit>:

void osKernelInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQUENCY/1000);
 80004b0:	4b04      	ldr	r3, [pc, #16]	@ (80004c4 <osKernelInit+0x18>)
 80004b2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000028 	.word	0x20000028

080004c8 <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	// Reset Systick
	SysTick->CTRL = SYSTICK_RST;
 80004d0:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <osKernelLaunch+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]

	// Clear systick current value register
	SysTick->VAL = 0;
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <osKernelLaunch+0x4c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]

	// Load quanta
	SysTick->LOAD = (quanta * MILLIS_PRESCALER) - 1;
 80004dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <osKernelLaunch+0x50>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	fb02 f303 	mul.w	r3, r2, r3
 80004e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000514 <osKernelLaunch+0x4c>)
 80004e8:	3b01      	subs	r3, #1
 80004ea:	6053      	str	r3, [r2, #4]

	// Set systick to low priority
	NVIC_SetPriority(SysTick_IRQn, 15);
 80004ec:	210f      	movs	r1, #15
 80004ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80004f2:	f7ff fea5 	bl	8000240 <__NVIC_SetPriority>

	// Enable systick, select intenal clock
	SysTick->CTRL = CTRL_CLCKSRC | CTRL_ENABLE;
 80004f6:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <osKernelLaunch+0x4c>)
 80004f8:	2205      	movs	r2, #5
 80004fa:	601a      	str	r2, [r3, #0]

	// Enable systick interrupt
	SysTick->CTRL |= CTRL_TICKINT;
 80004fc:	4b05      	ldr	r3, [pc, #20]	@ (8000514 <osKernelLaunch+0x4c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <osKernelLaunch+0x4c>)
 8000502:	f043 0302 	orr.w	r3, r3, #2
 8000506:	6013      	str	r3, [r2, #0]

	// Launch Scheduler
	osSchedulerLaunch();
 8000508:	f000 f81a 	bl	8000540 <osSchedulerLaunch>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	e000e010 	.word	0xe000e010
 8000518:	20000028 	.word	0x20000028

0800051c <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	// SUSPEND CURRENT THREAD
	// Disable global interrupt (to make this function atomic)
	__asm("CPSID    I");
 800051c:	b672      	cpsid	i

	// Save r4, r5, r6, r7, r8, r9, r10, r11
	__asm("PUSH {R4-R11}");
 800051e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Load address of currentPt into r0
	__asm("LDR R0, =currentPt");
 8000522:	4806      	ldr	r0, [pc, #24]	@ (800053c <SysTick_Handler+0x20>)

	// Load r1 from address equals r0, i.e. r1 =currentPt
	__asm("LDR R1,[R0]");
 8000524:	6801      	ldr	r1, [r0, #0]

	// Store Cortex-M SP at address equals r1, i.e. Save SP into tcb
	__asm("STR SP,[R1]");
 8000526:	f8c1 d000 	str.w	sp, [r1]

	// CHOOSE THE NEXT THREAD
	// Load r1 from a location 4bytes above address r1, ie r1 = currentPt->next
	__asm("LDR R1,[R1,#4]");
 800052a:	6849      	ldr	r1, [r1, #4]

	// Store r1 at address equals r0, ie currentPt = r1
	__asm("STR R1,[R0]");
 800052c:	6001      	str	r1, [r0, #0]

	// Load Cortex-M SP from address equals r1, ie SP = currentPt->stackPt
	__asm("LDR SP,[R1]");
 800052e:	f8d1 d000 	ldr.w	sp, [r1]

	// Restore r4, r5, r6, r7, r8, r9, r10, r11
	__asm("POP {R4-R11}");
 8000532:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Enable global interrupts
	__asm("CPSIE    I");
 8000536:	b662      	cpsie	i

	// Return from exception and restore r0, r1, r2, r3, r12, lr, pc, psr
	__asm("BX     LR");
 8000538:	4770      	bx	lr
}
 800053a:	bf00      	nop
 800053c:	20000044 	.word	0x20000044

08000540 <osSchedulerLaunch>:

void osSchedulerLaunch(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	// Load address of currentPt in R0
	__asm("LDR R0,=currentPt");
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <osSchedulerLaunch+0x2c>)

	// Load r2 from address equals r0, i.e r2=currentPt
	__asm("LDR R2,[R0]");
 8000546:	6802      	ldr	r2, [r0, #0]

	// Load Cortex-M SP from address equals R2, i.e. SP = currentPt->stackPt
	__asm("LDR SP,[R2]");
 8000548:	f8d2 d000 	ldr.w	sp, [r2]

	// Restore r4,r5,r6,r7,r8,r9,10,r11
	__asm("POP {R4-R11}");
 800054c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Restore r12
	__asm("POP {R12}");
 8000550:	f85d cb04 	ldr.w	ip, [sp], #4

	// Restore r0,r1,r2,r3
	__asm("POP {R0-R3}");
 8000554:	bc0f      	pop	{r0, r1, r2, r3}

	// Skip LR
	__asm("ADD  SP,SP,#4");
 8000556:	b001      	add	sp, #4

	// Create a new start location by popping LR
	__asm("POP {LR}");
 8000558:	f85d eb04 	ldr.w	lr, [sp], #4

	// Skip PSR by adding 4 to SP
	__asm("ADD  SP,SP,#4");
 800055c:	b001      	add	sp, #4

	// Enable global interrupts
	__asm("CPSIE    I");
 800055e:	b662      	cpsie	i

	// Return from exception
	__asm("BX    LR");
 8000560:	4770      	bx	lr
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	20000044 	.word	0x20000044

08000570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000570:	480d      	ldr	r0, [pc, #52]	@ (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000572:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000574:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	@ (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	@ (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	@ (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	@ (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059e:	f000 f811 	bl	80005c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a2:	f7ff fe37 	bl	8000214 <main>

080005a6 <LoopForever>:

LoopForever:
  b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005b4:	0800062c 	.word	0x0800062c
  ldr r2, =_sbss
 80005b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005bc:	20001308 	.word	0x20001308

080005c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC_IRQHandler>
	...

080005c4 <__libc_init_array>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	4d0d      	ldr	r5, [pc, #52]	@ (80005fc <__libc_init_array+0x38>)
 80005c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000600 <__libc_init_array+0x3c>)
 80005ca:	1b64      	subs	r4, r4, r5
 80005cc:	10a4      	asrs	r4, r4, #2
 80005ce:	2600      	movs	r6, #0
 80005d0:	42a6      	cmp	r6, r4
 80005d2:	d109      	bne.n	80005e8 <__libc_init_array+0x24>
 80005d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000604 <__libc_init_array+0x40>)
 80005d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000608 <__libc_init_array+0x44>)
 80005d8:	f000 f818 	bl	800060c <_init>
 80005dc:	1b64      	subs	r4, r4, r5
 80005de:	10a4      	asrs	r4, r4, #2
 80005e0:	2600      	movs	r6, #0
 80005e2:	42a6      	cmp	r6, r4
 80005e4:	d105      	bne.n	80005f2 <__libc_init_array+0x2e>
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
 80005e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ec:	4798      	blx	r3
 80005ee:	3601      	adds	r6, #1
 80005f0:	e7ee      	b.n	80005d0 <__libc_init_array+0xc>
 80005f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f6:	4798      	blx	r3
 80005f8:	3601      	adds	r6, #1
 80005fa:	e7f2      	b.n	80005e2 <__libc_init_array+0x1e>
 80005fc:	08000624 	.word	0x08000624
 8000600:	08000624 	.word	0x08000624
 8000604:	08000624 	.word	0x08000624
 8000608:	08000628 	.word	0x08000628

0800060c <_init>:
 800060c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800060e:	bf00      	nop
 8000610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000612:	bc08      	pop	{r3}
 8000614:	469e      	mov	lr, r3
 8000616:	4770      	bx	lr

08000618 <_fini>:
 8000618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061a:	bf00      	nop
 800061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061e:	bc08      	pop	{r3}
 8000620:	469e      	mov	lr, r3
 8000622:	4770      	bx	lr
