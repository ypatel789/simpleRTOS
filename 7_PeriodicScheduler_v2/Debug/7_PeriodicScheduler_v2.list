
7_PeriodicScheduler_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006bc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000854  0800085c  0000185c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000854  08000854  0000185c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000854  08000854  0000185c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000854  0800085c  0000185c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000854  08000854  00001854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000858  08000858  00001858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000185c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000000  0800085c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  0800085c  00002314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000126e  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ff  00000000  00000000  00002afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00003000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000de  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fe9  00000000  00000000  0000321e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000156e  00000000  00000000  00004207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054112  00000000  00000000  00005775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00059887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000390  00000000  00000000  000598cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00059c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800083c 	.word	0x0800083c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800083c 	.word	0x0800083c

080001d8 <task0>:
void motor_stop(void);
void valve_open(void);
void valve_close(void);

void task0(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	while(1)
	{
		Task0_Profiler++;
 80001dc:	4b04      	ldr	r3, [pc, #16]	@ (80001f0 <task0+0x18>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4a03      	ldr	r2, [pc, #12]	@ (80001f0 <task0+0x18>)
 80001e4:	6013      	str	r3, [r2, #0]
		// This task is behaving cooperatively. Once it completes it is giving another thread priority to execute, instead of running for the complete time quanta
		osThreadYield();
 80001e6:	f000 fa11 	bl	800060c <osThreadYield>
		Task0_Profiler++;
 80001ea:	bf00      	nop
 80001ec:	e7f6      	b.n	80001dc <task0+0x4>
 80001ee:	bf00      	nop
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <task1>:
	}
}

void task1(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	while(1)
	{
		Task1_Profiler++;
 80001f8:	4b02      	ldr	r3, [pc, #8]	@ (8000204 <task1+0x10>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	4a01      	ldr	r2, [pc, #4]	@ (8000204 <task1+0x10>)
 8000200:	6013      	str	r3, [r2, #0]
 8000202:	e7f9      	b.n	80001f8 <task1+0x4>
 8000204:	20000020 	.word	0x20000020

08000208 <task2>:
	}
}

void task2(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 800020c:	4b02      	ldr	r3, [pc, #8]	@ (8000218 <task2+0x10>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	3301      	adds	r3, #1
 8000212:	4a01      	ldr	r2, [pc, #4]	@ (8000218 <task2+0x10>)
 8000214:	6013      	str	r3, [r2, #0]
 8000216:	e7f9      	b.n	800020c <task2+0x4>
 8000218:	20000024 	.word	0x20000024

0800021c <task3>:
	}
}

void task3(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	pTask1_Profiler++;
 8000220:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <task3+0x18>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	4a03      	ldr	r2, [pc, #12]	@ (8000234 <task3+0x18>)
 8000228:	6013      	str	r3, [r2, #0]
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	20000028 	.word	0x20000028

08000238 <main>:

int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	// Initialise uart
	uart_tx_init();
 800023c:	f000 fa3e 	bl	80006bc <uart_tx_init>

	// Initialise hardware timer
	tim2_1hz_interrupt_init();
 8000240:	f000 fa12 	bl	8000668 <tim2_1hz_interrupt_init>

	// Initialise Kernel
	osKernelInit();
 8000244:	f000 f97c 	bl	8000540 <osKernelInit>

	// Add Threads
	osKernelAddThreads(&task0, &task1, &task2);
 8000248:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <main+0x28>)
 800024a:	4906      	ldr	r1, [pc, #24]	@ (8000264 <main+0x2c>)
 800024c:	4806      	ldr	r0, [pc, #24]	@ (8000268 <main+0x30>)
 800024e:	f000 f93b 	bl	80004c8 <osKernelAddThreads>

	// Set RoundRobin time quanta
	osKernelLaunch(QUANTA);
 8000252:	200a      	movs	r0, #10
 8000254:	f000 f982 	bl	800055c <osKernelLaunch>
 8000258:	2300      	movs	r3, #0
}
 800025a:	4618      	mov	r0, r3
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	08000209 	.word	0x08000209
 8000264:	080001f5 	.word	0x080001f5
 8000268:	080001d9 	.word	0x080001d9

0800026c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	// Clear update interrupt flag
	TIM2->SR &=~SR_UIF;
 8000270:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800027a:	f023 0301 	bic.w	r3, r3, #1
 800027e:	6113      	str	r3, [r2, #16]

	// Increment the profiler
	pTask2_Profiler++;
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <TIM2_IRQHandler+0x28>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3301      	adds	r3, #1
 8000286:	4a03      	ldr	r2, [pc, #12]	@ (8000294 <TIM2_IRQHandler+0x28>)
 8000288:	6013      	str	r3, [r2, #0]
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	2000002c 	.word	0x2000002c

08000298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db0b      	blt.n	80002c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 021f 	and.w	r2, r3, #31
 80002b0:	4907      	ldr	r1, [pc, #28]	@ (80002d0 <__NVIC_EnableIRQ+0x38>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	095b      	lsrs	r3, r3, #5
 80002b8:	2001      	movs	r0, #1
 80002ba:	fa00 f202 	lsl.w	r2, r0, r2
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	6039      	str	r1, [r7, #0]
 80002de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	db0a      	blt.n	80002fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	490c      	ldr	r1, [pc, #48]	@ (8000320 <__NVIC_SetPriority+0x4c>)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	0112      	lsls	r2, r2, #4
 80002f4:	b2d2      	uxtb	r2, r2
 80002f6:	440b      	add	r3, r1
 80002f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002fc:	e00a      	b.n	8000314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4908      	ldr	r1, [pc, #32]	@ (8000324 <__NVIC_SetPriority+0x50>)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	f003 030f 	and.w	r3, r3, #15
 800030a:	3b04      	subs	r3, #4
 800030c:	0112      	lsls	r2, r2, #4
 800030e:	b2d2      	uxtb	r2, r2
 8000310:	440b      	add	r3, r1
 8000312:	761a      	strb	r2, [r3, #24]
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	e000e100 	.word	0xe000e100
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <osKernelStackInit>:
/* Each thread will have stacksize of 100 i.e 400bytes. int32_t is 4 bytes * 100 = 400 bytes */
int32_t TCB_STACK[NUM_OF_THREADS][STACKSIZE];


void osKernelStackInit(int i)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]

	tcbs[i].stackPt = &TCB_STACK[i][STACKSIZE - 16]; // Stack Pointer
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8000336:	fb02 f303 	mul.w	r3, r2, r3
 800033a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800033e:	4a60      	ldr	r2, [pc, #384]	@ (80004c0 <osKernelStackInit+0x198>)
 8000340:	441a      	add	r2, r3
 8000342:	4960      	ldr	r1, [pc, #384]	@ (80004c4 <osKernelStackInit+0x19c>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	/* Set bit21 (T-bit in PSR to 1, to operate in  Thumb mode*/
	TCB_STACK[i][STACKSIZE - 1] = (1U<<24); //PSR
 800034a:	4a5d      	ldr	r2, [pc, #372]	@ (80004c0 <osKernelStackInit+0x198>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000352:	fb01 f303 	mul.w	r3, r1, r3
 8000356:	4413      	add	r3, r2
 8000358:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 800035c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000360:	601a      	str	r2, [r3, #0]

	// Dummy stack content @NOTE: Block below is optional, for debuggin puposes only
	/* In the generic use guide cortex m4 devices. if you search for core registers you will find more information on these */
	TCB_STACK[i][STACKSIZE - 3] = 0xAAAAAAAA; //R14 - LR
 8000362:	4a57      	ldr	r2, [pc, #348]	@ (80004c0 <osKernelStackInit+0x198>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800036a:	fb01 f303 	mul.w	r3, r1, r3
 800036e:	4413      	add	r3, r2
 8000370:	f203 6334 	addw	r3, r3, #1588	@ 0x634
 8000374:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000378:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 4] = 0xAAAAAAAA; //R12
 800037a:	4a51      	ldr	r2, [pc, #324]	@ (80004c0 <osKernelStackInit+0x198>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000382:	fb01 f303 	mul.w	r3, r1, r3
 8000386:	4413      	add	r3, r2
 8000388:	f503 63c6 	add.w	r3, r3, #1584	@ 0x630
 800038c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000390:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 5] = 0xAAAAAAAA; //R3
 8000392:	4a4b      	ldr	r2, [pc, #300]	@ (80004c0 <osKernelStackInit+0x198>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800039a:	fb01 f303 	mul.w	r3, r1, r3
 800039e:	4413      	add	r3, r2
 80003a0:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80003a4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003a8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 6] = 0xAAAAAAAA; //R2
 80003aa:	4a45      	ldr	r2, [pc, #276]	@ (80004c0 <osKernelStackInit+0x198>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003b2:	fb01 f303 	mul.w	r3, r1, r3
 80003b6:	4413      	add	r3, r2
 80003b8:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 80003bc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003c0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 7] = 0xAAAAAAAA; //R1
 80003c2:	4a3f      	ldr	r2, [pc, #252]	@ (80004c0 <osKernelStackInit+0x198>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003ca:	fb01 f303 	mul.w	r3, r1, r3
 80003ce:	4413      	add	r3, r2
 80003d0:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80003d4:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003d8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 8] = 0xAAAAAAAA; //R0
 80003da:	4a39      	ldr	r2, [pc, #228]	@ (80004c0 <osKernelStackInit+0x198>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003e2:	fb01 f303 	mul.w	r3, r1, r3
 80003e6:	4413      	add	r3, r2
 80003e8:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80003ec:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80003f0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 9] = 0xAAAAAAAA; //R11
 80003f2:	4a33      	ldr	r2, [pc, #204]	@ (80004c0 <osKernelStackInit+0x198>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80003fa:	fb01 f303 	mul.w	r3, r1, r3
 80003fe:	4413      	add	r3, r2
 8000400:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 8000404:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000408:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 10] = 0xAAAAAAAA; //R10
 800040a:	4a2d      	ldr	r2, [pc, #180]	@ (80004c0 <osKernelStackInit+0x198>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000412:	fb01 f303 	mul.w	r3, r1, r3
 8000416:	4413      	add	r3, r2
 8000418:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 800041c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000420:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 11] = 0xAAAAAAAA; //R9
 8000422:	4a27      	ldr	r2, [pc, #156]	@ (80004c0 <osKernelStackInit+0x198>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800042a:	fb01 f303 	mul.w	r3, r1, r3
 800042e:	4413      	add	r3, r2
 8000430:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 8000434:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000438:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 12] = 0xAAAAAAAA; //R8
 800043a:	4a21      	ldr	r2, [pc, #132]	@ (80004c0 <osKernelStackInit+0x198>)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000442:	fb01 f303 	mul.w	r3, r1, r3
 8000446:	4413      	add	r3, r2
 8000448:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 800044c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000450:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 13] = 0xAAAAAAAA; //R7
 8000452:	4a1b      	ldr	r2, [pc, #108]	@ (80004c0 <osKernelStackInit+0x198>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800045a:	fb01 f303 	mul.w	r3, r1, r3
 800045e:	4413      	add	r3, r2
 8000460:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8000464:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000468:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 14] = 0xAAAAAAAA; //R6
 800046a:	4a15      	ldr	r2, [pc, #84]	@ (80004c0 <osKernelStackInit+0x198>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8000472:	fb01 f303 	mul.w	r3, r1, r3
 8000476:	4413      	add	r3, r2
 8000478:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 800047c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000480:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 15] = 0xAAAAAAAA; //R5
 8000482:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <osKernelStackInit+0x198>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800048a:	fb01 f303 	mul.w	r3, r1, r3
 800048e:	4413      	add	r3, r2
 8000490:	f203 6304 	addw	r3, r3, #1540	@ 0x604
 8000494:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000498:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 16] = 0xAAAAAAAA; //R4
 800049a:	4a09      	ldr	r2, [pc, #36]	@ (80004c0 <osKernelStackInit+0x198>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 80004a2:	fb01 f303 	mul.w	r3, r1, r3
 80004a6:	4413      	add	r3, r2
 80004a8:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80004ac:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80004b0:	601a      	str	r2, [r3, #0]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000054 	.word	0x20000054
 80004c4:	20000038 	.word	0x20000038

080004c8 <osKernelAddThreads>:


uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
	// Disable global interrupts
	__disable_irq();
	tcbs[0].nextPt = &tcbs[1];
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <osKernelAddThreads+0x64>)
 80004da:	4a15      	ldr	r2, [pc, #84]	@ (8000530 <osKernelAddThreads+0x68>)
 80004dc:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt = &tcbs[2];
 80004de:	4b13      	ldr	r3, [pc, #76]	@ (800052c <osKernelAddThreads+0x64>)
 80004e0:	4a14      	ldr	r2, [pc, #80]	@ (8000534 <osKernelAddThreads+0x6c>)
 80004e2:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt = &tcbs[0];
 80004e4:	4b11      	ldr	r3, [pc, #68]	@ (800052c <osKernelAddThreads+0x64>)
 80004e6:	4a11      	ldr	r2, [pc, #68]	@ (800052c <osKernelAddThreads+0x64>)
 80004e8:	615a      	str	r2, [r3, #20]

	// initialise stack for thread0
	osKernelStackInit(0);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f7ff ff1c 	bl	8000328 <osKernelStackInit>
	// initialise PC
	TCB_STACK[0][STACKSIZE - 2] = (int32_t)(task0);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4a11      	ldr	r2, [pc, #68]	@ (8000538 <osKernelAddThreads+0x70>)
 80004f4:	f8c2 3638 	str.w	r3, [r2, #1592]	@ 0x638

	// initialise stack for thread1
	osKernelStackInit(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff ff15 	bl	8000328 <osKernelStackInit>
	// initialise PC
	TCB_STACK[1][STACKSIZE - 2] = (int32_t)(task1);
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <osKernelAddThreads+0x70>)
 8000502:	f8c2 3c78 	str.w	r3, [r2, #3192]	@ 0xc78

	// initialise stack for thread2
	osKernelStackInit(2);
 8000506:	2002      	movs	r0, #2
 8000508:	f7ff ff0e 	bl	8000328 <osKernelStackInit>
	// initialise PC
	TCB_STACK[2][STACKSIZE - 2] = (int32_t)(task2);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <osKernelAddThreads+0x70>)
 8000510:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000514:	f8c2 32b8 	str.w	r3, [r2, #696]	@ 0x2b8

	// start from thread0
	currentPt = &tcbs[0];
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <osKernelAddThreads+0x74>)
 800051a:	4a04      	ldr	r2, [pc, #16]	@ (800052c <osKernelAddThreads+0x64>)
 800051c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800051e:	b662      	cpsie	i
}
 8000520:	bf00      	nop

	// Enable gloabl interrupt
	__enable_irq();

	return 1;
 8000522:	2301      	movs	r3, #1
}
 8000524:	4618      	mov	r0, r3
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000038 	.word	0x20000038
 8000530:	20000040 	.word	0x20000040
 8000534:	20000048 	.word	0x20000048
 8000538:	20000054 	.word	0x20000054
 800053c:	20000050 	.word	0x20000050

08000540 <osKernelInit>:

void osKernelInit(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER = (BUS_FREQUENCY/1000);
 8000544:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <osKernelInit+0x18>)
 8000546:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000034 	.word	0x20000034

0800055c <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	// Reset Systick
	SysTick->CTRL = SYSTICK_RST;
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <osKernelLaunch+0x4c>)
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]

	// Clear systick current value register
	SysTick->VAL = 0;
 800056a:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <osKernelLaunch+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]

	// Load quanta
	SysTick->LOAD = (quanta * MILLIS_PRESCALER) - 1;
 8000570:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <osKernelLaunch+0x50>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	fb02 f303 	mul.w	r3, r2, r3
 800057a:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <osKernelLaunch+0x4c>)
 800057c:	3b01      	subs	r3, #1
 800057e:	6053      	str	r3, [r2, #4]

	// Set systick to low priority
	NVIC_SetPriority(SysTick_IRQn, 15);
 8000580:	210f      	movs	r1, #15
 8000582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000586:	f7ff fea5 	bl	80002d4 <__NVIC_SetPriority>

	// Enable systick, select intenal clock
	SysTick->CTRL = CTRL_CLCKSRC | CTRL_ENABLE;
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <osKernelLaunch+0x4c>)
 800058c:	2205      	movs	r2, #5
 800058e:	601a      	str	r2, [r3, #0]

	// Enable systick interrupt
	SysTick->CTRL |= CTRL_TICKINT;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <osKernelLaunch+0x4c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <osKernelLaunch+0x4c>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	6013      	str	r3, [r2, #0]

	// Launch Scheduler
	osSchedulerLaunch();
 800059c:	f000 f81e 	bl	80005dc <osSchedulerLaunch>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	e000e010 	.word	0xe000e010
 80005ac:	20000034 	.word	0x20000034

080005b0 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	// SUSPEND CURRENT THREAD
	// Disable global interrupt (to make this function atomic)
	__asm("CPSID    I");
 80005b0:	b672      	cpsid	i

	// Save r4, r5, r6, r7, r8, r9, r10, r11
	__asm("PUSH {R4-R11}");
 80005b2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Load address of currentPt into r0
	__asm("LDR R0, =currentPt");
 80005b6:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <SysTick_Handler+0x28>)

	// Load r1 from address equals r0, i.e. r1 =currentPt
	__asm("LDR R1,[R0]");
 80005b8:	6801      	ldr	r1, [r0, #0]

	// Store Cortex-M SP at address equals r1, i.e. Save SP into tcb
	__asm("STR SP,[R1]");
 80005ba:	f8c1 d000 	str.w	sp, [r1]

	// CHOOSE THE NEXT THREAD

	__asm("PUSH		{R0,LR}");
 80005be:	b501      	push	{r0, lr}
	__asm("BL		osSchedulerRoundRobin");
 80005c0:	f000 f836 	bl	8000630 <osSchedulerRoundRobin>
	__asm("POP		{R0,LR}");
 80005c4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	// R1 = currentPt i.e New Thread
	__asm("LDR		R1,[R0]");
 80005c8:	6801      	ldr	r1, [r0, #0]

	// sp = currentPt->StackPt
	__asm("LDR		SP,[R1]");
 80005ca:	f8d1 d000 	ldr.w	sp, [r1]

	// Restore r4, r5, r6, r7, r8, r9, r10, r11
	__asm("POP {R4-R11}");
 80005ce:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Enable global interrupts
	__asm("CPSIE    I");
 80005d2:	b662      	cpsie	i

	// Return from exception and restore r0, r1, r2, r3, r12, lr, pc, psr
	__asm("BX     LR");
 80005d4:	4770      	bx	lr
}
 80005d6:	bf00      	nop
 80005d8:	20000050 	.word	0x20000050

080005dc <osSchedulerLaunch>:

void osSchedulerLaunch(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	// Load address of currentPt in R0
	__asm("LDR R0,=currentPt");
 80005e0:	4809      	ldr	r0, [pc, #36]	@ (8000608 <osSchedulerLaunch+0x2c>)

	// Load r2 from address equals r0, i.e r2=currentPt
	__asm("LDR R2,[R0]");
 80005e2:	6802      	ldr	r2, [r0, #0]

	// Load Cortex-M SP from address equals R2, i.e. SP = currentPt->stackPt
	__asm("LDR SP,[R2]");
 80005e4:	f8d2 d000 	ldr.w	sp, [r2]

	// Restore r4,r5,r6,r7,r8,r9,10,r11
	__asm("POP {R4-R11}");
 80005e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Restore r12
	__asm("POP {R12}");
 80005ec:	f85d cb04 	ldr.w	ip, [sp], #4

	// Restore r0,r1,r2,r3
	__asm("POP {R0-R3}");
 80005f0:	bc0f      	pop	{r0, r1, r2, r3}

	// Skip LR
	__asm("ADD  SP,SP,#4");
 80005f2:	b001      	add	sp, #4

	// Create a new start location by popping LR
	__asm("POP {LR}");
 80005f4:	f85d eb04 	ldr.w	lr, [sp], #4

	// Skip PSR by adding 4 to SP
	__asm("ADD  SP,SP,#4");
 80005f8:	b001      	add	sp, #4

	// Enable global interrupts
	__asm("CPSIE    I");
 80005fa:	b662      	cpsie	i

	// Return from exception
	__asm("BX    LR");
 80005fc:	4770      	bx	lr
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	20000050 	.word	0x20000050

0800060c <osThreadYield>:

void osThreadYield(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
	// Clear systick current value register
	SysTick->VAL = 0;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <osThreadYield+0x1c>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]

	// Trigger Systick (interrupt controller state register 4.3.3 in the Cortex-M generic user guide) PENDSTSET
	INTCTRL = PENDSTSET;
 8000616:	4b05      	ldr	r3, [pc, #20]	@ (800062c <osThreadYield+0x20>)
 8000618:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800061c:	601a      	str	r2, [r3, #0]

}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e010 	.word	0xe000e010
 800062c:	e000ed04 	.word	0xe000ed04

08000630 <osSchedulerRoundRobin>:

void osSchedulerRoundRobin(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	if((++period_tick) == PERIOD)
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <osSchedulerRoundRobin+0x30>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a09      	ldr	r2, [pc, #36]	@ (8000660 <osSchedulerRoundRobin+0x30>)
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <osSchedulerRoundRobin+0x30>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b64      	cmp	r3, #100	@ 0x64
 8000644:	d104      	bne.n	8000650 <osSchedulerRoundRobin+0x20>
	{
		(*task3)();
 8000646:	f7ff fde9 	bl	800021c <task3>

		period_tick = 0;
 800064a:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <osSchedulerRoundRobin+0x30>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
	}

	currentPt = currentPt->nextPt;
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <osSchedulerRoundRobin+0x34>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	4a03      	ldr	r2, [pc, #12]	@ (8000664 <osSchedulerRoundRobin+0x34>)
 8000658:	6013      	str	r3, [r2, #0]
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000030 	.word	0x20000030
 8000664:	20000050 	.word	0x20000050

08000668 <tim2_1hz_interrupt_init>:

void tim2_1hz_interrupt_init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	// Enable clock access to tim2
	RCC->APB1ENR  |= TIM2EN;
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <tim2_1hz_interrupt_init+0x50>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a11      	ldr	r2, [pc, #68]	@ (80006b8 <tim2_1hz_interrupt_init+0x50>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40

	// Set timer prescaler
	TIM2->PSC = 1600 -1; // 16 000 000 / 1600 = 10 000
 8000678:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800067c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000680:	629a      	str	r2, [r3, #40]	@ 0x28

	// Set auto-reload value
	TIM2->ARR = 10000 - 1; // 10 000 / 10 000 = 1
 8000682:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000686:	f242 720f 	movw	r2, #9999	@ 0x270f
 800068a:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Clear counter
	TIM2->CNT = 0;
 800068c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24

	// Enable timer
	TIM2->CR1 = CR1_CEN;
 8000694:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]

	// Enable time interrupt
	TIM2->DIER |= DIER_UIE;
 800069c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	60d3      	str	r3, [r2, #12]

	// Enable timer interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 80006ac:	201c      	movs	r0, #28
 80006ae:	f7ff fdf3 	bl	8000298 <__NVIC_EnableIRQ>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800

080006bc <uart_tx_init>:
	uart_write(ch);
	return ch;
}

void uart_tx_init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* Enable Clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <uart_tx_init+0x84>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <uart_tx_init+0x84>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Set PA2 mode to alternate function mode - reference manual, search 'moder' set pin to alternate function pin*/
	GPIOA->MODER &=~(1U<<4);
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <uart_tx_init+0x88>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <uart_tx_init+0x88>)
 80006d2:	f023 0310 	bic.w	r3, r3, #16
 80006d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80006d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <uart_tx_init+0x88>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a19      	ldr	r2, [pc, #100]	@ (8000744 <uart_tx_init+0x88>)
 80006de:	f043 0320 	orr.w	r3, r3, #32
 80006e2:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7 (UART2_TX) - reference manual pg161, Pin2 is AFRL2 bits 8,9,10,11, want to set it to AF7:0111*/
	GPIOA->AFR[0] |= (1U<<8); // there are no AFRL in .h files it is an array and accessing AFRL is done by AFR[0]
 80006e4:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <uart_tx_init+0x88>)
 80006e6:	6a1b      	ldr	r3, [r3, #32]
 80006e8:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <uart_tx_init+0x88>)
 80006ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <uart_tx_init+0x88>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <uart_tx_init+0x88>)
 80006f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <uart_tx_init+0x88>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a10      	ldr	r2, [pc, #64]	@ (8000744 <uart_tx_init+0x88>)
 8000702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000706:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <uart_tx_init+0x88>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <uart_tx_init+0x88>)
 800070e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000712:	6213      	str	r3, [r2, #32]

	/* Enable clock access to UART - Datasheet - pg15 shows USART2 is connect via APB1 bus.
	 * Go to RM, find apb1enr. on the page118 it shows that if we set bit17 to 1 we will enable USART2 clock access */
	RCC->APB1ENR |= UART2EN;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <uart_tx_init+0x84>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a09      	ldr	r2, [pc, #36]	@ (8000740 <uart_tx_init+0x84>)
 800071a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40

	/* Configure baudrate */
	uart_set_baudrate(APB1_CLK, UART_BAUDRATE);
 8000720:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000724:	4808      	ldr	r0, [pc, #32]	@ (8000748 <uart_tx_init+0x8c>)
 8000726:	f000 f813 	bl	8000750 <uart_set_baudrate>

	/* Configure transfer direction - RM - search USART_CR1 - bit 3 if set to 1 it will enable transfer */
	USART2->CR1 = CR1_TE; // no logical OR used here as we want to set every other bit to 0 besides bit 3
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <uart_tx_init+0x90>)
 800072c:	2208      	movs	r2, #8
 800072e:	60da      	str	r2, [r3, #12]

	/* Enable UART module same page as above search - bit 13 if set to 1 will enable to USART module*/
	USART2->CR1 |= CR1_UE;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <uart_tx_init+0x90>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	4a05      	ldr	r2, [pc, #20]	@ (800074c <uart_tx_init+0x90>)
 8000736:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000
 8000748:	00f42400 	.word	0x00f42400
 800074c:	40004400 	.word	0x40004400

08000750 <uart_set_baudrate>:
	/* Write to transmit data register */
	USART2->DR = (ch & 0XFF);
}

static void uart_set_baudrate(uint32_t periphclock, uint32_t baudrate)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periphclock, baudrate);
 800075a:	6839      	ldr	r1, [r7, #0]
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f80b 	bl	8000778 <compute_uart_bd>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <uart_set_baudrate+0x24>)
 8000768:	609a      	str	r2, [r3, #8]

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40004400 	.word	0x40004400

08000778 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periphclock, uint32_t baudrate)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
	return ((periphclock + (baudrate/2U))/baudrate);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	085a      	lsrs	r2, r3, #1
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	441a      	add	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000790:	b29b      	uxth	r3, r3
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a0:	480d      	ldr	r0, [pc, #52]	@ (80007d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ce:	f000 f811 	bl	80007f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d2:	f7ff fd31 	bl	8000238 <main>

080007d6 <LoopForever>:

LoopForever:
  b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   r0, =_estack
 80007d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007e4:	0800085c 	.word	0x0800085c
  ldr r2, =_sbss
 80007e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007ec:	20001314 	.word	0x20001314

080007f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <__libc_init_array>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	4d0d      	ldr	r5, [pc, #52]	@ (800082c <__libc_init_array+0x38>)
 80007f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000830 <__libc_init_array+0x3c>)
 80007fa:	1b64      	subs	r4, r4, r5
 80007fc:	10a4      	asrs	r4, r4, #2
 80007fe:	2600      	movs	r6, #0
 8000800:	42a6      	cmp	r6, r4
 8000802:	d109      	bne.n	8000818 <__libc_init_array+0x24>
 8000804:	4d0b      	ldr	r5, [pc, #44]	@ (8000834 <__libc_init_array+0x40>)
 8000806:	4c0c      	ldr	r4, [pc, #48]	@ (8000838 <__libc_init_array+0x44>)
 8000808:	f000 f818 	bl	800083c <_init>
 800080c:	1b64      	subs	r4, r4, r5
 800080e:	10a4      	asrs	r4, r4, #2
 8000810:	2600      	movs	r6, #0
 8000812:	42a6      	cmp	r6, r4
 8000814:	d105      	bne.n	8000822 <__libc_init_array+0x2e>
 8000816:	bd70      	pop	{r4, r5, r6, pc}
 8000818:	f855 3b04 	ldr.w	r3, [r5], #4
 800081c:	4798      	blx	r3
 800081e:	3601      	adds	r6, #1
 8000820:	e7ee      	b.n	8000800 <__libc_init_array+0xc>
 8000822:	f855 3b04 	ldr.w	r3, [r5], #4
 8000826:	4798      	blx	r3
 8000828:	3601      	adds	r6, #1
 800082a:	e7f2      	b.n	8000812 <__libc_init_array+0x1e>
 800082c:	08000854 	.word	0x08000854
 8000830:	08000854 	.word	0x08000854
 8000834:	08000854 	.word	0x08000854
 8000838:	08000858 	.word	0x08000858

0800083c <_init>:
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083e:	bf00      	nop
 8000840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000842:	bc08      	pop	{r3}
 8000844:	469e      	mov	lr, r3
 8000846:	4770      	bx	lr

08000848 <_fini>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	bf00      	nop
 800084c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084e:	bc08      	pop	{r3}
 8000850:	469e      	mov	lr, r3
 8000852:	4770      	bx	lr
